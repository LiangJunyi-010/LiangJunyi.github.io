<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Home - Junyi Liang</title>
  
  <subtitle>Junyi Liang</subtitle>
  <link href="https://liangjunyi010.github.io/atom.xml" rel="self"/>
  
  <link href="https://liangjunyi010.github.io/"/>
  <updated>2025-01-10T03:15:17.502Z</updated>
  <id>https://liangjunyi010.github.io/</id>
  
  <author>
    <name>Liang Junyi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://liangjunyi010.github.io/2025/01/10/untitled-1/"/>
    <id>https://liangjunyi010.github.io/2025/01/10/untitled-1/</id>
    <published>2025-01-10T03:15:17.502Z</published>
    <updated>2025-01-10T03:15:17.502Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>AI Backdoor - Papers</title>
    <link href="https://liangjunyi010.github.io/2025/01/03/ai-backdoor-papers/"/>
    <id>https://liangjunyi010.github.io/2025/01/03/ai-backdoor-papers/</id>
    <published>2025-01-03T09:51:00.000Z</published>
    <updated>2025-01-03T08:24:49.422Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AI-Backdoor-Papers"><a href="#AI-Backdoor-Papers" class="headerlink" title="AI Backdoor - Papers"></a>AI Backdoor - Papers</h1><ol><li><strong>An LLM-Assisted Easy-to-Trigger Backdoor Attack on Code Completion Models: Injecting Disguised Vulnerabilities against Strong Detection</strong><ul><li><strong>Comments:</strong> To appear in USENIX Security ‘24</li><li>introduce CodeBreaker, a pioneering LLM-assisted backdoor attack framework</li><li>code completion task</li><li><a href="https://arxiv.org/abs/2406.06822">https://arxiv.org/abs/2406.06822</a></li><li><em>[Submitted on 10 Jun 2024]</em></li></ul></li><li><strong>BadAgent: Inserting and Activating Backdoor Attacks in LLM Agents</strong><ul><li><strong>Comments</strong>: Accepted by ACL 2024</li><li>propose BadAgent, a robust backdoor attack method for LLM-based intelligent agents</li><li>LLM agent tasks</li><li><a href="https://doi.org/10.48550/arXiv.2406.03007">https://doi.org/10.48550/arXiv.2406.03007</a></li><li><em>[Submitted on 5 Jun 2024]</em></li></ul></li><li><strong>RTL-Breaker: Assessing the Security of LLMs against Backdoor Attacks on HDL Code Generation</strong><ul><li><strong>Comments</strong>: Accepted at 2025 Design, Automation &amp; Test in Europe (DATE) Conference</li><li>propose RTL-Breaker, a novel backdoor attack framework for LLM-based HDL code generation</li><li>HDL code generation and security risks in hardware systems</li><li><a href="https://doi.org/10.48550/arXiv.2411.17569">https://doi.org/10.48550/arXiv.2411.17569</a></li><li><em>[Submitted on 11 Nov 2024]</em></li></ul></li><li><strong>BackdoorLLM: A Comprehensive Benchmark for Backdoor Attacks on Large Language Models</strong><ul><li>Introduces BackdoorLLM, the first comprehensive benchmark for studying backdoor attacks on LLMs</li><li>propose BackdoorLLM, a benchmark for evaluating diverse backdoor attacks in LLMs</li><li>backdoor attacks in LLM text generation tasks</li><li><a href="https://doi.org/10.48550/arXiv.2408.12798">https://doi.org/10.48550/arXiv.2408.12798</a></li><li><em>[Submitted on 27 Aug 2024]</em></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AI-Backdoor-Papers&quot;&gt;&lt;a href=&quot;#AI-Backdoor-Papers&quot; class=&quot;headerlink&quot; title=&quot;AI Backdoor - Papers&quot;&gt;&lt;/a&gt;AI Backdoor - Papers&lt;/h1&gt;&lt;ol&gt;
</summary>
      
    
    
    
    <category term="AI" scheme="https://liangjunyi010.github.io/categories/AI/"/>
    
    
    <category term="AI" scheme="https://liangjunyi010.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://liangjunyi010.github.io/2024/12/27/untitled/"/>
    <id>https://liangjunyi010.github.io/2024/12/27/untitled/</id>
    <published>2024-12-27T08:34:38.550Z</published>
    <updated>2024-02-28T06:42:53.015Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Trilobita</title>
    <link href="https://liangjunyi010.github.io/2023/12/20/project-trilobita/"/>
    <id>https://liangjunyi010.github.io/2023/12/20/project-trilobita/</id>
    <published>2023-12-20T08:39:00.000Z</published>
    <updated>2024-01-18T06:10:09.485Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Trilobita-A-Distributed-Graph-Processing-System"><a href="#Trilobita-A-Distributed-Graph-Processing-System" class="headerlink" title="Trilobita: A Distributed Graph Processing System"></a><em>Trilobita</em>: A Distributed Graph Processing System</h1><p><a href="https://github.com/LiangJunyi-010/Trilobita/blob/main/docs/graph/logo.png"><img src="https://s2.loli.net/2024/01/18/hu9Tesm5nUSB7Dd.png" alt="logo.png"></a></p><p><em>Trilobita</em> is a <em>Pregel-like</em> distributed graph processing system implemented to handle large-scale graph processing tasks in a distributed environment efficiently. This is the 50.041 Distributive System group project.</p><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p><em>Trilobita</em> is built to handle distributed graph processing tasks, providing a robust and fault-tolerant framework for efficient graph computation. We follow the ideas presented by Pregel,</p><p>Throughout the development of <em>Trilobita</em>, we adhere to the following guiding principles.</p><ol><li><strong>Fault Tolerance</strong>: the system should be able to gracefully manage failures of both the master and worker servers, ensuring continuity in task execution and failure handling.</li><li><strong>Flexibility</strong>: users of <em>Trilobita</em> should be empowered to customize their graph processing tasks and assemble operational clusters by using their personal laptops.</li><li><strong>Consistency</strong>: the system should guarantee causal consistency during the computation and fault-handling process, providing a reliable and predictable environment for users.</li><li><strong>Efficiency</strong>: the connection and communication between different machines should be efficient and adapt to varying cluster sizes for optimal performance.</li></ol><h2 id="Team-Members"><a href="#Team-Members" class="headerlink" title="Team Members"></a>Team Members</h2><p><em>Trilobita</em> is developed by the following group members:</p><ul><li>Guo Yuchen</li><li>Guo Ziniu</li><li>Liang Junyi</li><li>Wang Yanbao</li><li>Xiang Siqi</li></ul><h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><h3 id="Overall-Structure"><a href="#Overall-Structure" class="headerlink" title="Overall Structure"></a>Overall Structure</h3><p>Trilobita’s architecture is structured into three layers: Core, Engine, and Runtime. Each layer builds upon the functionalities of the preceding one, providing a comprehensive and modular design.</p><p><a href="https://github.com/LiangJunyi-010/Trilobita/blob/main/docs/graph/architecture.png"><img src="https://s2.loli.net/2024/01/18/3gUMivhJIKP8pZk.png" alt="architecture"></a></p><p>Particularly, the relationships between the master, workers, and master replicas are illustrated below.</p><p><a href="https://github.com/LiangJunyi-010/Trilobita/blob/main/docs/graph/master-worker-replicas.png"><img src="https://github.com/LiangJunyi-010/Trilobita/raw/main/docs/graph/master-worker-replicas.png" alt="master-worker-replicas"></a></p><h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><p>We implement a rich set of features in <em>Trilobita</em> to empower users with efficiency, reliability, and scalability in distributed graph processing.</p><ul><li>Distributed Graph Processing: <em>WokerServer</em>, <em>MasterServer</em>, <em>TrilobitaEnvironment</em></li><li>Fault Tolerance for Worker and Master: <em>Heartbeat</em>, <em>Snapshot</em></li><li>Functionable Instances: <em>Combiner</em>, <em>Aggregator</em>, <em>User Self-defined Functionable</em></li><li>Server Performance Monitor</li><li>Scalable Cluster and Parallelism</li><li>User-definable APIs: <em>Vertex</em>, <em>Computable</em>, <em>GraphParser</em>, <em>PartitionStrategy</em></li></ul><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><h3 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h3><p>All dependencies required by <em>Trilobita</em> are listed in the <a href="https://github.com/TsukiSky/Trilobita/blob/main/pom.xml">maven pom file</a>.</p><h3 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h3><p>To get started with <em>Trilobita</em>, proceed with these steps.</p><p><strong>Clone the Repository:</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/TsukiSky/Trilobita.git</span><br></pre></td></tr></tbody></table></figure><p><strong>Install Dependencies:</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install</span><br></pre></td></tr></tbody></table></figure><p><strong>Run Examples:</strong></p><p>We implement two examples in the <code>examples</code> module, which can be run by the following sequence.</p><p><em><strong>Note</strong>: the examples are run on a local cluster with 3 workers and 1 master.</em></p><p><strong>Example 1: PageRank Algorithm</strong></p><p>Navigate to the PageRank example directory: <code>examples\src\main\java\com\trilobita\examples\pagerank</code></p><p>Compile files:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac *.java</span><br></pre></td></tr></tbody></table></figure><p>Run Worker Server: (You might need to indicate the Worker Id in the filename)</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java WorkerServer.java</span><br></pre></td></tr></tbody></table></figure><p>Run Master Server:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java MasterServer.java</span><br></pre></td></tr></tbody></table></figure><p><strong>Example 2: Shortest Path Search Algorithm</strong></p><p>Navigate to the Shortest Path Search example directory: <code>examples\src\main\java\com\trilobita\examples\shortestpath</code></p><p>Compile files:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac *.java</span><br></pre></td></tr></tbody></table></figure><p>Run Worker Server: (You might need to indicate the Worker Id in the filename)</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java WorkerServer.java</span><br></pre></td></tr></tbody></table></figure><p>Run Master Server:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java MasterServer.java</span><br></pre></td></tr></tbody></table></figure><h3 id="Reports"><a href="#Reports" class="headerlink" title="Reports"></a>Reports</h3><p>Our reports can be found on:</p><ul><li>[Checkpoint 1 Report](<a href="https://github.com/TsukiSky/Trilobita/blob/main/docs/report/Checkpoint">https://github.com/TsukiSky/Trilobita/blob/main/docs/report/Checkpoint</a> 1 Report.pdf)</li><li>[Checkpoint 2 Report](<a href="https://github.com/TsukiSky/Trilobita/blob/main/docs/report/Checkpoint">https://github.com/TsukiSky/Trilobita/blob/main/docs/report/Checkpoint</a> 2 Report.pdf)</li><li>[Checkpoint 3 report](<a href="https://github.com/TsukiSky/Trilobita/blob/main/docs/report/Checkpoint">https://github.com/TsukiSky/Trilobita/blob/main/docs/report/Checkpoint</a> 3 Report.pdf)</li><li>[Final Report](<a href="https://github.com/TsukiSky/Trilobita/blob/main/docs/report/Final">https://github.com/TsukiSky/Trilobita/blob/main/docs/report/Final</a> Report.pdf)</li></ul><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>This project is licensed under the MIT License.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Trilobita-A-Distributed-Graph-Processing-System&quot;&gt;&lt;a href=&quot;#Trilobita-A-Distributed-Graph-Processing-System&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="Distributed System" scheme="https://liangjunyi010.github.io/categories/Distributed-System/"/>
    
    
    <category term="Java" scheme="https://liangjunyi010.github.io/tags/Java/"/>
    
    <category term="Pregel" scheme="https://liangjunyi010.github.io/tags/Pregel/"/>
    
    <category term="Distributed System" scheme="https://liangjunyi010.github.io/tags/Distributed-System/"/>
    
  </entry>
  
  <entry>
    <title>Capstone</title>
    <link href="https://liangjunyi010.github.io/2023/09/27/capstone/"/>
    <id>https://liangjunyi010.github.io/2023/09/27/capstone/</id>
    <published>2023-09-27T02:09:00.000Z</published>
    <updated>2023-09-27T08:39:11.253Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Capstone-Info"><a href="#Capstone-Info" class="headerlink" title="Capstone Info"></a>Capstone Info</h1><ul><li>value proposition</li><li>users and their needs</li><li>market analysis</li><li>relevant patents/ip</li><li>technology analysis</li></ul><h2 id="Member"><a href="#Member" class="headerlink" title="Member"></a>Member</h2><ul><li><strong>Liang Junyi</strong>: <strong>Project Manager:</strong> Responsible for overall project coordination, progress tracking, and communication with wider WealthCX team.</li><li><strong>Lin Zhiyuan</strong>: <strong>Database Developer:</strong> In charge of designing and implementing the MySQL database and integrating third-party data sources.</li><li><strong>Liaw Yu Zheng</strong>: <strong>Numbers Station Specialist:</strong> Responsible for integrating Numbers Station and implementing natural language visualization.</li><li><strong>Liu Lingao</strong>: <strong>FlowsieAI Specialist:</strong> Tasked with integrating FlowsieAI, enhancing data transformation, customizing LLM flows, and code generation.</li><li><strong>Guo Ziniu</strong>: <strong>Output Generator:</strong> Responsible for generating CSV files, automating API calls, and working with the FlowsieAI Specialist to visualize the output effectively.</li><li><strong>Ding Hongyue</strong>: <strong>Quality Assurance Analyst:</strong> Ensures the quality and reliability of the entire DAVT application.</li></ul><h2 id="value-proposition"><a href="#value-proposition" class="headerlink" title="value proposition"></a>value proposition</h2><p><strong>1. Streamlined Financial Data Analysis:</strong></p><ul><li>DAVT simplifies the process of analyzing financial data by automating data extraction, transformation, and visualization. This streamlining saves time and effort, allowing financial professionals to focus on decision-making rather than data processing.</li></ul><p><strong>2. Enhanced Decision-Making:</strong></p><ul><li>By providing easy access to third-party financial data, DAVT empowers organizations to make more informed decisions. The integration of Natural Language Queries and Language Model (LLM) transformations helps extract valuable insights from the data, leading to better decision-making.</li></ul><p><strong>3. Comprehensive Data Pipeline:</strong></p><ul><li>DAVT integrates external services like Numbers Station and FlowsieAI to create a comprehensive data pipeline. This integration ensures that the tool can handle various data sources and apply advanced data processing techniques.</li></ul><p><strong>4. Customization and Adaptability:</strong></p><ul><li>The use of FlowsieAI allows for customization of Language Model (LLM) flows, making it adaptable to specific data analysis needs. This flexibility ensures that the tool can be tailored to different financial analysis scenarios.</li></ul><p><strong>5. Effective Data Visualization:</strong></p><ul><li>DAVT is designed to visualize data effectively, making it easier for users to understand and interpret the information. This capability is crucial for conveying insights and trends within the data.</li></ul><p><strong>6. Export and Integration:</strong></p><ul><li>DAVT facilitates the export of transformed data in CSV format, making it compatible with various internal tools and processes. This seamless integration allows organizations to leverage the insights gained from DAVT across their operations.</li></ul><p><strong>7. Time and Cost Savings:</strong></p><ul><li>By automating data analysis and visualization tasks, DAVT helps organizations save time and reduce operational costs. It eliminates the need for manual data processing and minimizes the risk of errors.</li></ul><p><strong>8. Data-Driven Media Creation:</strong></p><ul><li>DAVT’s connection to internal tools like WealthCX enables the creation of short-form media and animated HTML visualizations of data. This feature can be used for data-driven content production and storytelling.</li></ul><h2 id="users-and-their-needs"><a href="#users-and-their-needs" class="headerlink" title="users and their needs"></a>users and their needs</h2><p><strong>1. Financial Analysts and Data Scientists:</strong></p><ul><li><strong>Needs:</strong> These users require access to comprehensive financial data for analysis and modeling. They need tools that can automate data extraction, apply advanced analytics techniques, and provide data visualization to uncover insights and trends.</li></ul><p><strong>2. Business Executives and Decision-Makers:</strong></p><ul><li><strong>Needs:</strong> Executives need concise and visually appealing reports and dashboards that provide actionable insights. They rely on DAVT to help them make informed decisions based on financial data.</li></ul><p><strong>3. Data Engineers and IT Professionals:</strong></p><ul><li><strong>Needs:</strong> IT professionals and data engineers need a robust and scalable infrastructure. They require DAVT to integrate seamlessly with existing systems, ensuring data security, reliability, and performance.</li></ul><p><strong>4. Marketing and Sales Teams:</strong></p><ul><li><strong>Needs:</strong> These teams may use DAVT for market research and competitive analysis. They need user-friendly interfaces and reports to understand market trends and consumer behavior.</li></ul><p><strong>5. Content Creators and Media Specialists:</strong></p><ul><li><strong>Needs:</strong> Content creators use DAVT’s output to generate short-form media and animated visualizations. They need easily exportable and customizable data formats to create engaging content.</li></ul><h2 id="market-analysis"><a href="#market-analysis" class="headerlink" title="market analysis"></a>market analysis</h2><p><strong>1. Market Overview:</strong></p><ul><li>Describe the overall market for data analysis and visualization tools, focusing on the financial sector.</li><li>Provide information on the size, growth rate, and key trends in the market.</li><li>Highlight the increasing importance of data-driven decision-making in finance.</li></ul><p><strong>2. Target Audience:</strong></p><ul><li>Define the specific industries and user groups within the financial sector that DAVT aims to serve.</li><li>Identify the needs and pain points of these target audiences.</li></ul><p><strong>3. Competitor Analysis:</strong></p><ul><li>Identify major competitors in the market, including established players and emerging startups.</li><li>Analyze their strengths, weaknesses, market share, and product offerings.</li><li>Determine the unique selling points (USPs) of DAVT compared to competitors.</li></ul><p><strong>4. Customer Needs and Pain Points:</strong></p><ul><li>Conduct surveys, interviews, or focus groups to understand the specific needs and pain points of potential users.</li><li>Identify common challenges in data analysis, visualization, and decision-making within the financial sector.</li></ul><p><strong>5. Market Trends and Opportunities:</strong></p><ul><li>Explore emerging trends in data analytics, natural language processing, and data visualization.</li><li>Identify opportunities for DAVT to capitalize on these trends.</li></ul><p><strong>6. Regulatory and Compliance Considerations:</strong></p><ul><li>Assess the regulatory environment in the financial sector, including data privacy and security regulations.</li><li>Ensure that DAVT complies with relevant industry standards and regulations.</li></ul><p><strong>7. Pricing and Monetization Strategy:</strong></p><ul><li>Determine the pricing model for DAVT, considering factors such as user licenses, data volume, and feature tiers.</li><li>Assess the willingness of customers to pay for such a tool.</li></ul><p><strong>8. Marketing and Sales Strategy:</strong></p><ul><li>Develop a marketing strategy to reach target customers, including digital marketing, content marketing, and sales outreach.</li><li>Identify distribution channels and partnerships that can help promote DAVT.</li></ul><p><strong>9. SWOT Analysis:</strong></p><ul><li>Conduct a SWOT analysis (Strengths, Weaknesses, Opportunities, Threats) to assess DAVT’s internal and external factors.</li></ul><p><strong>10. Challenges and Risks:</strong></p><ul><li>Identify potential challenges and risks, such as technical hurdles, competition, or changing market dynamics.</li><li>Develop mitigation strategies for these challenges.</li></ul><p><strong>11. Financial Projections:</strong></p><ul><li>Create financial projections, including revenue forecasts, cost estimates, and break-even analysis.</li></ul><p><strong>12. Feedback and Iteration:</strong></p><ul><li>Continuously gather feedback from potential users and adapt the product based on their input.</li></ul><p><strong>13. Market Entry Strategy:</strong></p><ul><li>Determine the most suitable market entry strategy, whether through a phased rollout, partnerships, or other approaches.</li></ul><p><strong>14. Scalability:</strong></p><ul><li>Assess the scalability of DAVT to accommodate future growth and increased demand.</li></ul><h2 id="relevant-patents-ip"><a href="#relevant-patents-ip" class="headerlink" title="relevant patents/ip"></a>relevant patents/ip</h2><h2 id="technology-analysis"><a href="#technology-analysis" class="headerlink" title="technology analysis"></a>technology analysis</h2><h2 id="What-is-Numbers-Station"><a href="#What-is-Numbers-Station" class="headerlink" title="What is Numbers Station?"></a>What is Numbers Station?</h2><p>Numbers Station is an intelligent data stack automation platform designed to save data scientists from repetitive and time-consuming tasks such as data cleaning, duplicate data removal, normalization, and more. Currently, it supports the use of SQL language only.</p><h2 id="Key-Features-of-Numbers-Station"><a href="#Key-Features-of-Numbers-Station" class="headerlink" title="Key Features of Numbers Station:"></a>Key Features of Numbers Station:</h2><p>The product offered by Numbers Station provides three major services to expedite data cleaning, access, and utilization:</p><ul><li>Automatic Generation of SQL Language: SQL language is primarily used for database queries. With Numbers Station, users don’t need to learn SQL language. They simply input natural language commands to obtain SQL formulas for directly fetching the required data.</li><li>Automatic AI Model Creation: Through commands, Numbers Station can automatically label data, and users only need to verify and correct the labels to create an AI model.</li><li>Automatic Database Integration: Since a company’s various data sets may be scattered across different platforms, Numbers Station can directly merge data from platforms like SAP, Salesforce, Snowflake, and more.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Capstone-Info&quot;&gt;&lt;a href=&quot;#Capstone-Info&quot; class=&quot;headerlink&quot; title=&quot;Capstone Info&quot;&gt;&lt;/a&gt;Capstone Info&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;value proposition&lt;/l</summary>
      
    
    
    
    <category term="Capstone" scheme="https://liangjunyi010.github.io/categories/Capstone/"/>
    
    
    <category term="Capstone" scheme="https://liangjunyi010.github.io/tags/Capstone/"/>
    
  </entry>
  
  <entry>
    <title>GO learning - 011 map</title>
    <link href="https://liangjunyi010.github.io/2023/09/14/go-learning-011-map/"/>
    <id>https://liangjunyi010.github.io/2023/09/14/go-learning-011-map/</id>
    <published>2023-09-14T06:51:00.000Z</published>
    <updated>2023-09-14T09:48:46.203Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GO-learning-011-map"><a href="#GO-learning-011-map" class="headerlink" title="GO learning - 011 map"></a>GO learning - 011 map</h1><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"></span><br><span class="line"><span class="comment">//first declare method</span></span><br><span class="line"><span class="keyword">var</span> mymap1 <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span></span><br><span class="line"><span class="keyword">if</span> mymap1 == <span class="literal">nil</span> {</span><br><span class="line">fmt.Println(<span class="string">"mymap is an empty map"</span>)</span><br><span class="line">}</span><br><span class="line">mymap1 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, <span class="number">10</span>)</span><br><span class="line">mymap1[<span class="string">"one"</span>] = <span class="string">"java"</span></span><br><span class="line">mymap1[<span class="string">"two"</span>] = <span class="string">"c++"</span></span><br><span class="line">mymap1[<span class="string">"three"</span>] = <span class="string">"python"</span></span><br><span class="line"></span><br><span class="line">fmt.Println(mymap1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//second declare method</span></span><br><span class="line">mymap2 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>)</span><br><span class="line">mymap2[<span class="number">1</span>] = <span class="string">"java"</span></span><br><span class="line">mymap2[<span class="number">2</span>] = <span class="string">"c++"</span></span><br><span class="line">mymap2[<span class="number">3</span>] = <span class="string">"python"</span></span><br><span class="line"></span><br><span class="line">fmt.Println(mymap2)</span><br><span class="line"><span class="comment">//third declare method</span></span><br><span class="line">mymap3 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>{</span><br><span class="line"><span class="string">"one"</span>:   <span class="string">"php"</span>,</span><br><span class="line"><span class="string">"two"</span>:   <span class="string">"c++"</span>,</span><br><span class="line"><span class="string">"three"</span>: <span class="string">"python"</span>,</span><br><span class="line">}</span><br><span class="line">fmt.Println(mymap3)</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mymap is an empty <span class="keyword">map</span></span><br><span class="line"><span class="keyword">map</span>[one:java three:python two:c++]</span><br><span class="line"><span class="keyword">map</span>[<span class="number">1</span>:java <span class="number">2</span>:c++ <span class="number">3</span>:python]</span><br><span class="line"><span class="keyword">map</span>[one:php three:python two:c++]</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GO-learning-011-map&quot;&gt;&lt;a href=&quot;#GO-learning-011-map&quot; class=&quot;headerlink&quot; title=&quot;GO learning - 011 map&quot;&gt;&lt;/a&gt;GO learning - 011 map&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="GO" scheme="https://liangjunyi010.github.io/categories/GO/"/>
    
    
    <category term="go" scheme="https://liangjunyi010.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>GO learning - 010 slice op</title>
    <link href="https://liangjunyi010.github.io/2023/09/14/go-learning-010-slice-op/"/>
    <id>https://liangjunyi010.github.io/2023/09/14/go-learning-010-slice-op/</id>
    <published>2023-09-14T05:51:00.000Z</published>
    <updated>2023-09-14T09:31:45.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GO-learning-010-slice-op"><a href="#GO-learning-010-slice-op" class="headerlink" title="GO learning - 010 slice op"></a>GO learning - 010 slice op</h1><p><img src="https://s2.loli.net/2023/09/14/IV1QDNY3nS2kWBL.png" alt="image-20230914162021227"></p><p><img src="https://s2.loli.net/2023/09/14/7CfuMwNXcxLZgPR.png" alt="image-20230914162239345"></p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"><span class="keyword">var</span> numbers = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"len = %d, cap = %d, slice = %v\n"</span>, <span class="built_in">len</span>(numbers), <span class="built_in">cap</span>(numbers), numbers)</span><br><span class="line"></span><br><span class="line">numbers = <span class="built_in">append</span>(numbers, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"len = %d, cap = %d, slice = %v\n"</span>, <span class="built_in">len</span>(numbers), <span class="built_in">cap</span>(numbers), numbers)</span><br><span class="line"></span><br><span class="line">numbers = <span class="built_in">append</span>(numbers, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"len = %d, cap = %d, slice = %v\n"</span>, <span class="built_in">len</span>(numbers), <span class="built_in">cap</span>(numbers), numbers)</span><br><span class="line"></span><br><span class="line">numbers = <span class="built_in">append</span>(numbers, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"len = %d, cap = %d, slice = %v\n"</span>, <span class="built_in">len</span>(numbers), <span class="built_in">cap</span>(numbers), numbers)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"---------------"</span>)</span><br><span class="line"><span class="keyword">var</span> numbers2 = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line">fmt.Printf(<span class="string">"len = %d, cap = %d, slice = %v\n"</span>, <span class="built_in">len</span>(numbers2), <span class="built_in">cap</span>(numbers2), numbers2)</span><br><span class="line">numbers2 = <span class="built_in">append</span>(numbers2, <span class="number">1</span>)</span><br><span class="line">fmt.Printf(<span class="string">"len = %d, cap = %d, slice = %v\n"</span>, <span class="built_in">len</span>(numbers2), <span class="built_in">cap</span>(numbers2), numbers2)</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span> = <span class="number">3</span>, <span class="built_in">cap</span> = <span class="number">5</span>, slice = [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"><span class="built_in">len</span> = <span class="number">4</span>, <span class="built_in">cap</span> = <span class="number">5</span>, slice = [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>]</span><br><span class="line"><span class="built_in">len</span> = <span class="number">5</span>, <span class="built_in">cap</span> = <span class="number">5</span>, slice = [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"><span class="built_in">len</span> = <span class="number">6</span>, <span class="built_in">cap</span> = <span class="number">10</span>, slice = [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">---------------</span><br><span class="line"><span class="built_in">len</span> = <span class="number">3</span>, <span class="built_in">cap</span> = <span class="number">3</span>, slice = [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"><span class="built_in">len</span> = <span class="number">4</span>, <span class="built_in">cap</span> = <span class="number">6</span>, slice = [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">s := []<span class="type">int</span>{<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>}</span><br><span class="line"></span><br><span class="line">s1 := s[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">fmt.Println(s1)</span><br><span class="line"></span><br><span class="line">s1[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">fmt.Println(s)</span><br><span class="line">fmt.Println(s1)</span><br><span class="line"></span><br><span class="line">s2 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">copy</span>(s2, s)</span><br><span class="line">fmt.Println(s2)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line">[<span class="number">100</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">[<span class="number">100</span> <span class="number">2</span>]</span><br><span class="line">[<span class="number">100</span> <span class="number">2</span> <span class="number">3</span>]</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GO-learning-010-slice-op&quot;&gt;&lt;a href=&quot;#GO-learning-010-slice-op&quot; class=&quot;headerlink&quot; title=&quot;GO learning - 010 slice op&quot;&gt;&lt;/a&gt;GO learning </summary>
      
    
    
    
    <category term="GO" scheme="https://liangjunyi010.github.io/categories/GO/"/>
    
    
    <category term="go" scheme="https://liangjunyi010.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>GO learning - 009 slice</title>
    <link href="https://liangjunyi010.github.io/2023/09/14/go-learning-009-slice/"/>
    <id>https://liangjunyi010.github.io/2023/09/14/go-learning-009-slice/</id>
    <published>2023-09-14T04:51:00.000Z</published>
    <updated>2023-09-14T09:08:58.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GO-learning-009-slice"><a href="#GO-learning-009-slice" class="headerlink" title="GO learning - 009 slice"></a>GO learning - 009 slice</h1><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"><span class="comment">// slice1 := []int{1, 2, 3}</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> slice1 []<span class="type">int</span></span><br><span class="line">slice1 = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line">slice1[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">slice2 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line">fmt.Printf(<span class="string">"len = %d, slice = %v\n"</span>, <span class="built_in">len</span>(slice1), slice1)</span><br><span class="line">fmt.Printf(<span class="string">"len = %d, slice = %v\n"</span>, <span class="built_in">len</span>(slice2), slice2)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span> = <span class="number">3</span>, slice = [<span class="number">100</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"><span class="built_in">len</span> = <span class="number">3</span>, slice = [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GO-learning-009-slice&quot;&gt;&lt;a href=&quot;#GO-learning-009-slice&quot; class=&quot;headerlink&quot; title=&quot;GO learning - 009 slice&quot;&gt;&lt;/a&gt;GO learning - 009 sli</summary>
      
    
    
    
    <category term="GO" scheme="https://liangjunyi010.github.io/categories/GO/"/>
    
    
    <category term="go" scheme="https://liangjunyi010.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>GO learning - 008 array</title>
    <link href="https://liangjunyi010.github.io/2023/09/14/go-learning-008-array/"/>
    <id>https://liangjunyi010.github.io/2023/09/14/go-learning-008-array/</id>
    <published>2023-09-14T03:51:00.000Z</published>
    <updated>2023-09-14T09:08:54.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GO-learning-008-array"><a href="#GO-learning-008-array" class="headerlink" title="GO learning - 008 array"></a>GO learning - 008 array</h1><p>test1</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printArray</span><span class="params">(myArray [4]<span class="type">int</span>)</span></span> {</span><br><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> myArray {</span><br><span class="line">fmt.Println(<span class="string">"index = "</span>, index, <span class="string">" value = "</span>, value)</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"><span class="keyword">var</span> myArray1 [<span class="number">10</span>]<span class="type">int</span></span><br><span class="line"></span><br><span class="line">myArray2 := [<span class="number">10</span>]<span class="type">int</span>{<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>}</span><br><span class="line">myArray3 := [<span class="number">4</span>]<span class="type">int</span>{<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(myArray1); i++ {</span><br><span class="line">fmt.Println(myArray1[i])</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> myArray2 {</span><br><span class="line">fmt.Println(<span class="string">"index = "</span>, index, <span class="string">" value = "</span>, value)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"myArray1 types = %T\n"</span>, myArray1)</span><br><span class="line">fmt.Printf(<span class="string">"myArray2 types = %T\n"</span>, myArray2)</span><br><span class="line">fmt.Printf(<span class="string">"myArray3 types = %T\n"</span>, myArray3)</span><br><span class="line"></span><br><span class="line">printArray(myArray3) <span class="comment">//传1或2会报错</span></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">index =  <span class="number">0</span>  value =  <span class="number">1</span></span><br><span class="line">index =  <span class="number">1</span>  value =  <span class="number">2</span></span><br><span class="line">index =  <span class="number">2</span>  value =  <span class="number">3</span></span><br><span class="line">index =  <span class="number">3</span>  value =  <span class="number">4</span></span><br><span class="line">index =  <span class="number">4</span>  value =  <span class="number">0</span></span><br><span class="line">index =  <span class="number">5</span>  value =  <span class="number">0</span></span><br><span class="line">index =  <span class="number">6</span>  value =  <span class="number">0</span></span><br><span class="line">index =  <span class="number">7</span>  value =  <span class="number">0</span></span><br><span class="line">index =  <span class="number">8</span>  value =  <span class="number">0</span></span><br><span class="line">index =  <span class="number">9</span>  value =  <span class="number">0</span></span><br><span class="line">myArray1 types = [<span class="number">10</span>]<span class="type">int</span></span><br><span class="line">myArray2 types = [<span class="number">10</span>]<span class="type">int</span></span><br><span class="line">myArray3 types = [<span class="number">4</span>]<span class="type">int</span></span><br><span class="line">index =  <span class="number">0</span>  value =  <span class="number">11</span></span><br><span class="line">index =  <span class="number">1</span>  value =  <span class="number">22</span></span><br><span class="line">index =  <span class="number">2</span>  value =  <span class="number">33</span></span><br><span class="line">index =  <span class="number">3</span>  value =  <span class="number">44</span></span><br></pre></td></tr></tbody></table></figure><p>test2</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printArray</span><span class="params">(myArray []<span class="type">int</span>)</span></span> {</span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> myArray {</span><br><span class="line">fmt.Println(<span class="string">"value = "</span>, value)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">myArray[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"></span><br><span class="line">myArray := []<span class="type">int</span>{<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>}</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"myArray type is %T\n"</span>, myArray)</span><br><span class="line"></span><br><span class="line">printArray(myArray)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"==="</span>)</span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> myArray {</span><br><span class="line">fmt.Println(value)</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">myArray <span class="keyword">type</span> is []<span class="type">int</span></span><br><span class="line">value =  <span class="number">1</span></span><br><span class="line">value =  <span class="number">2</span></span><br><span class="line">value =  <span class="number">3</span></span><br><span class="line">value =  <span class="number">4</span></span><br><span class="line">===</span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GO-learning-008-array&quot;&gt;&lt;a href=&quot;#GO-learning-008-array&quot; class=&quot;headerlink&quot; title=&quot;GO learning - 008 array&quot;&gt;&lt;/a&gt;GO learning - 008 arr</summary>
      
    
    
    
    <category term="GO" scheme="https://liangjunyi010.github.io/categories/GO/"/>
    
    
    <category term="go" scheme="https://liangjunyi010.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>GO learning - 007 defer</title>
    <link href="https://liangjunyi010.github.io/2023/09/14/go-learning-007-defer/"/>
    <id>https://liangjunyi010.github.io/2023/09/14/go-learning-007-defer/</id>
    <published>2023-09-14T02:51:00.000Z</published>
    <updated>2023-09-14T09:08:51.018Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GO-learning-007-defer"><a href="#GO-learning-007-defer" class="headerlink" title="GO learning - 007 defer"></a>GO learning - 007 defer</h1><p>先defer的先放到stack里</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func1</span><span class="params">()</span></span> {</span><br><span class="line">fmt.Println(<span class="string">"A"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func2</span><span class="params">()</span></span> {</span><br><span class="line">fmt.Println(<span class="string">"B"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func3</span><span class="params">()</span></span> {</span><br><span class="line">fmt.Println(<span class="string">"C"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"><span class="keyword">defer</span> func1()</span><br><span class="line"><span class="keyword">defer</span> func2()</span><br><span class="line"><span class="keyword">defer</span> func3()</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C</span><br><span class="line">B</span><br><span class="line">A</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GO-learning-007-defer&quot;&gt;&lt;a href=&quot;#GO-learning-007-defer&quot; class=&quot;headerlink&quot; title=&quot;GO learning - 007 defer&quot;&gt;&lt;/a&gt;GO learning - 007 def</summary>
      
    
    
    
    <category term="GO" scheme="https://liangjunyi010.github.io/categories/GO/"/>
    
    
    <category term="go" scheme="https://liangjunyi010.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>GO learning - 006 Pointer</title>
    <link href="https://liangjunyi010.github.io/2023/09/14/go-learning-006-import-anonymous-and-rename/"/>
    <id>https://liangjunyi010.github.io/2023/09/14/go-learning-006-import-anonymous-and-rename/</id>
    <published>2023-09-14T00:51:00.000Z</published>
    <updated>2023-09-15T02:56:32.160Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GO-learning-006-Pointer"><a href="#GO-learning-006-Pointer" class="headerlink" title="GO learning - 006 Pointer"></a>GO learning - 006 Pointer</h1><p><img src="https://s2.loli.net/2023/09/14/DRGCNZ6JjrS12Ty.png" alt="image-20230914143914977"></p><p><img src="https://s2.loli.net/2023/09/14/3jFlksOIueah4y9.png" alt="image-20230914144207753"></p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> {</span><br><span class="line"><span class="keyword">var</span> temp <span class="type">int</span></span><br><span class="line">temp = a</span><br><span class="line">a = b</span><br><span class="line">b = temp</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">int</span> = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">swap(a, b)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"a = "</span>, a, <span class="string">" b = "</span>, b)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a =  <span class="number">10</span>  b =  <span class="number">20</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// func swap(a int, b int) {</span></span><br><span class="line"><span class="comment">// var temp int</span></span><br><span class="line"><span class="comment">// temp = a</span></span><br><span class="line"><span class="comment">// a = b</span></span><br><span class="line"><span class="comment">// b = temp</span></span><br><span class="line"><span class="comment">// }</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(pa *<span class="type">int</span>, pb *<span class="type">int</span>)</span></span> {</span><br><span class="line"><span class="keyword">var</span> temp <span class="type">int</span></span><br><span class="line">temp = *pa</span><br><span class="line">*pa = *pb</span><br><span class="line">*pb = temp</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">int</span> = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">swap(&amp;a, &amp;b)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"a = "</span>, a, <span class="string">" b = "</span>, b)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a =  <span class="number">20</span>  b =  <span class="number">10</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GO-learning-006-Pointer&quot;&gt;&lt;a href=&quot;#GO-learning-006-Pointer&quot; class=&quot;headerlink&quot; title=&quot;GO learning - 006 Pointer&quot;&gt;&lt;/a&gt;GO learning - 0</summary>
      
    
    
    
    <category term="GO" scheme="https://liangjunyi010.github.io/categories/GO/"/>
    
    
    <category term="go" scheme="https://liangjunyi010.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>GO learning - 005 Import anonymous and rename</title>
    <link href="https://liangjunyi010.github.io/2023/09/13/go-learning-005-import-anonymous-and-rename/"/>
    <id>https://liangjunyi010.github.io/2023/09/13/go-learning-005-import-anonymous-and-rename/</id>
    <published>2023-09-13T09:51:00.000Z</published>
    <updated>2023-09-14T07:36:38.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GO-learning-005-Import-anonymous-and-rename"><a href="#GO-learning-005-Import-anonymous-and-rename" class="headerlink" title="GO learning - 005 Import anonymous and rename"></a>GO learning - 005 Import anonymous and rename</h1><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"mymodule/src/GolangStudy/5-init/lib1"</span></span><br><span class="line"><span class="string">"mymodule/src/GolangStudy/5-init/lib2"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">lib1.Lib1Test()</span><br><span class="line"><span class="comment">//lib2.Lib2Test()</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lib1 function</span><br><span class="line">Lib1Tese</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"mymodule/src/GolangStudy/5-init/lib1"</span></span><br><span class="line">_ <span class="string">"mymodule/src/GolangStudy/5-init/lib2"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">lib1.Lib1Test()</span><br><span class="line"><span class="comment">//lib2.Lib2Test()</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lib1 function</span><br><span class="line">lib2 function</span><br><span class="line">Lib1Tese</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">x <span class="string">"mymodule/src/GolangStudy/5-init/lib1"</span></span><br><span class="line">_ <span class="string">"mymodule/src/GolangStudy/5-init/lib2"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">x.Lib1Test()</span><br><span class="line"><span class="comment">//lib2.Lib2Test()</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lib1 function</span><br><span class="line">lib2 function</span><br><span class="line">Lib1Tese</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GO-learning-005-Import-anonymous-and-rename&quot;&gt;&lt;a href=&quot;#GO-learning-005-Import-anonymous-and-rename&quot; class=&quot;headerlink&quot; title=&quot;GO lea</summary>
      
    
    
    
    <category term="GO" scheme="https://liangjunyi010.github.io/categories/GO/"/>
    
    
    <category term="go" scheme="https://liangjunyi010.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>GO learning - 004 Import and Init</title>
    <link href="https://liangjunyi010.github.io/2023/09/12/go-learning-004-import-and-init/"/>
    <id>https://liangjunyi010.github.io/2023/09/12/go-learning-004-import-and-init/</id>
    <published>2023-09-12T09:51:00.000Z</published>
    <updated>2023-09-14T07:36:50.938Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GO-learning-004-Import-and-Init"><a href="#GO-learning-004-Import-and-Init" class="headerlink" title="GO learning - 004 Import and Init"></a>GO learning - 004 Import and Init</h1><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>-init$ tree</span><br><span class="line">.</span><br><span class="line">├── lib1</span><br><span class="line">│   └── lib1.<span class="keyword">go</span></span><br><span class="line">├── lib2</span><br><span class="line">│   └── lib2.<span class="keyword">go</span></span><br><span class="line">└── main.<span class="keyword">go</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> directories, <span class="number">3</span> files</span><br></pre></td></tr></tbody></table></figure><p>lib1</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lib1</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Lib1Test</span><span class="params">()</span></span> {</span><br><span class="line">fmt.Println(<span class="string">"Lib1Tese"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> {</span><br><span class="line">fmt.Println(<span class="string">"lib1 function"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>lib2</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lib2</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Lib2Test</span><span class="params">()</span></span> {</span><br><span class="line">fmt.Println(<span class="string">"Lib2Tese"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> {</span><br><span class="line">fmt.Println(<span class="string">"lib2 function"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>main</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"mymodule/src/GolangStudy/5-init/lib1"</span></span><br><span class="line"><span class="string">"mymodule/src/GolangStudy/5-init/lib2"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">lib1.Lib1Test()</span><br><span class="line">lib2.Lib2Test()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lib1 function</span><br><span class="line">lib2 function</span><br><span class="line">Lib1Tese</span><br><span class="line">Lib2Tese</span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2023/09/14/oYHLkzjF9WuO6Zd.png" alt="image-20230914142344859"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GO-learning-004-Import-and-Init&quot;&gt;&lt;a href=&quot;#GO-learning-004-Import-and-Init&quot; class=&quot;headerlink&quot; title=&quot;GO learning - 004 Import and I</summary>
      
    
    
    
    <category term="GO" scheme="https://liangjunyi010.github.io/categories/GO/"/>
    
    
    <category term="go" scheme="https://liangjunyi010.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>GO learning - 003 Function</title>
    <link href="https://liangjunyi010.github.io/2023/09/11/go-learning-003-function/"/>
    <id>https://liangjunyi010.github.io/2023/09/11/go-learning-003-function/</id>
    <published>2023-09-11T09:51:00.000Z</published>
    <updated>2023-09-14T06:22:50.285Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GO-learning-003-Function"><a href="#GO-learning-003-Function" class="headerlink" title="GO learning - 003 Function"></a>GO learning - 003 Function</h1><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fool</span><span class="params">(a <span class="type">string</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line">fmt.Println(a)</span><br><span class="line">fmt.Println(b)</span><br><span class="line"></span><br><span class="line">c := <span class="number">100</span></span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">x := fool(<span class="string">"abc"</span>, <span class="number">5</span>)</span><br><span class="line">fmt.Println(x)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abc</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GO-learning-003-Function&quot;&gt;&lt;a href=&quot;#GO-learning-003-Function&quot; class=&quot;headerlink&quot; title=&quot;GO learning - 003 Function&quot;&gt;&lt;/a&gt;GO learning </summary>
      
    
    
    
    <category term="GO" scheme="https://liangjunyi010.github.io/categories/GO/"/>
    
    
    <category term="go" scheme="https://liangjunyi010.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>GO learning - 002 Const Iota</title>
    <link href="https://liangjunyi010.github.io/2023/09/10/go-learning-002-variable/"/>
    <id>https://liangjunyi010.github.io/2023/09/10/go-learning-002-variable/</id>
    <published>2023-09-10T09:51:00.000Z</published>
    <updated>2023-09-14T06:20:50.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GO-learning-002-Const-Iota"><a href="#GO-learning-002-Const-Iota" class="headerlink" title="GO learning - 002 Const Iota"></a>GO learning - 002 Const Iota</h1><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const 来定义枚举类型</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">BEIJING = <span class="number">10</span> * <span class="literal">iota</span></span><br><span class="line">SHANGHAI</span><br><span class="line">SHENZHEN</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"><span class="comment">//常量（只读属性）</span></span><br><span class="line"><span class="keyword">const</span> length <span class="type">int</span> = <span class="number">10</span></span><br><span class="line">fmt.Println(length)</span><br><span class="line"></span><br><span class="line">fmt.Println(BEIJING)</span><br><span class="line">fmt.Println(SHANGHAI)</span><br><span class="line">fmt.Println(SHENZHEN)</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GO-learning-002-Const-Iota&quot;&gt;&lt;a href=&quot;#GO-learning-002-Const-Iota&quot; class=&quot;headerlink&quot; title=&quot;GO learning - 002 Const Iota&quot;&gt;&lt;/a&gt;GO lea</summary>
      
    
    
    
    <category term="GO" scheme="https://liangjunyi010.github.io/categories/GO/"/>
    
    
    <category term="go" scheme="https://liangjunyi010.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>GO learning - 001 Variable</title>
    <link href="https://liangjunyi010.github.io/2023/09/09/go-learning-001-variable/"/>
    <id>https://liangjunyi010.github.io/2023/09/09/go-learning-001-variable/</id>
    <published>2023-09-09T09:51:00.000Z</published>
    <updated>2023-09-14T06:21:17.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GO-learning-001-Variable"><a href="#GO-learning-001-Variable" class="headerlink" title="GO learning - 001 Variable"></a>GO learning - 001 Variable</h1><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">四种变量的声明方式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"><span class="comment">//方法一：声明一个变量</span></span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span></span><br><span class="line">fmt.Println(<span class="string">"a = "</span>, a)</span><br><span class="line">fmt.Printf(<span class="string">"type of a = %T\n"</span>, a)</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：声明一个变量，初始化一个值</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">int</span> = <span class="number">100</span></span><br><span class="line">fmt.Println(<span class="string">"b = "</span>, b)</span><br><span class="line">fmt.Printf(<span class="string">"type of b = %T\n"</span>, b)</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法三：初始化的时候，省去数据类型，通过值自动匹配类型</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">100</span></span><br><span class="line">fmt.Println(<span class="string">"c = "</span>, c)</span><br><span class="line">fmt.Printf(<span class="string">"type of c = %T\n"</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法四:(常用的方法)省去var关键字，直接自动匹配</span></span><br><span class="line">e := <span class="number">100</span></span><br><span class="line">fmt.Println(<span class="string">"e ="</span>, e)</span><br><span class="line">fmt.Printf(<span class="string">"type of e = %T\n"</span>, e)</span><br><span class="line"></span><br><span class="line">f, g := <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">fmt.Println(<span class="string">"f = "</span>, f, <span class="string">" g = "</span>, g)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a =  <span class="number">0</span></span><br><span class="line"><span class="keyword">type</span> of a = <span class="type">int</span></span><br><span class="line">b =  <span class="number">100</span></span><br><span class="line"><span class="keyword">type</span> of b = <span class="type">int</span></span><br><span class="line">c =  <span class="number">100</span></span><br><span class="line"><span class="keyword">type</span> of c = <span class="type">int</span></span><br><span class="line">e = <span class="number">100</span></span><br><span class="line"><span class="keyword">type</span> of e = <span class="type">int</span></span><br><span class="line">f =  <span class="number">2</span>  g =  <span class="number">3</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GO-learning-001-Variable&quot;&gt;&lt;a href=&quot;#GO-learning-001-Variable&quot; class=&quot;headerlink&quot; title=&quot;GO learning - 001 Variable&quot;&gt;&lt;/a&gt;GO learning </summary>
      
    
    
    
    <category term="GO" scheme="https://liangjunyi010.github.io/categories/GO/"/>
    
    
    <category term="go" scheme="https://liangjunyi010.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Java-注解和反射</title>
    <link href="https://liangjunyi010.github.io/2023/06/30/java-zhu-jie-he-fan-she/"/>
    <id>https://liangjunyi010.github.io/2023/06/30/java-zhu-jie-he-fan-she/</id>
    <published>2023-06-30T09:40:00.000Z</published>
    <updated>2023-09-10T11:18:03.297Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-注解和反射"><a href="#Java-注解和反射" class="headerlink" title="Java-注解和反射"></a>Java-注解和反射</h1><h2 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> <span class="keyword">extends</span> <span class="title class_">Object</span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Override 重写的注解</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.toString();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Deprecated</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"Deprecated"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings("all")</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>{</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        test();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><ul><li>Java里有四个元注解，重点放在Target和Retention上</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> annotations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试元注解</span></span><br><span class="line"><span class="meta">@MyAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> {</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@MyAnnotation</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>{</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个注解</span></span><br><span class="line"><span class="comment">//Target 表示我们的注解可以用在什么地方</span></span><br><span class="line"><span class="comment">//ElementType.METHOD 代表可以用在方法上，ElementType.TYPE代表可以用在Class，interface上</span></span><br><span class="line"><span class="meta">@Target(value= {ElementType.METHOD,ElementType.TYPE})</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Retention 表示我们的注解在什么地方还有效</span></span><br><span class="line"><span class="comment">//runtime&gt;class&gt;source, 代表如果只定义了class那么在source也有效，在runtime无效</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Document 表示是否将我们的注解生成在JAVAdoc中</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Inherited 子类可以继承父类的注解</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation{</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> annotations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03</span> {</span><br><span class="line">    <span class="meta">@MyAnnotation2(name = "门酱",schools = {"河北工业大学"})</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>{</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//如果没有默认值，则必须给注解赋值</span></span><br><span class="line">    <span class="meta">@MyAnnotation2(schools = {"河北工业大学"})</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotation3("门酱")</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target({ElementType.TYPE,ElementType.METHOD})</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation2{</span><br><span class="line">    <span class="comment">//这是注解的参数</span></span><br><span class="line">    <span class="comment">//参数类型+参数名()</span></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">""</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">age</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">id</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>; <span class="comment">//如果默认值为-1，代表不存在，indexof，如果找不到就返回-1</span></span><br><span class="line">    String[] schools();</span><br><span class="line">}</span><br><span class="line"><span class="meta">@Target({ElementType.TYPE,ElementType.METHOD})</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation3{</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><p>Java不是动态语言（动态语言即可以在运行时代码根据某些条件改变自身结构），但因为反射机制，可以称之为准动态语言。这使得Java编程时更加灵活，但是风险也提升。</p><h2 id="获得反射对象"><a href="#获得反射对象" class="headerlink" title="获得反射对象"></a>获得反射对象</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="comment">//什么叫反射</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException {</span><br><span class="line">        <span class="comment">//通过反射获取类的class对象</span></span><br><span class="line">        Class&lt;?&gt; c1 = Class.forName(<span class="string">"reflection.User"</span>);</span><br><span class="line">        System.out.println(c1);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; c2 = Class.forName(<span class="string">"reflection.User"</span>);</span><br><span class="line">        Class&lt;?&gt; c3 = Class.forName(<span class="string">"reflection.User"</span>);</span><br><span class="line">        Class&lt;?&gt; c4 = Class.forName(<span class="string">"reflection.User"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一个类在内存中只有一个class对象</span></span><br><span class="line">        <span class="comment">//一个类被加载后，类的整个结构都会被封装在class对象中。</span></span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line">        System.out.println(c4.hashCode());</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//实体类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> {</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> {</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> {</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">reflection</span>.User</span><br><span class="line"><span class="number">1915910607</span></span><br><span class="line"><span class="number">1915910607</span></span><br><span class="line"><span class="number">1915910607</span></span><br></pre></td></tr></tbody></table></figure><h2 id="得到Class类的几种方式"><a href="#得到Class类的几种方式" class="headerlink" title="得到Class类的几种方式"></a>得到Class类的几种方式</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException {</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(<span class="string">"这个人是:"</span>+person.name);</span><br><span class="line">        <span class="comment">//方式一：通过对象获得</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> person.getClass();</span><br><span class="line">        System.out.println(c1.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：forname获得</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Class.forName(<span class="string">"reflection.Student"</span>);</span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式三：通过类名.class获得</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Student.class;</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式四：基本内置类型的包装类都有一个Type属性</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> Integer.TYPE;</span><br><span class="line">        System.out.println(c4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得父类类型</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c5</span> <span class="operator">=</span> c1.getSuperclass();</span><br><span class="line">        System.out.println(c5);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>{</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> {</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>{</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">"学生"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">()</span>{</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">"老师"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这个人是:学生</span><br><span class="line"><span class="number">284720968</span></span><br><span class="line"><span class="number">284720968</span></span><br><span class="line"><span class="number">284720968</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">reflection</span>.Person</span><br></pre></td></tr></tbody></table></figure><h2 id="所有类型的Class对象"><a href="#所有类型的Class对象" class="headerlink" title="所有类型的Class对象"></a>所有类型的Class对象</h2><ul><li>class：外部类，成员（成员内部类，静态内部类），局部内部类，匿名内部类</li><li>interface：接口</li><li>[]：数组</li><li>enum：枚举</li><li>annotation：注解@interface</li><li>primitive type：基本数据类型</li><li>void</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.text.Element;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有类型的Class对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test04</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Object.class; <span class="comment">//类</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Comparable.class; <span class="comment">//接口</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> String[].class; <span class="comment">//一维数组</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="type">int</span>[][].class; <span class="comment">//二维数组</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c5</span> <span class="operator">=</span> Override.class; <span class="comment">//注解</span></span><br><span class="line">        Class c6= ElementType.class; <span class="comment">//枚举</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c7</span> <span class="operator">=</span> Integer.class; <span class="comment">//基本数据类型</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c8</span> <span class="operator">=</span> <span class="keyword">void</span>.class; <span class="comment">//void</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c9</span> <span class="operator">=</span> Class.class; <span class="comment">//class</span></span><br><span class="line"></span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        System.out.println(c3);</span><br><span class="line">        System.out.println(c4);</span><br><span class="line">        System.out.println(c5);</span><br><span class="line">        System.out.println(c6);</span><br><span class="line">        System.out.println(c7);</span><br><span class="line">        System.out.println(c8);</span><br><span class="line">        System.out.println(c9);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//只要元素类型与维度一样，就是同一个class</span></span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];</span><br><span class="line">        System.out.println(a.getClass().hashCode());</span><br><span class="line">        System.out.println(b.getClass().hashCode());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">java</span>.lang.Object</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">java</span>.lang.Comparable</span><br><span class="line">class [Ljava.lang.String;</span><br><span class="line">class [[I</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">java</span>.lang.Override</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">java</span>.lang.annotation.ElementType</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">java</span>.lang.Integer</span><br><span class="line"><span class="keyword">void</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">java</span>.lang.Class</span><br></pre></td></tr></tbody></table></figure><h2 id="类加载内存分析"><a href="#类加载内存分析" class="headerlink" title="类加载内存分析"></a>类加载内存分析</h2><p><img src="https://s2.loli.net/2023/09/10/H5XMlspOcJQmBt1.png" alt="image-20230630211743387"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test05</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        System.out.println(A.m);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>{</span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        System.out.println(<span class="string">"A类静态代码块初始化"</span>);</span><br><span class="line">        m=<span class="number">300</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span><span class="number">100</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"A类的无参构造初始化"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A类静态代码块初始化</span><br><span class="line">A类的无参构造初始化</span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意修改static int m =100; 放到static代码块前面，m最终是300</p></blockquote><h2 id="分析类初始化"><a href="#分析类初始化" class="headerlink" title="分析类初始化"></a>分析类初始化</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test06</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        System.out.println(<span class="string">"Main类被加载"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException {</span><br><span class="line">        <span class="comment">//1.主动引用</span></span><br><span class="line"><span class="comment">//        Son son = new Son();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射也会产生主动引用</span></span><br><span class="line"><span class="comment">//        Class.forName("reflection.Son");</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//不会产生类的引用的方法</span></span><br><span class="line"><span class="comment">//        System.out.println(Son.b);</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Main类被加载</span></span><br><span class="line"><span class="comment">         * 父类被加载</span></span><br><span class="line"><span class="comment">         * 2</span></span><br><span class="line"><span class="comment">         * **/</span></span><br><span class="line"><span class="comment">//        Son[] array = new Son[5];</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Main类被加载</span></span><br><span class="line"><span class="comment">         * **/</span></span><br><span class="line"></span><br><span class="line">        System.out.println(Son.M);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Main类被加载</span></span><br><span class="line"><span class="comment">         * 1</span></span><br><span class="line"><span class="comment">         * **/</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>{</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        System.out.println(<span class="string">"父类被加载"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>{</span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        System.out.println(<span class="string">"子类被加载"</span>);</span><br><span class="line">        m = <span class="number">300</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> M=<span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-注解和反射&quot;&gt;&lt;a href=&quot;#Java-注解和反射&quot; class=&quot;headerlink&quot; title=&quot;Java-注解和反射&quot;&gt;&lt;/a&gt;Java-注解和反射&lt;/h1&gt;&lt;h2 id=&quot;内置注解&quot;&gt;&lt;a href=&quot;#内置注解&quot; class=&quot;head</summary>
      
    
    
    
    <category term="Java" scheme="https://liangjunyi010.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://liangjunyi010.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Typora 配置上传图片</title>
    <link href="https://liangjunyi010.github.io/2023/06/30/typora-pei-zhi-shang-chuan-tu-pian/"/>
    <id>https://liangjunyi010.github.io/2023/06/30/typora-pei-zhi-shang-chuan-tu-pian/</id>
    <published>2023-06-30T09:40:00.000Z</published>
    <updated>2023-09-10T11:20:32.610Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置Token"><a href="#配置Token" class="headerlink" title="配置Token"></a>配置Token</h3><p>选择 sm.ms 作为图床,官网地址：<a href="https://sm.ms/">https://sm.ms</a></p><p>特点：永久存储免注册，图片链接支持https，可以删除上传的图片，提供多种图片链接格式，建立于2015年，目前免费用户无法使用香港节点因此速度比较慢</p><p>图片上传限制：每个图片最大5M，每次最多上传10张</p><ol><li><p>注册或登陆 sm.ms</p><p><a href="https://sm.ms/login">https://sm.ms/login</a></p></li><li><p>生成 token</p><p><a href="https://sm.ms/home/apitoken">https://sm.ms/home/apitoken</a></p></li><li><p>配置 token</p></li></ol><p>在 Typora 配置中，图像 -&gt; 打开配置文件，将下面代码 copy 进去，然后 token 改成自己的就可以了。</p><p>注意修改后重启软件：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"picBed"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"uploader"</span><span class="punctuation">:</span> <span class="string">"smms"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"smms"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"token"</span><span class="punctuation">:</span> <span class="string">"xxxxxxxxxxxxxxxxxxxxx"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"picgoPlugins"</span><span class="punctuation">:</span> <span class="punctuation">{</span><span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h2 id="账号"><a href="#账号" class="headerlink" title="账号"></a>账号</h2><p>账号：1004891</p><p>密码：Wy</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;配置Token&quot;&gt;&lt;a href=&quot;#配置Token&quot; class=&quot;headerlink&quot; title=&quot;配置Token&quot;&gt;&lt;/a&gt;配置Token&lt;/h3&gt;&lt;p&gt;选择 sm.ms 作为图床,官网地址：&lt;a href=&quot;https://sm.ms/&quot;&gt;https:</summary>
      
    
    
    
    <category term="Markdown" scheme="https://liangjunyi010.github.io/categories/Markdown/"/>
    
    
    <category term="Markdown" scheme="https://liangjunyi010.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>A File Sharing Linux Application</title>
    <link href="https://liangjunyi010.github.io/2023/04/18/project-a-file-sharing-linux-application/"/>
    <id>https://liangjunyi010.github.io/2023/04/18/project-a-file-sharing-linux-application/</id>
    <published>2023-04-18T07:14:00.000Z</published>
    <updated>2023-09-10T11:21:27.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A-File-Sharing-Linux-Application"><a href="#A-File-Sharing-Linux-Application" class="headerlink" title="A File Sharing Linux Application"></a>A File Sharing Linux Application</h1><p>1004891 Liang Junyi </p><p>1004890 Guo Ziniu </p><p>1005604 Zhang Chunjie </p><p>1004887 Liu Lingao </p><p>1005446 Shaun Hin </p><p>1005327 Yu Qin </p><h2 id="Intro-problem-statement"><a href="#Intro-problem-statement" class="headerlink" title="Intro &amp; problem statement"></a><strong>Intro &amp; problem statement</strong></h2><p>Based on our daily life experience and research, most existing file transfer apps do not support direct transfer data through the clipboard, which makes it difficult for users to transfer data conveniently and efficiently. Also, most existing FTP protocol-based apps lack a file recovery function, an unexpected network connection interruption can disrupt the entire downloading process and cause failure of download. </p><p>Hence we decided to design our file sharing system, with clipboard direct-transfer and file recovery features. With these enhancements, users of our app will be able to transfer data more efficiently, and without worrying about potential loss of progress of downloading bulk files due to an unstable network environment. </p><h2 id="Related-work"><a href="#Related-work" class="headerlink" title="Related work"></a><strong>Related work</strong></h2><ul><li><p>Project scaffolding: electron-vite <a href="https://evite.netlify.app/">https://evite.netlify.app/</a></p></li><li><p>FTP:</p></li><li><ul><li>basic-ftp <a href="https://www.npmjs.com/package/basic-ftp">https://www.npmjs.com/package/basic-ftp</a></li><li>Ftp-srv <a href="https://www.npmjs.com/package/ftp-srv">https://www.npmjs.com/package/ftp-srv</a></li></ul></li><li><p>SFTP:</p></li><li><ul><li>ssh2-sftp-client <a href="https://www.npmjs.com/package/ssh2-sftp-client">https://www.npmjs.com/package/ssh2-sftp-client</a></li><li>node-ftp-server <a href="https://www.npmjs.com/package/node-sftp-server">https://www.npmjs.com/package/node-sftp-server</a></li></ul></li><li><p>Other:</p></li><li><ul><li>Clipboardy <a href="https://www.npmjs.com/package/clipboardy">https://www.npmjs.com/package/clipboardy</a></li></ul></li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Approach-methodology"><a href="#Approach-methodology" class="headerlink" title="Approach / methodology"></a><strong>Approach / methodology</strong></h2><h3 id="Clipboard-protocol-switch"><a href="#Clipboard-protocol-switch" class="headerlink" title="Clipboard &amp; protocol switch"></a><strong>Clipboard &amp; protocol switch</strong></h3><ul><li>Direct Transfer from Clipboard</li></ul><p>Firstly, a listener is created when the application is running. The listener will periodically examine the clipboard every second. If any content is received on clipboard, an UDP socket will be created to transfer the content to the device with the IP address that it is connected with. Every device running the application should have a listener examined on the clipboard.</p><p><img src="https://s2.loli.net/2023/09/10/VUJSg57nWjkvCep.png" alt="img"></p><ul><li>Protocol Switch</li></ul><p>When the application starts, FTP and SFTP server will be run together. At the same time, a global variable will be created to store the current protocol state, using FTP by default. Once the client clicks on the protocol switch, the current protocol state will be updated. Hence, every time a client tries to get a file, it will check the current protocol state, based on that, corresponding downloading channel will be selected. </p><h3 id="Recovery"><a href="#Recovery" class="headerlink" title="Recovery"></a><strong>Recovery</strong></h3><h4 id="Details"><a href="#Details" class="headerlink" title="Details :"></a><strong>Details :</strong></h4><p><strong><img src="https://s2.loli.net/2023/09/10/9KNaBbYeMVmQWl2.jpg" alt="img"></strong></p><ul><li><p>Before network outage</p></li><li><ol><li>Client : create a TCP and FTP connection with server</li><li>Server : return file list to client</li><li>Client : send download request to server by TCP</li><li>Server : read file into byte array</li><li>Server : slice the file into smaller parts</li><li>Server : inform client about file slices by TCP (header information)</li><li>Client : based on header information generate a log file to track the file slices</li><li>Client : send file slices download request to server by FTP</li><li>Server : return file slices based on client request</li><li>Client : received file slices, update the log file</li></ol></li><li><p>After network outage</p></li><li><ol><li>Client : want to send download request for the large file again</li><li>Client : check log file first, check integrity</li><li>Client : send not finished file slices download request to server by FTP</li><li>Server : return file slices based on client request</li><li>Client : received file slices, update the log file</li><li>Client : received all file slices, delete the log file, merge the file slices together into original large file</li></ol></li></ul><h4 id="Brief-summary-about-Recovery-mechanism"><a href="#Brief-summary-about-Recovery-mechanism" class="headerlink" title="Brief summary about Recovery mechanism :"></a><strong>Brief summary about Recovery mechanism :</strong></h4><p>Client requests the large file, server splits the file into many file slices, client uses FTP to get each file slice instead of the large file itself.</p><h4 id="Example-header-info"><a href="#Example-header-info" class="headerlink" title="Example header info :"></a><strong>Example header info :</strong></h4><p><strong><img src="https://s2.loli.net/2023/09/10/G6Ra2ehImis9xTF.png" alt="img"></strong></p><h4 id="Example-log-file"><a href="#Example-log-file" class="headerlink" title="Example log file :"></a><strong>Example log file :</strong></h4><p><strong><img src="https://s2.loli.net/2023/09/10/Cdrt1cf6pHVoi2I.png" alt="img"></strong></p><h4 id="Q-A"><a href="#Q-A" class="headerlink" title="Q &amp; A"></a><strong>Q &amp; A</strong></h4><ol><li><p>Why do we choose TCP to send header info, but using FTP to send files since FTP is built on TCP, why not choose UDP since it is faster without hand shake?</p></li><li><ul><li>Answer :</li><li>TCP is a protocol that provides reliable, ordered, and error-checked delivery of data between applications running on hosts communicating over an IP network. It establishes a connection between two endpoints, handles data segmentation, and manages flow control and congestion control. TCP ensures that data is delivered to the destination without loss or duplication.<br>FTP, on the other hand, is a protocol designed specifically for transferring files between hosts over a network. It runs on top of TCP and uses its reliable data delivery capabilities. FTP provides features like file upload and download, directory listing, and file management. It also includes security mechanisms like authentication and encryption to protect data during transmission.<br>So, the reason why we use FTP to send files instead of TCP is that FTP is built on top of TCP and adds additional functionality to it. FTP provides a user-friendly interface for transferring files, manages data transfer and communication with the remote host, and handles file management tasks that TCP doesn’t provide.<br>The reason why we use TCP to send header information instead of FTP is that header information is not so much so we do not need to write it into a file and transfer by FTP. Because the information in header information is important that we do not want it to miss any parts so we need to rely on TCP’s reliable, ordered data transfer. So we did not choose UDP.</li></ul></li></ol><h2 id="Code-base-if-any"><a href="#Code-base-if-any" class="headerlink" title="Code base (if any)"></a><strong>Code base (if any)</strong></h2><h3 id="Ftp"><a href="#Ftp" class="headerlink" title="Ftp"></a><strong>Ftp</strong></h3><p>Our FTP transfer is based on node.js packages ftp-srv and basic-ftp. The server part is relatively simple, we wrap it up in a separate class and start it on a child process when starting the main application. For the client side code, we also encapsulated the library in our own class, such that we can invoke the api more easily, and it’s more convenient to integrate the recovery function, etc. Within the class, we implemented getFile() to download a file from ftp server, getFileList() to get the file information of the designated directory, and putFIle() to upload a file from client to server. </p><p>Those file transfer api are exposed from Electron’s main process to renderer process via the preload script. When a user enters a destination IP, clicks on a folder or on a file, the corresponding event handlers will be triggered, and invoke those functionalities provided in the main process, and do the file transfer operations. And, when a download task finishes, an event will be triggered and the downloaded files list will be refreshed.</p><h3 id="Sftp"><a href="#Sftp" class="headerlink" title="Sftp"></a><strong>Sftp</strong></h3><p>For our Secure File Transfer Protocol (SFTP) code base, we used a node.js repository ssh2-sftp-client for our client script functions, and node-sftp-server for our server script functions. Through our reading, we implemented and tested the sending of files over the local area network directly from one machine to another machine by private IP address. </p><p>Since the protocol runs over a Secure Shell (SSH) session, we deemed that this was secure for our purposes and as the protocol listens on the default port 22 which does not clash with the port 21 used by FTP, we believe SFTP is a suitable alternative to the FTP protocol that is the default mode of transfer. </p><p>Our implementation of the code is called through setting the UI radio button for secure transfer, however we were unable to test the speed of transferring over FTP compared to SFTP due to time constraints.</p><h2 id="Evaluation-experiment-results"><a href="#Evaluation-experiment-results" class="headerlink" title="Evaluation / experiment results"></a><strong>Evaluation / experiment results</strong></h2><h4 id="Assume"><a href="#Assume" class="headerlink" title="Assume"></a><strong>Assume</strong></h4><p>Client requests a file, and this file is splitted by server into 5 parts.</p><p>The horizontal axis shows the file received by the client when a network outage happens.</p><p>The vertical axis shows the time to re-download this file.</p><p><img src="https://s2.loli.net/2023/09/10/D7A4X95PvtFuV1C.png" alt="Chart"></p><ol><li><p>The blue line is Without recovery, so no matter how much it downloads before network outage. Client will not check how much content has already been received but request the original file again.</p></li><li><p>The red line is Expected time for recovery, it means when client receives some files for example 2 out of 5, then when client re-download, it only needs re-download for the remaining 3 parts, so time is reduced to 3/5 .</p></li><li><p>The yellow line is Our recovery time, it is different compared to the red line because sending more requests needs more time then just one request. Also Server split files and Client update log file, merge file slices both need some time, just not so much.</p></li><li><ul><li>At first slower then red line</li><li>Gradually approx the red line (because we focus on the re-download time, less requests, less time)</li></ul></li></ol><h2 id="Conclusion-future-work"><a href="#Conclusion-future-work" class="headerlink" title="Conclusion / future work"></a><strong>Conclusion / future work</strong></h2><p>We implemented, and debugged the FTP and SFTP protocols for file transfer over local area network (LAN), direct transfer of clipboard over UDP, and a recovery mechanism for resuming the download of large files instead of restarting the download, then compiled the mechanisms into an Electron user interface to package our file transfer application Quick Share. Since our final application could reliably transfer files from one machine to another over LAN, we conclude that our application matches our expectations of making file transfer over LAN convenient and without central servers to facilitate the transfer. </p><p>Although we could not implement fixes for edge cases, further improvements can be made by using the hash of files to indicate if the sliced file parts have been transferred so as to mitigate file changes on the server after a network loss event. The cache of files on both the client and server can be cleared in the event of a cancelled download during the network loss event as well, so as to reduce the impact on storage that our application requires.</p><p><strong>Github Repository:</strong> <a href="https://github.com/LiangJunyi-010/NetworkProject">https://github.com/LiangJunyi-010/NetworkProject</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;A-File-Sharing-Linux-Application&quot;&gt;&lt;a href=&quot;#A-File-Sharing-Linux-Application&quot; class=&quot;headerlink&quot; title=&quot;A File Sharing Linux Applica</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://liangjunyi010.github.io/categories/JavaScript/"/>
    
    
    <category term="Linux" scheme="https://liangjunyi010.github.io/tags/Linux/"/>
    
    <category term="JavaScript" scheme="https://liangjunyi010.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Network</title>
    <link href="https://liangjunyi010.github.io/2023/03/28/network/"/>
    <id>https://liangjunyi010.github.io/2023/03/28/network/</id>
    <published>2023-03-28T13:30:00.000Z</published>
    <updated>2023-03-28T10:54:51.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Network&quot;&gt;&lt;a href=&quot;#Network&quot; class=&quot;headerlink&quot; title=&quot;Network&quot;&gt;&lt;/a&gt;Network&lt;/h1&gt;</summary>
      
    
    
    
    <category term="Operating System" scheme="https://liangjunyi010.github.io/categories/Operating-System/"/>
    
    
    <category term="Network" scheme="https://liangjunyi010.github.io/tags/Network/"/>
    
  </entry>
  
</feed>
