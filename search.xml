<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/liangjunyi.github.io/2024/12/27/untitled/"/>
      <url>/liangjunyi.github.io/2024/12/27/untitled/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Trilobita</title>
      <link href="/liangjunyi.github.io/2023/12/20/project-trilobita/"/>
      <url>/liangjunyi.github.io/2023/12/20/project-trilobita/</url>
      
        <content type="html"><![CDATA[<h1 id="Trilobita-A-Distributed-Graph-Processing-System"><a href="#Trilobita-A-Distributed-Graph-Processing-System" class="headerlink" title="Trilobita: A Distributed Graph Processing System"></a><em>Trilobita</em>: A Distributed Graph Processing System</h1><p><a href="https://github.com/LiangJunyi-010/Trilobita/blob/main/docs/graph/logo.png"><img src="https://s2.loli.net/2024/01/18/hu9Tesm5nUSB7Dd.png" alt="logo.png"></a></p><p><em>Trilobita</em> is a <em>Pregel-like</em> distributed graph processing system implemented to handle large-scale graph processing tasks in a distributed environment efficiently. This is the 50.041 Distributive System group project.</p><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p><em>Trilobita</em> is built to handle distributed graph processing tasks, providing a robust and fault-tolerant framework for efficient graph computation. We follow the ideas presented by Pregel,</p><p>Throughout the development of <em>Trilobita</em>, we adhere to the following guiding principles.</p><ol><li><strong>Fault Tolerance</strong>: the system should be able to gracefully manage failures of both the master and worker servers, ensuring continuity in task execution and failure handling.</li><li><strong>Flexibility</strong>: users of <em>Trilobita</em> should be empowered to customize their graph processing tasks and assemble operational clusters by using their personal laptops.</li><li><strong>Consistency</strong>: the system should guarantee causal consistency during the computation and fault-handling process, providing a reliable and predictable environment for users.</li><li><strong>Efficiency</strong>: the connection and communication between different machines should be efficient and adapt to varying cluster sizes for optimal performance.</li></ol><h2 id="Team-Members"><a href="#Team-Members" class="headerlink" title="Team Members"></a>Team Members</h2><p><em>Trilobita</em> is developed by the following group members:</p><ul><li>Guo Yuchen</li><li>Guo Ziniu</li><li>Liang Junyi</li><li>Wang Yanbao</li><li>Xiang Siqi</li></ul><h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><h3 id="Overall-Structure"><a href="#Overall-Structure" class="headerlink" title="Overall Structure"></a>Overall Structure</h3><p>Trilobita’s architecture is structured into three layers: Core, Engine, and Runtime. Each layer builds upon the functionalities of the preceding one, providing a comprehensive and modular design.</p><p><a href="https://github.com/LiangJunyi-010/Trilobita/blob/main/docs/graph/architecture.png"><img src="https://s2.loli.net/2024/01/18/3gUMivhJIKP8pZk.png" alt="architecture"></a></p><p>Particularly, the relationships between the master, workers, and master replicas are illustrated below.</p><p><a href="https://github.com/LiangJunyi-010/Trilobita/blob/main/docs/graph/master-worker-replicas.png"><img src="https://github.com/LiangJunyi-010/Trilobita/raw/main/docs/graph/master-worker-replicas.png" alt="master-worker-replicas"></a></p><h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><p>We implement a rich set of features in <em>Trilobita</em> to empower users with efficiency, reliability, and scalability in distributed graph processing.</p><ul><li>Distributed Graph Processing: <em>WokerServer</em>, <em>MasterServer</em>, <em>TrilobitaEnvironment</em></li><li>Fault Tolerance for Worker and Master: <em>Heartbeat</em>, <em>Snapshot</em></li><li>Functionable Instances: <em>Combiner</em>, <em>Aggregator</em>, <em>User Self-defined Functionable</em></li><li>Server Performance Monitor</li><li>Scalable Cluster and Parallelism</li><li>User-definable APIs: <em>Vertex</em>, <em>Computable</em>, <em>GraphParser</em>, <em>PartitionStrategy</em></li></ul><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><h3 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h3><p>All dependencies required by <em>Trilobita</em> are listed in the <a href="https://github.com/TsukiSky/Trilobita/blob/main/pom.xml">maven pom file</a>.</p><h3 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h3><p>To get started with <em>Trilobita</em>, proceed with these steps.</p><p><strong>Clone the Repository:</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/TsukiSky/Trilobita.git</span><br></pre></td></tr></tbody></table></figure><p><strong>Install Dependencies:</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install</span><br></pre></td></tr></tbody></table></figure><p><strong>Run Examples:</strong></p><p>We implement two examples in the <code>examples</code> module, which can be run by the following sequence.</p><p><em><strong>Note</strong>: the examples are run on a local cluster with 3 workers and 1 master.</em></p><p><strong>Example 1: PageRank Algorithm</strong></p><p>Navigate to the PageRank example directory: <code>examples\src\main\java\com\trilobita\examples\pagerank</code></p><p>Compile files:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac *.java</span><br></pre></td></tr></tbody></table></figure><p>Run Worker Server: (You might need to indicate the Worker Id in the filename)</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java WorkerServer.java</span><br></pre></td></tr></tbody></table></figure><p>Run Master Server:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java MasterServer.java</span><br></pre></td></tr></tbody></table></figure><p><strong>Example 2: Shortest Path Search Algorithm</strong></p><p>Navigate to the Shortest Path Search example directory: <code>examples\src\main\java\com\trilobita\examples\shortestpath</code></p><p>Compile files:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac *.java</span><br></pre></td></tr></tbody></table></figure><p>Run Worker Server: (You might need to indicate the Worker Id in the filename)</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java WorkerServer.java</span><br></pre></td></tr></tbody></table></figure><p>Run Master Server:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java MasterServer.java</span><br></pre></td></tr></tbody></table></figure><h3 id="Reports"><a href="#Reports" class="headerlink" title="Reports"></a>Reports</h3><p>Our reports can be found on:</p><ul><li>[Checkpoint 1 Report](<a href="https://github.com/TsukiSky/Trilobita/blob/main/docs/report/Checkpoint">https://github.com/TsukiSky/Trilobita/blob/main/docs/report/Checkpoint</a> 1 Report.pdf)</li><li>[Checkpoint 2 Report](<a href="https://github.com/TsukiSky/Trilobita/blob/main/docs/report/Checkpoint">https://github.com/TsukiSky/Trilobita/blob/main/docs/report/Checkpoint</a> 2 Report.pdf)</li><li>[Checkpoint 3 report](<a href="https://github.com/TsukiSky/Trilobita/blob/main/docs/report/Checkpoint">https://github.com/TsukiSky/Trilobita/blob/main/docs/report/Checkpoint</a> 3 Report.pdf)</li><li>[Final Report](<a href="https://github.com/TsukiSky/Trilobita/blob/main/docs/report/Final">https://github.com/TsukiSky/Trilobita/blob/main/docs/report/Final</a> Report.pdf)</li></ul><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>This project is licensed under the MIT License.</p>]]></content>
      
      
      <categories>
          
          <category> Distributed System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Pregel </tag>
            
            <tag> Distributed System </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Capstone</title>
      <link href="/liangjunyi.github.io/2023/09/27/capstone/"/>
      <url>/liangjunyi.github.io/2023/09/27/capstone/</url>
      
        <content type="html"><![CDATA[<h1 id="Capstone-Info"><a href="#Capstone-Info" class="headerlink" title="Capstone Info"></a>Capstone Info</h1><ul><li>value proposition</li><li>users and their needs</li><li>market analysis</li><li>relevant patents/ip</li><li>technology analysis</li></ul><h2 id="Member"><a href="#Member" class="headerlink" title="Member"></a>Member</h2><ul><li><strong>Liang Junyi</strong>: <strong>Project Manager:</strong> Responsible for overall project coordination, progress tracking, and communication with wider WealthCX team.</li><li><strong>Lin Zhiyuan</strong>: <strong>Database Developer:</strong> In charge of designing and implementing the MySQL database and integrating third-party data sources.</li><li><strong>Liaw Yu Zheng</strong>: <strong>Numbers Station Specialist:</strong> Responsible for integrating Numbers Station and implementing natural language visualization.</li><li><strong>Liu Lingao</strong>: <strong>FlowsieAI Specialist:</strong> Tasked with integrating FlowsieAI, enhancing data transformation, customizing LLM flows, and code generation.</li><li><strong>Guo Ziniu</strong>: <strong>Output Generator:</strong> Responsible for generating CSV files, automating API calls, and working with the FlowsieAI Specialist to visualize the output effectively.</li><li><strong>Ding Hongyue</strong>: <strong>Quality Assurance Analyst:</strong> Ensures the quality and reliability of the entire DAVT application.</li></ul><h2 id="value-proposition"><a href="#value-proposition" class="headerlink" title="value proposition"></a>value proposition</h2><p><strong>1. Streamlined Financial Data Analysis:</strong></p><ul><li>DAVT simplifies the process of analyzing financial data by automating data extraction, transformation, and visualization. This streamlining saves time and effort, allowing financial professionals to focus on decision-making rather than data processing.</li></ul><p><strong>2. Enhanced Decision-Making:</strong></p><ul><li>By providing easy access to third-party financial data, DAVT empowers organizations to make more informed decisions. The integration of Natural Language Queries and Language Model (LLM) transformations helps extract valuable insights from the data, leading to better decision-making.</li></ul><p><strong>3. Comprehensive Data Pipeline:</strong></p><ul><li>DAVT integrates external services like Numbers Station and FlowsieAI to create a comprehensive data pipeline. This integration ensures that the tool can handle various data sources and apply advanced data processing techniques.</li></ul><p><strong>4. Customization and Adaptability:</strong></p><ul><li>The use of FlowsieAI allows for customization of Language Model (LLM) flows, making it adaptable to specific data analysis needs. This flexibility ensures that the tool can be tailored to different financial analysis scenarios.</li></ul><p><strong>5. Effective Data Visualization:</strong></p><ul><li>DAVT is designed to visualize data effectively, making it easier for users to understand and interpret the information. This capability is crucial for conveying insights and trends within the data.</li></ul><p><strong>6. Export and Integration:</strong></p><ul><li>DAVT facilitates the export of transformed data in CSV format, making it compatible with various internal tools and processes. This seamless integration allows organizations to leverage the insights gained from DAVT across their operations.</li></ul><p><strong>7. Time and Cost Savings:</strong></p><ul><li>By automating data analysis and visualization tasks, DAVT helps organizations save time and reduce operational costs. It eliminates the need for manual data processing and minimizes the risk of errors.</li></ul><p><strong>8. Data-Driven Media Creation:</strong></p><ul><li>DAVT’s connection to internal tools like WealthCX enables the creation of short-form media and animated HTML visualizations of data. This feature can be used for data-driven content production and storytelling.</li></ul><h2 id="users-and-their-needs"><a href="#users-and-their-needs" class="headerlink" title="users and their needs"></a>users and their needs</h2><p><strong>1. Financial Analysts and Data Scientists:</strong></p><ul><li><strong>Needs:</strong> These users require access to comprehensive financial data for analysis and modeling. They need tools that can automate data extraction, apply advanced analytics techniques, and provide data visualization to uncover insights and trends.</li></ul><p><strong>2. Business Executives and Decision-Makers:</strong></p><ul><li><strong>Needs:</strong> Executives need concise and visually appealing reports and dashboards that provide actionable insights. They rely on DAVT to help them make informed decisions based on financial data.</li></ul><p><strong>3. Data Engineers and IT Professionals:</strong></p><ul><li><strong>Needs:</strong> IT professionals and data engineers need a robust and scalable infrastructure. They require DAVT to integrate seamlessly with existing systems, ensuring data security, reliability, and performance.</li></ul><p><strong>4. Marketing and Sales Teams:</strong></p><ul><li><strong>Needs:</strong> These teams may use DAVT for market research and competitive analysis. They need user-friendly interfaces and reports to understand market trends and consumer behavior.</li></ul><p><strong>5. Content Creators and Media Specialists:</strong></p><ul><li><strong>Needs:</strong> Content creators use DAVT’s output to generate short-form media and animated visualizations. They need easily exportable and customizable data formats to create engaging content.</li></ul><h2 id="market-analysis"><a href="#market-analysis" class="headerlink" title="market analysis"></a>market analysis</h2><p><strong>1. Market Overview:</strong></p><ul><li>Describe the overall market for data analysis and visualization tools, focusing on the financial sector.</li><li>Provide information on the size, growth rate, and key trends in the market.</li><li>Highlight the increasing importance of data-driven decision-making in finance.</li></ul><p><strong>2. Target Audience:</strong></p><ul><li>Define the specific industries and user groups within the financial sector that DAVT aims to serve.</li><li>Identify the needs and pain points of these target audiences.</li></ul><p><strong>3. Competitor Analysis:</strong></p><ul><li>Identify major competitors in the market, including established players and emerging startups.</li><li>Analyze their strengths, weaknesses, market share, and product offerings.</li><li>Determine the unique selling points (USPs) of DAVT compared to competitors.</li></ul><p><strong>4. Customer Needs and Pain Points:</strong></p><ul><li>Conduct surveys, interviews, or focus groups to understand the specific needs and pain points of potential users.</li><li>Identify common challenges in data analysis, visualization, and decision-making within the financial sector.</li></ul><p><strong>5. Market Trends and Opportunities:</strong></p><ul><li>Explore emerging trends in data analytics, natural language processing, and data visualization.</li><li>Identify opportunities for DAVT to capitalize on these trends.</li></ul><p><strong>6. Regulatory and Compliance Considerations:</strong></p><ul><li>Assess the regulatory environment in the financial sector, including data privacy and security regulations.</li><li>Ensure that DAVT complies with relevant industry standards and regulations.</li></ul><p><strong>7. Pricing and Monetization Strategy:</strong></p><ul><li>Determine the pricing model for DAVT, considering factors such as user licenses, data volume, and feature tiers.</li><li>Assess the willingness of customers to pay for such a tool.</li></ul><p><strong>8. Marketing and Sales Strategy:</strong></p><ul><li>Develop a marketing strategy to reach target customers, including digital marketing, content marketing, and sales outreach.</li><li>Identify distribution channels and partnerships that can help promote DAVT.</li></ul><p><strong>9. SWOT Analysis:</strong></p><ul><li>Conduct a SWOT analysis (Strengths, Weaknesses, Opportunities, Threats) to assess DAVT’s internal and external factors.</li></ul><p><strong>10. Challenges and Risks:</strong></p><ul><li>Identify potential challenges and risks, such as technical hurdles, competition, or changing market dynamics.</li><li>Develop mitigation strategies for these challenges.</li></ul><p><strong>11. Financial Projections:</strong></p><ul><li>Create financial projections, including revenue forecasts, cost estimates, and break-even analysis.</li></ul><p><strong>12. Feedback and Iteration:</strong></p><ul><li>Continuously gather feedback from potential users and adapt the product based on their input.</li></ul><p><strong>13. Market Entry Strategy:</strong></p><ul><li>Determine the most suitable market entry strategy, whether through a phased rollout, partnerships, or other approaches.</li></ul><p><strong>14. Scalability:</strong></p><ul><li>Assess the scalability of DAVT to accommodate future growth and increased demand.</li></ul><h2 id="relevant-patents-ip"><a href="#relevant-patents-ip" class="headerlink" title="relevant patents/ip"></a>relevant patents/ip</h2><h2 id="technology-analysis"><a href="#technology-analysis" class="headerlink" title="technology analysis"></a>technology analysis</h2><h2 id="What-is-Numbers-Station"><a href="#What-is-Numbers-Station" class="headerlink" title="What is Numbers Station?"></a>What is Numbers Station?</h2><p>Numbers Station is an intelligent data stack automation platform designed to save data scientists from repetitive and time-consuming tasks such as data cleaning, duplicate data removal, normalization, and more. Currently, it supports the use of SQL language only.</p><h2 id="Key-Features-of-Numbers-Station"><a href="#Key-Features-of-Numbers-Station" class="headerlink" title="Key Features of Numbers Station:"></a>Key Features of Numbers Station:</h2><p>The product offered by Numbers Station provides three major services to expedite data cleaning, access, and utilization:</p><ul><li>Automatic Generation of SQL Language: SQL language is primarily used for database queries. With Numbers Station, users don’t need to learn SQL language. They simply input natural language commands to obtain SQL formulas for directly fetching the required data.</li><li>Automatic AI Model Creation: Through commands, Numbers Station can automatically label data, and users only need to verify and correct the labels to create an AI model.</li><li>Automatic Database Integration: Since a company’s various data sets may be scattered across different platforms, Numbers Station can directly merge data from platforms like SAP, Salesforce, Snowflake, and more.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Capstone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Capstone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO learning - 011 map</title>
      <link href="/liangjunyi.github.io/2023/09/14/go-learning-011-map/"/>
      <url>/liangjunyi.github.io/2023/09/14/go-learning-011-map/</url>
      
        <content type="html"><![CDATA[<h1 id="GO-learning-011-map"><a href="#GO-learning-011-map" class="headerlink" title="GO learning - 011 map"></a>GO learning - 011 map</h1><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"></span><br><span class="line"><span class="comment">//first declare method</span></span><br><span class="line"><span class="keyword">var</span> mymap1 <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span></span><br><span class="line"><span class="keyword">if</span> mymap1 == <span class="literal">nil</span> {</span><br><span class="line">fmt.Println(<span class="string">"mymap is an empty map"</span>)</span><br><span class="line">}</span><br><span class="line">mymap1 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, <span class="number">10</span>)</span><br><span class="line">mymap1[<span class="string">"one"</span>] = <span class="string">"java"</span></span><br><span class="line">mymap1[<span class="string">"two"</span>] = <span class="string">"c++"</span></span><br><span class="line">mymap1[<span class="string">"three"</span>] = <span class="string">"python"</span></span><br><span class="line"></span><br><span class="line">fmt.Println(mymap1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//second declare method</span></span><br><span class="line">mymap2 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>)</span><br><span class="line">mymap2[<span class="number">1</span>] = <span class="string">"java"</span></span><br><span class="line">mymap2[<span class="number">2</span>] = <span class="string">"c++"</span></span><br><span class="line">mymap2[<span class="number">3</span>] = <span class="string">"python"</span></span><br><span class="line"></span><br><span class="line">fmt.Println(mymap2)</span><br><span class="line"><span class="comment">//third declare method</span></span><br><span class="line">mymap3 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>{</span><br><span class="line"><span class="string">"one"</span>:   <span class="string">"php"</span>,</span><br><span class="line"><span class="string">"two"</span>:   <span class="string">"c++"</span>,</span><br><span class="line"><span class="string">"three"</span>: <span class="string">"python"</span>,</span><br><span class="line">}</span><br><span class="line">fmt.Println(mymap3)</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mymap is an empty <span class="keyword">map</span></span><br><span class="line"><span class="keyword">map</span>[one:java three:python two:c++]</span><br><span class="line"><span class="keyword">map</span>[<span class="number">1</span>:java <span class="number">2</span>:c++ <span class="number">3</span>:python]</span><br><span class="line"><span class="keyword">map</span>[one:php three:python two:c++]</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> GO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO learning - 010 slice op</title>
      <link href="/liangjunyi.github.io/2023/09/14/go-learning-010-slice-op/"/>
      <url>/liangjunyi.github.io/2023/09/14/go-learning-010-slice-op/</url>
      
        <content type="html"><![CDATA[<h1 id="GO-learning-010-slice-op"><a href="#GO-learning-010-slice-op" class="headerlink" title="GO learning - 010 slice op"></a>GO learning - 010 slice op</h1><p><img src="https://s2.loli.net/2023/09/14/IV1QDNY3nS2kWBL.png" alt="image-20230914162021227"></p><p><img src="https://s2.loli.net/2023/09/14/7CfuMwNXcxLZgPR.png" alt="image-20230914162239345"></p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"><span class="keyword">var</span> numbers = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"len = %d, cap = %d, slice = %v\n"</span>, <span class="built_in">len</span>(numbers), <span class="built_in">cap</span>(numbers), numbers)</span><br><span class="line"></span><br><span class="line">numbers = <span class="built_in">append</span>(numbers, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"len = %d, cap = %d, slice = %v\n"</span>, <span class="built_in">len</span>(numbers), <span class="built_in">cap</span>(numbers), numbers)</span><br><span class="line"></span><br><span class="line">numbers = <span class="built_in">append</span>(numbers, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"len = %d, cap = %d, slice = %v\n"</span>, <span class="built_in">len</span>(numbers), <span class="built_in">cap</span>(numbers), numbers)</span><br><span class="line"></span><br><span class="line">numbers = <span class="built_in">append</span>(numbers, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"len = %d, cap = %d, slice = %v\n"</span>, <span class="built_in">len</span>(numbers), <span class="built_in">cap</span>(numbers), numbers)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"---------------"</span>)</span><br><span class="line"><span class="keyword">var</span> numbers2 = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line">fmt.Printf(<span class="string">"len = %d, cap = %d, slice = %v\n"</span>, <span class="built_in">len</span>(numbers2), <span class="built_in">cap</span>(numbers2), numbers2)</span><br><span class="line">numbers2 = <span class="built_in">append</span>(numbers2, <span class="number">1</span>)</span><br><span class="line">fmt.Printf(<span class="string">"len = %d, cap = %d, slice = %v\n"</span>, <span class="built_in">len</span>(numbers2), <span class="built_in">cap</span>(numbers2), numbers2)</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span> = <span class="number">3</span>, <span class="built_in">cap</span> = <span class="number">5</span>, slice = [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"><span class="built_in">len</span> = <span class="number">4</span>, <span class="built_in">cap</span> = <span class="number">5</span>, slice = [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>]</span><br><span class="line"><span class="built_in">len</span> = <span class="number">5</span>, <span class="built_in">cap</span> = <span class="number">5</span>, slice = [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"><span class="built_in">len</span> = <span class="number">6</span>, <span class="built_in">cap</span> = <span class="number">10</span>, slice = [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">---------------</span><br><span class="line"><span class="built_in">len</span> = <span class="number">3</span>, <span class="built_in">cap</span> = <span class="number">3</span>, slice = [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"><span class="built_in">len</span> = <span class="number">4</span>, <span class="built_in">cap</span> = <span class="number">6</span>, slice = [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">s := []<span class="type">int</span>{<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>}</span><br><span class="line"></span><br><span class="line">s1 := s[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">fmt.Println(s1)</span><br><span class="line"></span><br><span class="line">s1[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">fmt.Println(s)</span><br><span class="line">fmt.Println(s1)</span><br><span class="line"></span><br><span class="line">s2 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">copy</span>(s2, s)</span><br><span class="line">fmt.Println(s2)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line">[<span class="number">100</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">[<span class="number">100</span> <span class="number">2</span>]</span><br><span class="line">[<span class="number">100</span> <span class="number">2</span> <span class="number">3</span>]</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> GO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO learning - 009 slice</title>
      <link href="/liangjunyi.github.io/2023/09/14/go-learning-009-slice/"/>
      <url>/liangjunyi.github.io/2023/09/14/go-learning-009-slice/</url>
      
        <content type="html"><![CDATA[<h1 id="GO-learning-009-slice"><a href="#GO-learning-009-slice" class="headerlink" title="GO learning - 009 slice"></a>GO learning - 009 slice</h1><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"><span class="comment">// slice1 := []int{1, 2, 3}</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> slice1 []<span class="type">int</span></span><br><span class="line">slice1 = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line">slice1[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">slice2 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line">fmt.Printf(<span class="string">"len = %d, slice = %v\n"</span>, <span class="built_in">len</span>(slice1), slice1)</span><br><span class="line">fmt.Printf(<span class="string">"len = %d, slice = %v\n"</span>, <span class="built_in">len</span>(slice2), slice2)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span> = <span class="number">3</span>, slice = [<span class="number">100</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"><span class="built_in">len</span> = <span class="number">3</span>, slice = [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> GO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO learning - 008 array</title>
      <link href="/liangjunyi.github.io/2023/09/14/go-learning-008-array/"/>
      <url>/liangjunyi.github.io/2023/09/14/go-learning-008-array/</url>
      
        <content type="html"><![CDATA[<h1 id="GO-learning-008-array"><a href="#GO-learning-008-array" class="headerlink" title="GO learning - 008 array"></a>GO learning - 008 array</h1><p>test1</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printArray</span><span class="params">(myArray [4]<span class="type">int</span>)</span></span> {</span><br><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> myArray {</span><br><span class="line">fmt.Println(<span class="string">"index = "</span>, index, <span class="string">" value = "</span>, value)</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"><span class="keyword">var</span> myArray1 [<span class="number">10</span>]<span class="type">int</span></span><br><span class="line"></span><br><span class="line">myArray2 := [<span class="number">10</span>]<span class="type">int</span>{<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>}</span><br><span class="line">myArray3 := [<span class="number">4</span>]<span class="type">int</span>{<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(myArray1); i++ {</span><br><span class="line">fmt.Println(myArray1[i])</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> myArray2 {</span><br><span class="line">fmt.Println(<span class="string">"index = "</span>, index, <span class="string">" value = "</span>, value)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"myArray1 types = %T\n"</span>, myArray1)</span><br><span class="line">fmt.Printf(<span class="string">"myArray2 types = %T\n"</span>, myArray2)</span><br><span class="line">fmt.Printf(<span class="string">"myArray3 types = %T\n"</span>, myArray3)</span><br><span class="line"></span><br><span class="line">printArray(myArray3) <span class="comment">//传1或2会报错</span></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">index =  <span class="number">0</span>  value =  <span class="number">1</span></span><br><span class="line">index =  <span class="number">1</span>  value =  <span class="number">2</span></span><br><span class="line">index =  <span class="number">2</span>  value =  <span class="number">3</span></span><br><span class="line">index =  <span class="number">3</span>  value =  <span class="number">4</span></span><br><span class="line">index =  <span class="number">4</span>  value =  <span class="number">0</span></span><br><span class="line">index =  <span class="number">5</span>  value =  <span class="number">0</span></span><br><span class="line">index =  <span class="number">6</span>  value =  <span class="number">0</span></span><br><span class="line">index =  <span class="number">7</span>  value =  <span class="number">0</span></span><br><span class="line">index =  <span class="number">8</span>  value =  <span class="number">0</span></span><br><span class="line">index =  <span class="number">9</span>  value =  <span class="number">0</span></span><br><span class="line">myArray1 types = [<span class="number">10</span>]<span class="type">int</span></span><br><span class="line">myArray2 types = [<span class="number">10</span>]<span class="type">int</span></span><br><span class="line">myArray3 types = [<span class="number">4</span>]<span class="type">int</span></span><br><span class="line">index =  <span class="number">0</span>  value =  <span class="number">11</span></span><br><span class="line">index =  <span class="number">1</span>  value =  <span class="number">22</span></span><br><span class="line">index =  <span class="number">2</span>  value =  <span class="number">33</span></span><br><span class="line">index =  <span class="number">3</span>  value =  <span class="number">44</span></span><br></pre></td></tr></tbody></table></figure><p>test2</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printArray</span><span class="params">(myArray []<span class="type">int</span>)</span></span> {</span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> myArray {</span><br><span class="line">fmt.Println(<span class="string">"value = "</span>, value)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">myArray[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"></span><br><span class="line">myArray := []<span class="type">int</span>{<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>}</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"myArray type is %T\n"</span>, myArray)</span><br><span class="line"></span><br><span class="line">printArray(myArray)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"==="</span>)</span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> myArray {</span><br><span class="line">fmt.Println(value)</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">myArray <span class="keyword">type</span> is []<span class="type">int</span></span><br><span class="line">value =  <span class="number">1</span></span><br><span class="line">value =  <span class="number">2</span></span><br><span class="line">value =  <span class="number">3</span></span><br><span class="line">value =  <span class="number">4</span></span><br><span class="line">===</span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> GO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO learning - 007 defer</title>
      <link href="/liangjunyi.github.io/2023/09/14/go-learning-007-defer/"/>
      <url>/liangjunyi.github.io/2023/09/14/go-learning-007-defer/</url>
      
        <content type="html"><![CDATA[<h1 id="GO-learning-007-defer"><a href="#GO-learning-007-defer" class="headerlink" title="GO learning - 007 defer"></a>GO learning - 007 defer</h1><p>先defer的先放到stack里</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func1</span><span class="params">()</span></span> {</span><br><span class="line">fmt.Println(<span class="string">"A"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func2</span><span class="params">()</span></span> {</span><br><span class="line">fmt.Println(<span class="string">"B"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func3</span><span class="params">()</span></span> {</span><br><span class="line">fmt.Println(<span class="string">"C"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"><span class="keyword">defer</span> func1()</span><br><span class="line"><span class="keyword">defer</span> func2()</span><br><span class="line"><span class="keyword">defer</span> func3()</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C</span><br><span class="line">B</span><br><span class="line">A</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> GO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO learning - 006 Pointer</title>
      <link href="/liangjunyi.github.io/2023/09/14/go-learning-006-import-anonymous-and-rename/"/>
      <url>/liangjunyi.github.io/2023/09/14/go-learning-006-import-anonymous-and-rename/</url>
      
        <content type="html"><![CDATA[<h1 id="GO-learning-006-Pointer"><a href="#GO-learning-006-Pointer" class="headerlink" title="GO learning - 006 Pointer"></a>GO learning - 006 Pointer</h1><p><img src="https://s2.loli.net/2023/09/14/DRGCNZ6JjrS12Ty.png" alt="image-20230914143914977"></p><p><img src="https://s2.loli.net/2023/09/14/3jFlksOIueah4y9.png" alt="image-20230914144207753"></p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> {</span><br><span class="line"><span class="keyword">var</span> temp <span class="type">int</span></span><br><span class="line">temp = a</span><br><span class="line">a = b</span><br><span class="line">b = temp</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">int</span> = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">swap(a, b)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"a = "</span>, a, <span class="string">" b = "</span>, b)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a =  <span class="number">10</span>  b =  <span class="number">20</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// func swap(a int, b int) {</span></span><br><span class="line"><span class="comment">// var temp int</span></span><br><span class="line"><span class="comment">// temp = a</span></span><br><span class="line"><span class="comment">// a = b</span></span><br><span class="line"><span class="comment">// b = temp</span></span><br><span class="line"><span class="comment">// }</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(pa *<span class="type">int</span>, pb *<span class="type">int</span>)</span></span> {</span><br><span class="line"><span class="keyword">var</span> temp <span class="type">int</span></span><br><span class="line">temp = *pa</span><br><span class="line">*pa = *pb</span><br><span class="line">*pb = temp</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">int</span> = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">swap(&amp;a, &amp;b)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"a = "</span>, a, <span class="string">" b = "</span>, b)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a =  <span class="number">20</span>  b =  <span class="number">10</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> GO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO learning - 005 Import anonymous and rename</title>
      <link href="/liangjunyi.github.io/2023/09/13/go-learning-005-import-anonymous-and-rename/"/>
      <url>/liangjunyi.github.io/2023/09/13/go-learning-005-import-anonymous-and-rename/</url>
      
        <content type="html"><![CDATA[<h1 id="GO-learning-005-Import-anonymous-and-rename"><a href="#GO-learning-005-Import-anonymous-and-rename" class="headerlink" title="GO learning - 005 Import anonymous and rename"></a>GO learning - 005 Import anonymous and rename</h1><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"mymodule/src/GolangStudy/5-init/lib1"</span></span><br><span class="line"><span class="string">"mymodule/src/GolangStudy/5-init/lib2"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">lib1.Lib1Test()</span><br><span class="line"><span class="comment">//lib2.Lib2Test()</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lib1 function</span><br><span class="line">Lib1Tese</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"mymodule/src/GolangStudy/5-init/lib1"</span></span><br><span class="line">_ <span class="string">"mymodule/src/GolangStudy/5-init/lib2"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">lib1.Lib1Test()</span><br><span class="line"><span class="comment">//lib2.Lib2Test()</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lib1 function</span><br><span class="line">lib2 function</span><br><span class="line">Lib1Tese</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">x <span class="string">"mymodule/src/GolangStudy/5-init/lib1"</span></span><br><span class="line">_ <span class="string">"mymodule/src/GolangStudy/5-init/lib2"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">x.Lib1Test()</span><br><span class="line"><span class="comment">//lib2.Lib2Test()</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lib1 function</span><br><span class="line">lib2 function</span><br><span class="line">Lib1Tese</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> GO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO learning - 004 Import and Init</title>
      <link href="/liangjunyi.github.io/2023/09/12/go-learning-004-import-and-init/"/>
      <url>/liangjunyi.github.io/2023/09/12/go-learning-004-import-and-init/</url>
      
        <content type="html"><![CDATA[<h1 id="GO-learning-004-Import-and-Init"><a href="#GO-learning-004-Import-and-Init" class="headerlink" title="GO learning - 004 Import and Init"></a>GO learning - 004 Import and Init</h1><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>-init$ tree</span><br><span class="line">.</span><br><span class="line">├── lib1</span><br><span class="line">│   └── lib1.<span class="keyword">go</span></span><br><span class="line">├── lib2</span><br><span class="line">│   └── lib2.<span class="keyword">go</span></span><br><span class="line">└── main.<span class="keyword">go</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> directories, <span class="number">3</span> files</span><br></pre></td></tr></tbody></table></figure><p>lib1</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lib1</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Lib1Test</span><span class="params">()</span></span> {</span><br><span class="line">fmt.Println(<span class="string">"Lib1Tese"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> {</span><br><span class="line">fmt.Println(<span class="string">"lib1 function"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>lib2</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lib2</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Lib2Test</span><span class="params">()</span></span> {</span><br><span class="line">fmt.Println(<span class="string">"Lib2Tese"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> {</span><br><span class="line">fmt.Println(<span class="string">"lib2 function"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>main</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"mymodule/src/GolangStudy/5-init/lib1"</span></span><br><span class="line"><span class="string">"mymodule/src/GolangStudy/5-init/lib2"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">lib1.Lib1Test()</span><br><span class="line">lib2.Lib2Test()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lib1 function</span><br><span class="line">lib2 function</span><br><span class="line">Lib1Tese</span><br><span class="line">Lib2Tese</span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2023/09/14/oYHLkzjF9WuO6Zd.png" alt="image-20230914142344859"></p>]]></content>
      
      
      <categories>
          
          <category> GO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO learning - 003 Function</title>
      <link href="/liangjunyi.github.io/2023/09/11/go-learning-003-function/"/>
      <url>/liangjunyi.github.io/2023/09/11/go-learning-003-function/</url>
      
        <content type="html"><![CDATA[<h1 id="GO-learning-003-Function"><a href="#GO-learning-003-Function" class="headerlink" title="GO learning - 003 Function"></a>GO learning - 003 Function</h1><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fool</span><span class="params">(a <span class="type">string</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line">fmt.Println(a)</span><br><span class="line">fmt.Println(b)</span><br><span class="line"></span><br><span class="line">c := <span class="number">100</span></span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">x := fool(<span class="string">"abc"</span>, <span class="number">5</span>)</span><br><span class="line">fmt.Println(x)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abc</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> GO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO learning - 002 Const Iota</title>
      <link href="/liangjunyi.github.io/2023/09/10/go-learning-002-variable/"/>
      <url>/liangjunyi.github.io/2023/09/10/go-learning-002-variable/</url>
      
        <content type="html"><![CDATA[<h1 id="GO-learning-002-Const-Iota"><a href="#GO-learning-002-Const-Iota" class="headerlink" title="GO learning - 002 Const Iota"></a>GO learning - 002 Const Iota</h1><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const 来定义枚举类型</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">BEIJING = <span class="number">10</span> * <span class="literal">iota</span></span><br><span class="line">SHANGHAI</span><br><span class="line">SHENZHEN</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"><span class="comment">//常量（只读属性）</span></span><br><span class="line"><span class="keyword">const</span> length <span class="type">int</span> = <span class="number">10</span></span><br><span class="line">fmt.Println(length)</span><br><span class="line"></span><br><span class="line">fmt.Println(BEIJING)</span><br><span class="line">fmt.Println(SHANGHAI)</span><br><span class="line">fmt.Println(SHENZHEN)</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> GO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO learning - 001 Variable</title>
      <link href="/liangjunyi.github.io/2023/09/09/go-learning-001-variable/"/>
      <url>/liangjunyi.github.io/2023/09/09/go-learning-001-variable/</url>
      
        <content type="html"><![CDATA[<h1 id="GO-learning-001-Variable"><a href="#GO-learning-001-Variable" class="headerlink" title="GO learning - 001 Variable"></a>GO learning - 001 Variable</h1><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">四种变量的声明方式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"><span class="comment">//方法一：声明一个变量</span></span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span></span><br><span class="line">fmt.Println(<span class="string">"a = "</span>, a)</span><br><span class="line">fmt.Printf(<span class="string">"type of a = %T\n"</span>, a)</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：声明一个变量，初始化一个值</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">int</span> = <span class="number">100</span></span><br><span class="line">fmt.Println(<span class="string">"b = "</span>, b)</span><br><span class="line">fmt.Printf(<span class="string">"type of b = %T\n"</span>, b)</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法三：初始化的时候，省去数据类型，通过值自动匹配类型</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">100</span></span><br><span class="line">fmt.Println(<span class="string">"c = "</span>, c)</span><br><span class="line">fmt.Printf(<span class="string">"type of c = %T\n"</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法四:(常用的方法)省去var关键字，直接自动匹配</span></span><br><span class="line">e := <span class="number">100</span></span><br><span class="line">fmt.Println(<span class="string">"e ="</span>, e)</span><br><span class="line">fmt.Printf(<span class="string">"type of e = %T\n"</span>, e)</span><br><span class="line"></span><br><span class="line">f, g := <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">fmt.Println(<span class="string">"f = "</span>, f, <span class="string">" g = "</span>, g)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a =  <span class="number">0</span></span><br><span class="line"><span class="keyword">type</span> of a = <span class="type">int</span></span><br><span class="line">b =  <span class="number">100</span></span><br><span class="line"><span class="keyword">type</span> of b = <span class="type">int</span></span><br><span class="line">c =  <span class="number">100</span></span><br><span class="line"><span class="keyword">type</span> of c = <span class="type">int</span></span><br><span class="line">e = <span class="number">100</span></span><br><span class="line"><span class="keyword">type</span> of e = <span class="type">int</span></span><br><span class="line">f =  <span class="number">2</span>  g =  <span class="number">3</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> GO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-注解和反射</title>
      <link href="/liangjunyi.github.io/2023/06/30/java-zhu-jie-he-fan-she/"/>
      <url>/liangjunyi.github.io/2023/06/30/java-zhu-jie-he-fan-she/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-注解和反射"><a href="#Java-注解和反射" class="headerlink" title="Java-注解和反射"></a>Java-注解和反射</h1><h2 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> <span class="keyword">extends</span> <span class="title class_">Object</span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Override 重写的注解</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.toString();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Deprecated</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"Deprecated"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings("all")</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>{</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        test();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><ul><li>Java里有四个元注解，重点放在Target和Retention上</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> annotations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试元注解</span></span><br><span class="line"><span class="meta">@MyAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> {</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@MyAnnotation</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>{</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个注解</span></span><br><span class="line"><span class="comment">//Target 表示我们的注解可以用在什么地方</span></span><br><span class="line"><span class="comment">//ElementType.METHOD 代表可以用在方法上，ElementType.TYPE代表可以用在Class，interface上</span></span><br><span class="line"><span class="meta">@Target(value= {ElementType.METHOD,ElementType.TYPE})</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Retention 表示我们的注解在什么地方还有效</span></span><br><span class="line"><span class="comment">//runtime&gt;class&gt;source, 代表如果只定义了class那么在source也有效，在runtime无效</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Document 表示是否将我们的注解生成在JAVAdoc中</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Inherited 子类可以继承父类的注解</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation{</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> annotations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03</span> {</span><br><span class="line">    <span class="meta">@MyAnnotation2(name = "门酱",schools = {"河北工业大学"})</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>{</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//如果没有默认值，则必须给注解赋值</span></span><br><span class="line">    <span class="meta">@MyAnnotation2(schools = {"河北工业大学"})</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotation3("门酱")</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target({ElementType.TYPE,ElementType.METHOD})</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation2{</span><br><span class="line">    <span class="comment">//这是注解的参数</span></span><br><span class="line">    <span class="comment">//参数类型+参数名()</span></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">""</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">age</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">id</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>; <span class="comment">//如果默认值为-1，代表不存在，indexof，如果找不到就返回-1</span></span><br><span class="line">    String[] schools();</span><br><span class="line">}</span><br><span class="line"><span class="meta">@Target({ElementType.TYPE,ElementType.METHOD})</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation3{</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><p>Java不是动态语言（动态语言即可以在运行时代码根据某些条件改变自身结构），但因为反射机制，可以称之为准动态语言。这使得Java编程时更加灵活，但是风险也提升。</p><h2 id="获得反射对象"><a href="#获得反射对象" class="headerlink" title="获得反射对象"></a>获得反射对象</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="comment">//什么叫反射</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException {</span><br><span class="line">        <span class="comment">//通过反射获取类的class对象</span></span><br><span class="line">        Class&lt;?&gt; c1 = Class.forName(<span class="string">"reflection.User"</span>);</span><br><span class="line">        System.out.println(c1);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; c2 = Class.forName(<span class="string">"reflection.User"</span>);</span><br><span class="line">        Class&lt;?&gt; c3 = Class.forName(<span class="string">"reflection.User"</span>);</span><br><span class="line">        Class&lt;?&gt; c4 = Class.forName(<span class="string">"reflection.User"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一个类在内存中只有一个class对象</span></span><br><span class="line">        <span class="comment">//一个类被加载后，类的整个结构都会被封装在class对象中。</span></span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line">        System.out.println(c4.hashCode());</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//实体类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> {</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> {</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> {</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">reflection</span>.User</span><br><span class="line"><span class="number">1915910607</span></span><br><span class="line"><span class="number">1915910607</span></span><br><span class="line"><span class="number">1915910607</span></span><br></pre></td></tr></tbody></table></figure><h2 id="得到Class类的几种方式"><a href="#得到Class类的几种方式" class="headerlink" title="得到Class类的几种方式"></a>得到Class类的几种方式</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException {</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(<span class="string">"这个人是:"</span>+person.name);</span><br><span class="line">        <span class="comment">//方式一：通过对象获得</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> person.getClass();</span><br><span class="line">        System.out.println(c1.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：forname获得</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Class.forName(<span class="string">"reflection.Student"</span>);</span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式三：通过类名.class获得</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Student.class;</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式四：基本内置类型的包装类都有一个Type属性</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> Integer.TYPE;</span><br><span class="line">        System.out.println(c4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得父类类型</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c5</span> <span class="operator">=</span> c1.getSuperclass();</span><br><span class="line">        System.out.println(c5);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>{</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> {</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>{</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">"学生"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">()</span>{</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">"老师"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这个人是:学生</span><br><span class="line"><span class="number">284720968</span></span><br><span class="line"><span class="number">284720968</span></span><br><span class="line"><span class="number">284720968</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">reflection</span>.Person</span><br></pre></td></tr></tbody></table></figure><h2 id="所有类型的Class对象"><a href="#所有类型的Class对象" class="headerlink" title="所有类型的Class对象"></a>所有类型的Class对象</h2><ul><li>class：外部类，成员（成员内部类，静态内部类），局部内部类，匿名内部类</li><li>interface：接口</li><li>[]：数组</li><li>enum：枚举</li><li>annotation：注解@interface</li><li>primitive type：基本数据类型</li><li>void</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.text.Element;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有类型的Class对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test04</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Object.class; <span class="comment">//类</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Comparable.class; <span class="comment">//接口</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> String[].class; <span class="comment">//一维数组</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="type">int</span>[][].class; <span class="comment">//二维数组</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c5</span> <span class="operator">=</span> Override.class; <span class="comment">//注解</span></span><br><span class="line">        Class c6= ElementType.class; <span class="comment">//枚举</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c7</span> <span class="operator">=</span> Integer.class; <span class="comment">//基本数据类型</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c8</span> <span class="operator">=</span> <span class="keyword">void</span>.class; <span class="comment">//void</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c9</span> <span class="operator">=</span> Class.class; <span class="comment">//class</span></span><br><span class="line"></span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        System.out.println(c3);</span><br><span class="line">        System.out.println(c4);</span><br><span class="line">        System.out.println(c5);</span><br><span class="line">        System.out.println(c6);</span><br><span class="line">        System.out.println(c7);</span><br><span class="line">        System.out.println(c8);</span><br><span class="line">        System.out.println(c9);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//只要元素类型与维度一样，就是同一个class</span></span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];</span><br><span class="line">        System.out.println(a.getClass().hashCode());</span><br><span class="line">        System.out.println(b.getClass().hashCode());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">java</span>.lang.Object</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">java</span>.lang.Comparable</span><br><span class="line">class [Ljava.lang.String;</span><br><span class="line">class [[I</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">java</span>.lang.Override</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">java</span>.lang.annotation.ElementType</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">java</span>.lang.Integer</span><br><span class="line"><span class="keyword">void</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">java</span>.lang.Class</span><br></pre></td></tr></tbody></table></figure><h2 id="类加载内存分析"><a href="#类加载内存分析" class="headerlink" title="类加载内存分析"></a>类加载内存分析</h2><p><img src="https://s2.loli.net/2023/09/10/H5XMlspOcJQmBt1.png" alt="image-20230630211743387"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test05</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        System.out.println(A.m);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>{</span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        System.out.println(<span class="string">"A类静态代码块初始化"</span>);</span><br><span class="line">        m=<span class="number">300</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span><span class="number">100</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"A类的无参构造初始化"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A类静态代码块初始化</span><br><span class="line">A类的无参构造初始化</span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意修改static int m =100; 放到static代码块前面，m最终是300</p></blockquote><h2 id="分析类初始化"><a href="#分析类初始化" class="headerlink" title="分析类初始化"></a>分析类初始化</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test06</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        System.out.println(<span class="string">"Main类被加载"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException {</span><br><span class="line">        <span class="comment">//1.主动引用</span></span><br><span class="line"><span class="comment">//        Son son = new Son();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射也会产生主动引用</span></span><br><span class="line"><span class="comment">//        Class.forName("reflection.Son");</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//不会产生类的引用的方法</span></span><br><span class="line"><span class="comment">//        System.out.println(Son.b);</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Main类被加载</span></span><br><span class="line"><span class="comment">         * 父类被加载</span></span><br><span class="line"><span class="comment">         * 2</span></span><br><span class="line"><span class="comment">         * **/</span></span><br><span class="line"><span class="comment">//        Son[] array = new Son[5];</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Main类被加载</span></span><br><span class="line"><span class="comment">         * **/</span></span><br><span class="line"></span><br><span class="line">        System.out.println(Son.M);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Main类被加载</span></span><br><span class="line"><span class="comment">         * 1</span></span><br><span class="line"><span class="comment">         * **/</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>{</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        System.out.println(<span class="string">"父类被加载"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>{</span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        System.out.println(<span class="string">"子类被加载"</span>);</span><br><span class="line">        m = <span class="number">300</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> M=<span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora 配置上传图片</title>
      <link href="/liangjunyi.github.io/2023/06/30/typora-pei-zhi-shang-chuan-tu-pian/"/>
      <url>/liangjunyi.github.io/2023/06/30/typora-pei-zhi-shang-chuan-tu-pian/</url>
      
        <content type="html"><![CDATA[<h3 id="配置Token"><a href="#配置Token" class="headerlink" title="配置Token"></a>配置Token</h3><p>选择 sm.ms 作为图床,官网地址：<a href="https://sm.ms/">https://sm.ms</a></p><p>特点：永久存储免注册，图片链接支持https，可以删除上传的图片，提供多种图片链接格式，建立于2015年，目前免费用户无法使用香港节点因此速度比较慢</p><p>图片上传限制：每个图片最大5M，每次最多上传10张</p><ol><li><p>注册或登陆 sm.ms</p><p><a href="https://sm.ms/login">https://sm.ms/login</a></p></li><li><p>生成 token</p><p><a href="https://sm.ms/home/apitoken">https://sm.ms/home/apitoken</a></p></li><li><p>配置 token</p></li></ol><p>在 Typora 配置中，图像 -&gt; 打开配置文件，将下面代码 copy 进去，然后 token 改成自己的就可以了。</p><p>注意修改后重启软件：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"picBed"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"uploader"</span><span class="punctuation">:</span> <span class="string">"smms"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"smms"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"token"</span><span class="punctuation">:</span> <span class="string">"xxxxxxxxxxxxxxxxxxxxx"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"picgoPlugins"</span><span class="punctuation">:</span> <span class="punctuation">{</span><span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h2 id="账号"><a href="#账号" class="headerlink" title="账号"></a>账号</h2><p>账号：1004891</p><p>密码：Wy</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A File Sharing Linux Application</title>
      <link href="/liangjunyi.github.io/2023/04/18/project-a-file-sharing-linux-application/"/>
      <url>/liangjunyi.github.io/2023/04/18/project-a-file-sharing-linux-application/</url>
      
        <content type="html"><![CDATA[<h1 id="A-File-Sharing-Linux-Application"><a href="#A-File-Sharing-Linux-Application" class="headerlink" title="A File Sharing Linux Application"></a>A File Sharing Linux Application</h1><p>1004891 Liang Junyi </p><p>1004890 Guo Ziniu </p><p>1005604 Zhang Chunjie </p><p>1004887 Liu Lingao </p><p>1005446 Shaun Hin </p><p>1005327 Yu Qin </p><h2 id="Intro-problem-statement"><a href="#Intro-problem-statement" class="headerlink" title="Intro &amp; problem statement"></a><strong>Intro &amp; problem statement</strong></h2><p>Based on our daily life experience and research, most existing file transfer apps do not support direct transfer data through the clipboard, which makes it difficult for users to transfer data conveniently and efficiently. Also, most existing FTP protocol-based apps lack a file recovery function, an unexpected network connection interruption can disrupt the entire downloading process and cause failure of download. </p><p>Hence we decided to design our file sharing system, with clipboard direct-transfer and file recovery features. With these enhancements, users of our app will be able to transfer data more efficiently, and without worrying about potential loss of progress of downloading bulk files due to an unstable network environment. </p><h2 id="Related-work"><a href="#Related-work" class="headerlink" title="Related work"></a><strong>Related work</strong></h2><ul><li><p>Project scaffolding: electron-vite <a href="https://evite.netlify.app/">https://evite.netlify.app/</a></p></li><li><p>FTP:</p></li><li><ul><li>basic-ftp <a href="https://www.npmjs.com/package/basic-ftp">https://www.npmjs.com/package/basic-ftp</a></li><li>Ftp-srv <a href="https://www.npmjs.com/package/ftp-srv">https://www.npmjs.com/package/ftp-srv</a></li></ul></li><li><p>SFTP:</p></li><li><ul><li>ssh2-sftp-client <a href="https://www.npmjs.com/package/ssh2-sftp-client">https://www.npmjs.com/package/ssh2-sftp-client</a></li><li>node-ftp-server <a href="https://www.npmjs.com/package/node-sftp-server">https://www.npmjs.com/package/node-sftp-server</a></li></ul></li><li><p>Other:</p></li><li><ul><li>Clipboardy <a href="https://www.npmjs.com/package/clipboardy">https://www.npmjs.com/package/clipboardy</a></li></ul></li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Approach-methodology"><a href="#Approach-methodology" class="headerlink" title="Approach / methodology"></a><strong>Approach / methodology</strong></h2><h3 id="Clipboard-protocol-switch"><a href="#Clipboard-protocol-switch" class="headerlink" title="Clipboard &amp; protocol switch"></a><strong>Clipboard &amp; protocol switch</strong></h3><ul><li>Direct Transfer from Clipboard</li></ul><p>Firstly, a listener is created when the application is running. The listener will periodically examine the clipboard every second. If any content is received on clipboard, an UDP socket will be created to transfer the content to the device with the IP address that it is connected with. Every device running the application should have a listener examined on the clipboard.</p><p><img src="https://s2.loli.net/2023/09/10/VUJSg57nWjkvCep.png" alt="img"></p><ul><li>Protocol Switch</li></ul><p>When the application starts, FTP and SFTP server will be run together. At the same time, a global variable will be created to store the current protocol state, using FTP by default. Once the client clicks on the protocol switch, the current protocol state will be updated. Hence, every time a client tries to get a file, it will check the current protocol state, based on that, corresponding downloading channel will be selected. </p><h3 id="Recovery"><a href="#Recovery" class="headerlink" title="Recovery"></a><strong>Recovery</strong></h3><h4 id="Details"><a href="#Details" class="headerlink" title="Details :"></a><strong>Details :</strong></h4><p><strong><img src="https://s2.loli.net/2023/09/10/9KNaBbYeMVmQWl2.jpg" alt="img"></strong></p><ul><li><p>Before network outage</p></li><li><ol><li>Client : create a TCP and FTP connection with server</li><li>Server : return file list to client</li><li>Client : send download request to server by TCP</li><li>Server : read file into byte array</li><li>Server : slice the file into smaller parts</li><li>Server : inform client about file slices by TCP (header information)</li><li>Client : based on header information generate a log file to track the file slices</li><li>Client : send file slices download request to server by FTP</li><li>Server : return file slices based on client request</li><li>Client : received file slices, update the log file</li></ol></li><li><p>After network outage</p></li><li><ol><li>Client : want to send download request for the large file again</li><li>Client : check log file first, check integrity</li><li>Client : send not finished file slices download request to server by FTP</li><li>Server : return file slices based on client request</li><li>Client : received file slices, update the log file</li><li>Client : received all file slices, delete the log file, merge the file slices together into original large file</li></ol></li></ul><h4 id="Brief-summary-about-Recovery-mechanism"><a href="#Brief-summary-about-Recovery-mechanism" class="headerlink" title="Brief summary about Recovery mechanism :"></a><strong>Brief summary about Recovery mechanism :</strong></h4><p>Client requests the large file, server splits the file into many file slices, client uses FTP to get each file slice instead of the large file itself.</p><h4 id="Example-header-info"><a href="#Example-header-info" class="headerlink" title="Example header info :"></a><strong>Example header info :</strong></h4><p><strong><img src="https://s2.loli.net/2023/09/10/G6Ra2ehImis9xTF.png" alt="img"></strong></p><h4 id="Example-log-file"><a href="#Example-log-file" class="headerlink" title="Example log file :"></a><strong>Example log file :</strong></h4><p><strong><img src="https://s2.loli.net/2023/09/10/Cdrt1cf6pHVoi2I.png" alt="img"></strong></p><h4 id="Q-A"><a href="#Q-A" class="headerlink" title="Q &amp; A"></a><strong>Q &amp; A</strong></h4><ol><li><p>Why do we choose TCP to send header info, but using FTP to send files since FTP is built on TCP, why not choose UDP since it is faster without hand shake?</p></li><li><ul><li>Answer :</li><li>TCP is a protocol that provides reliable, ordered, and error-checked delivery of data between applications running on hosts communicating over an IP network. It establishes a connection between two endpoints, handles data segmentation, and manages flow control and congestion control. TCP ensures that data is delivered to the destination without loss or duplication.<br>FTP, on the other hand, is a protocol designed specifically for transferring files between hosts over a network. It runs on top of TCP and uses its reliable data delivery capabilities. FTP provides features like file upload and download, directory listing, and file management. It also includes security mechanisms like authentication and encryption to protect data during transmission.<br>So, the reason why we use FTP to send files instead of TCP is that FTP is built on top of TCP and adds additional functionality to it. FTP provides a user-friendly interface for transferring files, manages data transfer and communication with the remote host, and handles file management tasks that TCP doesn’t provide.<br>The reason why we use TCP to send header information instead of FTP is that header information is not so much so we do not need to write it into a file and transfer by FTP. Because the information in header information is important that we do not want it to miss any parts so we need to rely on TCP’s reliable, ordered data transfer. So we did not choose UDP.</li></ul></li></ol><h2 id="Code-base-if-any"><a href="#Code-base-if-any" class="headerlink" title="Code base (if any)"></a><strong>Code base (if any)</strong></h2><h3 id="Ftp"><a href="#Ftp" class="headerlink" title="Ftp"></a><strong>Ftp</strong></h3><p>Our FTP transfer is based on node.js packages ftp-srv and basic-ftp. The server part is relatively simple, we wrap it up in a separate class and start it on a child process when starting the main application. For the client side code, we also encapsulated the library in our own class, such that we can invoke the api more easily, and it’s more convenient to integrate the recovery function, etc. Within the class, we implemented getFile() to download a file from ftp server, getFileList() to get the file information of the designated directory, and putFIle() to upload a file from client to server. </p><p>Those file transfer api are exposed from Electron’s main process to renderer process via the preload script. When a user enters a destination IP, clicks on a folder or on a file, the corresponding event handlers will be triggered, and invoke those functionalities provided in the main process, and do the file transfer operations. And, when a download task finishes, an event will be triggered and the downloaded files list will be refreshed.</p><h3 id="Sftp"><a href="#Sftp" class="headerlink" title="Sftp"></a><strong>Sftp</strong></h3><p>For our Secure File Transfer Protocol (SFTP) code base, we used a node.js repository ssh2-sftp-client for our client script functions, and node-sftp-server for our server script functions. Through our reading, we implemented and tested the sending of files over the local area network directly from one machine to another machine by private IP address. </p><p>Since the protocol runs over a Secure Shell (SSH) session, we deemed that this was secure for our purposes and as the protocol listens on the default port 22 which does not clash with the port 21 used by FTP, we believe SFTP is a suitable alternative to the FTP protocol that is the default mode of transfer. </p><p>Our implementation of the code is called through setting the UI radio button for secure transfer, however we were unable to test the speed of transferring over FTP compared to SFTP due to time constraints.</p><h2 id="Evaluation-experiment-results"><a href="#Evaluation-experiment-results" class="headerlink" title="Evaluation / experiment results"></a><strong>Evaluation / experiment results</strong></h2><h4 id="Assume"><a href="#Assume" class="headerlink" title="Assume"></a><strong>Assume</strong></h4><p>Client requests a file, and this file is splitted by server into 5 parts.</p><p>The horizontal axis shows the file received by the client when a network outage happens.</p><p>The vertical axis shows the time to re-download this file.</p><p><img src="https://s2.loli.net/2023/09/10/D7A4X95PvtFuV1C.png" alt="Chart"></p><ol><li><p>The blue line is Without recovery, so no matter how much it downloads before network outage. Client will not check how much content has already been received but request the original file again.</p></li><li><p>The red line is Expected time for recovery, it means when client receives some files for example 2 out of 5, then when client re-download, it only needs re-download for the remaining 3 parts, so time is reduced to 3/5 .</p></li><li><p>The yellow line is Our recovery time, it is different compared to the red line because sending more requests needs more time then just one request. Also Server split files and Client update log file, merge file slices both need some time, just not so much.</p></li><li><ul><li>At first slower then red line</li><li>Gradually approx the red line (because we focus on the re-download time, less requests, less time)</li></ul></li></ol><h2 id="Conclusion-future-work"><a href="#Conclusion-future-work" class="headerlink" title="Conclusion / future work"></a><strong>Conclusion / future work</strong></h2><p>We implemented, and debugged the FTP and SFTP protocols for file transfer over local area network (LAN), direct transfer of clipboard over UDP, and a recovery mechanism for resuming the download of large files instead of restarting the download, then compiled the mechanisms into an Electron user interface to package our file transfer application Quick Share. Since our final application could reliably transfer files from one machine to another over LAN, we conclude that our application matches our expectations of making file transfer over LAN convenient and without central servers to facilitate the transfer. </p><p>Although we could not implement fixes for edge cases, further improvements can be made by using the hash of files to indicate if the sliced file parts have been transferred so as to mitigate file changes on the server after a network loss event. The cache of files on both the client and server can be cleared in the event of a cancelled download during the network loss event as well, so as to reduce the impact on storage that our application requires.</p><p><strong>Github Repository:</strong> <a href="https://github.com/LiangJunyi-010/NetworkProject">https://github.com/LiangJunyi-010/NetworkProject</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Network</title>
      <link href="/liangjunyi.github.io/2023/03/28/network/"/>
      <url>/liangjunyi.github.io/2023/03/28/network/</url>
      
        <content type="html"><![CDATA[<h1 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h1>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建虚拟环境</title>
      <link href="/liangjunyi.github.io/2023/02/01/python-create-virtual-env/"/>
      <url>/liangjunyi.github.io/2023/02/01/python-create-virtual-env/</url>
      
        <content type="html"><![CDATA[<h1 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h1><p>首先，根据使用的 python 版本，下载 venv 包</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install python3-venv</span><br></pre></td></tr></tbody></table></figure><p>创建虚拟环境</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m venv my-project-env</span><br></pre></td></tr></tbody></table></figure><p>在这个虚拟环境的目录下，有一个bin目录，下面有activate脚本</p><p>使用source命令来运行这个脚本，激活虚拟环境</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source my-project-env/<span class="built_in">bin</span>/activate</span><br></pre></td></tr></tbody></table></figure><p>激活虚拟环境后，使用pip安装我们需要的包</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></tbody></table></figure><p>检验包是否安装完成</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">"import requests"</span></span><br></pre></td></tr></tbody></table></figure><p>使用你喜欢的<a href="https://www.myfreax.com/how-to-install-visual-studio-code-on-ubuntu-20-04/">文本编辑器</a>，在本教程中，我们将使用vscode创建文件<code>testing.py</code>：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code testing.py</span><br></pre></td></tr></tbody></table></figure><p>将以下内容粘贴到文件中：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">'http://httpbin.org/get'</span>)  </span><br><span class="line"><span class="built_in">print</span>(r.headers)  </span><br></pre></td></tr></tbody></table></figure><p>关闭并保存文件。现在可以运行命令<code>python testing.py</code>运行脚本。脚本将打印所有标题条目的字典。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python testing.py</span><br></pre></td></tr></tbody></table></figure><p>完成工作后停用虚拟环境，只需键入<code>deactivate</code>，您将返回到常规shell。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Environment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习AWS</title>
      <link href="/liangjunyi.github.io/2023/01/27/database-learning-aws/"/>
      <url>/liangjunyi.github.io/2023/01/27/database-learning-aws/</url>
      
        <content type="html"><![CDATA[<h1 id="学习AWS"><a href="#学习AWS" class="headerlink" title="学习AWS"></a>学习AWS</h1><h2 id="1-开始"><a href="#1-开始" class="headerlink" title="1.开始"></a>1.开始</h2><p>选择Modules，进入Leaner Lab</p><p><img src="https://s2.loli.net/2023/01/27/i7ODCwxNAjXmzrl.png" alt="image-20230127161002154"></p><p>进入的这个界面只是console,不是我们的cloud instance</p><p><img src="https://s2.loli.net/2023/01/27/Glcjn351bDfMWOJ.png" alt="image-20230127161149333"></p><p>点击start lab按钮，等待一段时间</p><p><img src="https://s2.loli.net/2023/01/27/IATSnij6seX3cGt.png" alt="image-20230127161231387"></p><p>当lab启动完毕后，我们看到AWS变绿，点击进入AWS management console</p><p><img src="https://s2.loli.net/2023/01/27/LVJOR6vqlZTBYwW.png" alt="image-20230127161303781"></p><p>进入之后查看自己右上角ID是否正确</p><p><img src="https://s2.loli.net/2023/01/27/M4jO6SGnpQmIoL9.png" alt="image-20230127161411052"></p><p>进入service，对于这节课，我们选择EC2（如果Recently Visit下面没有这个选项，去All services下面寻找）</p><p><img src="https://s2.loli.net/2023/01/27/ogxKAsTh8zGm7tV.png" alt="image-20230127161452023"></p><blockquote><p>EC2允许我们在cloud上run一个particular server</p></blockquote><p>第一步，我们想跑一个instance</p><p><img src="https://s2.loli.net/2023/01/27/kyucCHsVFYRMdN6.png" alt="image-20230127162055981"></p><p>进入这个界面后，选择ubuntu作为server</p><p><img src="https://s2.loli.net/2023/01/27/eI4Q7oiwTtgc8Ff.png" alt="image-20230127162157856"></p><p>然后给机器起个名字</p><p><img src="https://s2.loli.net/2023/01/27/Wp9osOjmvkwDxTe.png" alt="image-20230127165414048"></p><p>随后创建一个新的key pair</p><p><img src="https://s2.loli.net/2023/01/27/wZe6vN813Y4SXry.png" alt="image-20230127165512229"></p><p><img src="https://s2.loli.net/2023/01/27/oN6AT5x9QS21jCq.png" alt="image-20230127165536080"></p><blockquote><p>产生的key pair要好好保留，Amazon不会保留，如果丢失，则该虚拟机的所有data都会丢失</p></blockquote><p>剩下的东西暂时留default值，接下来Launch instance</p><p><img src="https://s2.loli.net/2023/01/27/1Vf7xTLQPvoXFke.png" alt="image-20230127194150072"></p><p>等待运行</p><p><img src="https://s2.loli.net/2023/01/27/ZSVun4HLWovlAf2.png" alt="image-20230127194401750"></p><p>运行结束显示的页面</p><p><img src="https://s2.loli.net/2023/01/27/Kz5kOEIFiyp4Smn.png" alt="image-20230127194422844"></p><p>点击蓝色链接，进入新的页面，能看到我们目前有哪些instance</p><p><img src="https://s2.loli.net/2023/01/27/DuWYe1jJNZGCL5x.png" alt="image-20230127194514892"></p><h3 id="如何从首页再回到上个界面"><a href="#如何从首页再回到上个界面" class="headerlink" title="如何从首页再回到上个界面"></a>如何从首页再回到上个界面</h3><p>选择EC2</p><p><img src="https://s2.loli.net/2023/01/27/V8CeEr7jNBDQwAd.png" alt="image-20230127201554458"></p><p>再选择左侧instances，就到了目标界面</p><p><img src="https://s2.loli.net/2023/01/27/gfKdbilY9aqct8O.png" alt="image-20230127203218307"></p><h3 id="修改pem文件"><a href="#修改pem文件" class="headerlink" title="修改pem文件"></a>修改pem文件</h3><p>我将文件存在home/ssh下</p><p>修改pem文件的性质，400意为只读性质</p><p><img src="https://s2.loli.net/2023/01/27/bevJCT8p5dfVBc3.png" alt="image-20230127204034860"></p><p>在本地链接刚刚创建的远程server</p><p><img src="https://s2.loli.net/2023/01/27/x5udpA91Rw4EbQo.png" alt="image-20230127204322268"></p><p>成功链接</p><p><img src="https://s2.loli.net/2023/01/27/wYN8bTrJSP6UfCp.png" alt="image-20230127204604513"></p>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-线程-多线程详解</title>
      <link href="/liangjunyi.github.io/2022/11/14/java-xian-cheng-duo-xian-cheng-xiang-jie/"/>
      <url>/liangjunyi.github.io/2022/11/14/java-xian-cheng-duo-xian-cheng-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-线程-多线程详解"><a href="#Java-线程-多线程详解" class="headerlink" title="Java-线程-多线程详解"></a>Java-线程-多线程详解</h1><h2 id="线程，进程，多线程"><a href="#线程，进程，多线程" class="headerlink" title="线程，进程，多线程"></a>线程，进程，多线程</h2><ul><li>线程与线程之间互不干扰，独立执行</li><li>程序运行时，没有建立自己的线程，后台也会有多个线程，比如主线程，gc线程（垃圾回收线程）</li><li>main() 称之为主线程，为系统入，用于执行整个程序</li><li>在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序是不能人为干预的。</li><li>对同一份资源操作时，会存在资源抢夺的问题，需要加入并发控制</li><li>线程会带来额外的开销，如cpu调度时间，并发控制开销</li><li>每个线程在自己的工作内存交互，内存控制不当会造成数据不一致</li></ul><h2 id="法一创建线程-继承Thread类"><a href="#法一创建线程-继承Thread类" class="headerlink" title="法一创建线程 - 继承Thread类"></a>法一创建线程 - 继承Thread类</h2><p>三种创建方式</p><p><img src="https://s2.loli.net/2022/11/14/UlsxLoAJemacptT.png" alt="image-20221114092147928"></p><ul><li>继承thread类</li><li>重写run方法</li><li>调用start()开启线程</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>{</span><br><span class="line">        <span class="comment">//run方法</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++){</span><br><span class="line">            System.out.println(<span class="string">"我在看代码---"</span>+i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">//main线程、主线程</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个线程对象</span></span><br><span class="line">        <span class="comment">//调用start()方法</span></span><br><span class="line">        <span class="type">TestThread1</span> <span class="variable">testThread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread1</span>();</span><br><span class="line">        testThread1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) {</span><br><span class="line">            System.out.println(<span class="string">"我在学习多线程---"</span>+i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">我在看代码---<span class="number">0</span></span><br><span class="line">我在看代码---<span class="number">1</span></span><br><span class="line">我在学习多线程---<span class="number">0</span></span><br><span class="line">我在看代码---<span class="number">2</span></span><br><span class="line">我在学习多线程---<span class="number">1</span></span><br><span class="line">我在看代码---<span class="number">3</span></span><br><span class="line">我在学习多线程---<span class="number">2</span></span><br><span class="line">我在看代码---<span class="number">4</span></span><br><span class="line">我在学习多线程---<span class="number">3</span></span><br><span class="line">我在看代码---<span class="number">5</span></span><br><span class="line">我在学习多线程---<span class="number">4</span></span><br><span class="line">我在学习多线程---<span class="number">5</span></span><br><span class="line">我在看代码---<span class="number">6</span></span><br><span class="line">我在学习多线程---<span class="number">6</span></span><br><span class="line">我在学习多线程---<span class="number">7</span></span><br><span class="line">我在学习多线程---<span class="number">8</span></span><br><span class="line">我在学习多线程---<span class="number">9</span></span><br><span class="line">我在学习多线程---<span class="number">10</span></span><br><span class="line">我在学习多线程---<span class="number">11</span></span><br><span class="line">我在看代码---<span class="number">7</span></span><br><span class="line">我在看代码---<span class="number">8</span></span><br><span class="line">我在学习多线程---<span class="number">12</span></span><br><span class="line">我在学习多线程---<span class="number">13</span></span><br><span class="line">我在看代码---<span class="number">9</span></span><br><span class="line">我在学习多线程---<span class="number">14</span></span><br><span class="line">我在看代码---<span class="number">10</span></span><br><span class="line">我在学习多线程---<span class="number">15</span></span><br><span class="line">我在学习多线程---<span class="number">16</span></span><br><span class="line">我在学习多线程---<span class="number">17</span></span><br><span class="line">我在学习多线程---<span class="number">18</span></span><br><span class="line">我在学习多线程---<span class="number">19</span></span><br><span class="line">我在看代码---<span class="number">11</span></span><br><span class="line">我在看代码---<span class="number">12</span></span><br><span class="line">我在看代码---<span class="number">13</span></span><br><span class="line">我在看代码---<span class="number">14</span></span><br><span class="line">我在看代码---<span class="number">15</span></span><br><span class="line">我在看代码---<span class="number">16</span></span><br><span class="line">我在看代码---<span class="number">17</span></span><br><span class="line">我在看代码---<span class="number">18</span></span><br><span class="line">我在看代码---<span class="number">19</span></span><br></pre></td></tr></tbody></table></figure><p>注意</p><ul><li>线程开启不一定立即执行，由cpu调度执行</li></ul><h2 id="案例：下载图片"><a href="#案例：下载图片" class="headerlink" title="案例：下载图片"></a>案例：下载图片</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo01;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="comment">//练习Thread，实现多线程同步下载图片</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestThread2</span><span class="params">(String url,String name)</span>{</span><br><span class="line">        <span class="built_in">this</span>.url = url;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下载图片线程的执行体</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>{</span><br><span class="line">        <span class="type">WebDownloader</span> <span class="variable">webDownloader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebDownloader</span>();</span><br><span class="line">        webDownloader.downloader(url,name);</span><br><span class="line">        System.out.println(<span class="string">"下载了文件名为:"</span>+name);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">TestThread2</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread2</span>(<span class="string">"http://static.runoob.com/images/demo/demo1.jpg"</span>,<span class="string">"1.jpg"</span>);</span><br><span class="line">        <span class="type">TestThread2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread2</span>(<span class="string">"http://static.runoob.com/images/demo/demo2.jpg"</span>,<span class="string">"2.jpg"</span>);</span><br><span class="line">        <span class="type">TestThread2</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread2</span>(<span class="string">"http://static.runoob.com/images/demo/demo3.jpg"</span>,<span class="string">"3.jpg"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//下载器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebDownloader</span>{</span><br><span class="line">    <span class="comment">//下载方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloader</span><span class="params">(String url,String name)</span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> <span class="title class_">URL</span>(url), <span class="keyword">new</span> <span class="title class_">File</span>(name));</span><br><span class="line">        }<span class="keyword">catch</span> (IOException e){</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"IO异常，download方法出现问题"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="法二创建线程-实现Runnable接口"><a href="#法二创建线程-实现Runnable接口" class="headerlink" title="法二创建线程 - 实现Runnable接口"></a>法二创建线程 - 实现Runnable接口</h2><ul><li>实现runnable接口，</li><li>重写run方法，</li><li>执行</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建线程方式二，实现runnable接口，重写run方法，执行</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread3</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>{</span><br><span class="line">        <span class="comment">//run方法</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++){</span><br><span class="line">            System.out.println(<span class="string">"我在看代码---"</span>+i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">//main线程、主线程</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建runnable接口的实现类对象</span></span><br><span class="line">        <span class="type">TestThread3</span> <span class="variable">testThread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread3</span>();</span><br><span class="line">        <span class="comment">//创建线程对象,通过线程对象来开启我们的线程,代理</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(testThread3);</span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//简写</span></span><br><span class="line"><span class="comment">//        new Thread(testThread3).start();</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) {</span><br><span class="line">            System.out.println(<span class="string">"我在学习多线程---"</span>+i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">我在看代码---<span class="number">0</span></span><br><span class="line">我在看代码---<span class="number">1</span></span><br><span class="line">我在学习多线程---<span class="number">0</span></span><br><span class="line">我在看代码---<span class="number">2</span></span><br><span class="line">我在看代码---<span class="number">3</span></span><br><span class="line">我在学习多线程---<span class="number">1</span></span><br><span class="line">我在看代码---<span class="number">4</span></span><br><span class="line">我在学习多线程---<span class="number">2</span></span><br><span class="line">我在看代码---<span class="number">5</span></span><br><span class="line">我在学习多线程---<span class="number">3</span></span><br><span class="line">我在看代码---<span class="number">6</span></span><br><span class="line">我在看代码---<span class="number">7</span></span><br><span class="line">我在看代码---<span class="number">8</span></span><br><span class="line">我在看代码---<span class="number">9</span></span><br><span class="line">我在看代码---<span class="number">10</span></span><br><span class="line">我在看代码---<span class="number">11</span></span><br><span class="line">我在看代码---<span class="number">12</span></span><br><span class="line">我在看代码---<span class="number">13</span></span><br><span class="line">我在看代码---<span class="number">14</span></span><br><span class="line">我在看代码---<span class="number">15</span></span><br><span class="line">我在看代码---<span class="number">16</span></span><br><span class="line">我在看代码---<span class="number">17</span></span><br><span class="line">我在看代码---<span class="number">18</span></span><br><span class="line">我在学习多线程---<span class="number">4</span></span><br><span class="line">我在看代码---<span class="number">19</span></span><br><span class="line">我在学习多线程---<span class="number">5</span></span><br><span class="line">我在学习多线程---<span class="number">6</span></span><br><span class="line">我在学习多线程---<span class="number">7</span></span><br><span class="line">我在学习多线程---<span class="number">8</span></span><br><span class="line">我在学习多线程---<span class="number">9</span></span><br><span class="line">我在学习多线程---<span class="number">10</span></span><br><span class="line">我在学习多线程---<span class="number">11</span></span><br><span class="line">我在学习多线程---<span class="number">12</span></span><br><span class="line">我在学习多线程---<span class="number">13</span></span><br><span class="line">我在学习多线程---<span class="number">14</span></span><br><span class="line">我在学习多线程---<span class="number">15</span></span><br><span class="line">我在学习多线程---<span class="number">16</span></span><br><span class="line">我在学习多线程---<span class="number">17</span></span><br><span class="line">我在学习多线程---<span class="number">18</span></span><br><span class="line">我在学习多线程---<span class="number">19</span></span><br></pre></td></tr></tbody></table></figure><p><strong>小结</strong></p><ul><li>继承Thread类<ul><li>子类继承Thread类具备多线程能力</li><li>启动线程：子类对象.start()</li><li>不建议使用：避免OOP单继承局限性</li></ul></li><li>实现Runnable接口<ul><li>实现接口Runnable具有多线程能力</li><li>启动线程：传入目标对象+Thread()对象.start()</li><li>推荐使用：避免单继承局限性，灵活方便，方便同一个对象被多个线程使用</li></ul></li></ul><h2 id="初识并发问题"><a href="#初识并发问题" class="headerlink" title="初识并发问题"></a>初识并发问题</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多个线程同时操作同一个对象</span></span><br><span class="line"><span class="comment">//买火车票的例子</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//发现问题，多个线程操作同一个资源，线程不安全，数据紊乱</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread4</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//票数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ticketNums</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>){</span><br><span class="line">            <span class="keyword">if</span> (ticketNums&lt;=<span class="number">0</span>){</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//模拟延时</span></span><br><span class="line">            <span class="keyword">try</span>{</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e){</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"拿到了第"</span>+ticketNums--+<span class="string">"票"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">TestThread4</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread4</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">"小明"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">"老师"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">"黄牛"</span>).start();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">黄牛拿到了第<span class="number">9</span>票</span><br><span class="line">老师拿到了第<span class="number">10</span>票</span><br><span class="line">小明拿到了第<span class="number">8</span>票</span><br><span class="line">老师拿到了第<span class="number">7</span>票</span><br><span class="line">黄牛拿到了第<span class="number">7</span>票</span><br><span class="line">小明拿到了第<span class="number">6</span>票</span><br><span class="line">老师拿到了第<span class="number">5</span>票</span><br><span class="line">小明拿到了第<span class="number">3</span>票</span><br><span class="line">黄牛拿到了第<span class="number">4</span>票</span><br><span class="line">小明拿到了第<span class="number">2</span>票</span><br><span class="line">黄牛拿到了第<span class="number">0</span>票</span><br><span class="line">老师拿到了第<span class="number">1</span>票</span><br><span class="line">小明拿到了第-<span class="number">1</span>票</span><br></pre></td></tr></tbody></table></figure><h2 id="龟兔赛跑"><a href="#龟兔赛跑" class="headerlink" title="龟兔赛跑"></a>龟兔赛跑</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Race</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//胜利者</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String winner;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;=<span class="number">100</span>;i++){</span><br><span class="line"></span><br><span class="line">            <span class="comment">//模拟兔子休息</span></span><br><span class="line">            <span class="keyword">if</span>(Thread.currentThread().getName().equals(<span class="string">"兔子"</span>) &amp;&amp; i%<span class="number">10</span>==<span class="number">0</span>){</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">                } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断比赛是否结束</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> gameover(i);</span><br><span class="line">            <span class="comment">//比赛结束就停止程序</span></span><br><span class="line">            <span class="keyword">if</span>(flag){</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"--&gt;跑了"</span>+i+<span class="string">"步"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//判断是否完成比赛</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">gameover</span><span class="params">(<span class="type">int</span> steps)</span>{</span><br><span class="line">        <span class="comment">//判断是否有胜利者</span></span><br><span class="line">        <span class="keyword">if</span>(winner!=<span class="literal">null</span>){</span><br><span class="line">            <span class="comment">//已经存在胜利者了</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }{</span><br><span class="line">            <span class="keyword">if</span> (steps&gt;=<span class="number">100</span>){</span><br><span class="line">                winner = Thread.currentThread().getName();</span><br><span class="line">                System.out.println(<span class="string">"Winner is"</span>+winner);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Race</span> <span class="variable">race</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Race</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(race,<span class="string">"兔子"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(race,<span class="string">"乌龟"</span>).start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="法三创建线程-实现Callable接口"><a href="#法三创建线程-实现Callable接口" class="headerlink" title="法三创建线程 - 实现Callable接口"></a>法三创建线程 - 实现Callable接口</h2><ol><li>实现Callable接口，需要返回值类型</li><li>重写call方法，需要抛出异常</li><li>创建目标对象</li><li>创建执行服务：</li><li>提交执行：</li><li>获取结果：</li><li>关闭服务：</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Demo01.TestThread2;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程创建方式三：实现Callable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Boolean&gt; {</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestCallable</span><span class="params">(String url, String name)</span>{</span><br><span class="line">        <span class="built_in">this</span>.url = url;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下载图片线程的执行体</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">call</span><span class="params">()</span>{</span><br><span class="line">        <span class="type">WebDownloader</span> <span class="variable">webDownloader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebDownloader</span>();</span><br><span class="line">        webDownloader.downloader(url,name);</span><br><span class="line">        System.out.println(<span class="string">"下载了文件名为:"</span>+name);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException {</span><br><span class="line">        <span class="type">TestCallable</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestCallable</span>(<span class="string">"http://static.runoob.com/images/demo/demo1.jpg"</span>,<span class="string">"1.jpg"</span>);</span><br><span class="line">        <span class="type">TestCallable</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestCallable</span>(<span class="string">"http://static.runoob.com/images/demo/demo2.jpg"</span>,<span class="string">"2.jpg"</span>);</span><br><span class="line">        <span class="type">TestCallable</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestCallable</span>(<span class="string">"http://static.runoob.com/images/demo/demo3.jpg"</span>,<span class="string">"3.jpg"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建执行服务</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">ser</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提交执行</span></span><br><span class="line">        Future&lt;Boolean&gt; r1 = ser.submit(t1);</span><br><span class="line">        Future&lt;Boolean&gt; r2 = ser.submit(t2);</span><br><span class="line">        Future&lt;Boolean&gt; r3 = ser.submit(t3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取结果：</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">rs1</span> <span class="operator">=</span> r1.get();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">rs2</span> <span class="operator">=</span> r2.get();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">rs3</span> <span class="operator">=</span> r3.get();</span><br><span class="line"></span><br><span class="line">        System.out.println(rs1);</span><br><span class="line">        System.out.println(rs2);</span><br><span class="line">        System.out.println(rs3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭服务</span></span><br><span class="line">        ser.shutdownNow();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//下载器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebDownloader</span>{</span><br><span class="line">    <span class="comment">//下载方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloader</span><span class="params">(String url,String name)</span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> <span class="title class_">URL</span>(url), <span class="keyword">new</span> <span class="title class_">File</span>(name));</span><br><span class="line">        }<span class="keyword">catch</span> (IOException e){</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"IO异常，download方法出现问题"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">下载了文件名为:<span class="number">1.</span>jpg</span><br><span class="line">下载了文件名为:<span class="number">3.</span>jpg</span><br><span class="line">下载了文件名为:<span class="number">2.</span>jpg</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><ul><li>真实对象与代理对象实现同一个接口</li><li>代理对象要代理真实角色</li><li>好处：<ul><li>代理对象可以做真实对象做不了的事情</li><li>真实对象专注做自己的事情</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> proxystatic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticProxy</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="comment">//        new Thread(()-&gt; System.out.println("I Love You")).start();</span></span><br><span class="line"><span class="comment">//        new WeddingCompany(new You()).HappyMarry();</span></span><br><span class="line">        <span class="type">You</span> <span class="variable">you</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">You</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="type">WeddingCompany</span> <span class="variable">weddingCompany</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WeddingCompany</span>(you);</span><br><span class="line"></span><br><span class="line">        weddingCompany.HappyMarry();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Marry</span>{</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">HappyMarry</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">You</span> <span class="keyword">implements</span> <span class="title class_">Marry</span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">HappyMarry</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"秦老师要结婚了，超开心"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeddingCompany</span> <span class="keyword">implements</span> <span class="title class_">Marry</span>{</span><br><span class="line">    <span class="keyword">private</span> Marry target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WeddingCompany</span><span class="params">(Marry target)</span>{</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">HappyMarry</span><span class="params">()</span>{</span><br><span class="line">        before();</span><br><span class="line">        <span class="built_in">this</span>.target.HappyMarry();</span><br><span class="line">        after();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"结婚之前，布置现场"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"结婚之后，收尾款"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">结婚之前，布置现场</span><br><span class="line">秦老师要结婚了，超开心</span><br><span class="line">结婚之后，收尾款</span><br></pre></td></tr></tbody></table></figure><ul><li>Thread类是一个代理，实现了Runnable接口</li><li>里面真实的类也实现了Runnable接口</li><li>所以Thread类可以做真实类的代理</li></ul><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>目的是简化程序</p><p><img src="https://s2.loli.net/2022/11/16/JcdDtV1Sw9gZH8W.png" alt="image-20221116151439125"></p><p><img src="https://s2.loli.net/2022/11/16/UCIj5xMTbWL8qQm.png" alt="image-20221116151521313"></p><p><img src="https://s2.loli.net/2022/11/16/eqjfsBCMwAlNU1J.png" alt="image-20221116151645947"></p><p><strong>各种类与lambda表达式</strong></p><p>越来越方便书写</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lambdaShow;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 推导lambda表达式</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambda1</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Like2</span> <span class="keyword">implements</span> <span class="title class_">ILike</span>{</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span>{</span><br><span class="line">            System.out.println(<span class="string">"i like lambda2"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">ILike</span> <span class="variable">like</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Like</span>();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        like = <span class="keyword">new</span> <span class="title class_">Like2</span>();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.局部内部类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Like3</span> <span class="keyword">implements</span> <span class="title class_">ILike</span>{</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span>{</span><br><span class="line">                System.out.println(<span class="string">"i like lambda3"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        like = <span class="keyword">new</span> <span class="title class_">Like3</span>();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.匿名内部类,没有类的名称，必须借助接口或者父类</span></span><br><span class="line">        like = <span class="keyword">new</span> <span class="title class_">ILike</span>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span> {</span><br><span class="line">                System.out.println(<span class="string">"i like lambda4"</span>);</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.用lambda简化</span></span><br><span class="line">        like = () -&gt; {</span><br><span class="line">            System.out.println(<span class="string">"i like lambda5"</span>);</span><br><span class="line">        };</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.定义一个函数式接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ILike</span>{</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.实现类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Like</span> <span class="keyword">implements</span> <span class="title class_">ILike</span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"i like lambda"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i like lambda</span><br><span class="line">i like lambda2</span><br><span class="line">i like lambda3</span><br><span class="line">i like lambda4</span><br><span class="line">i like lambda5</span><br></pre></td></tr></tbody></table></figure><p><strong>带参数的lambda表达式</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lambdaShow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambda2</span> {</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">ILove</span> <span class="variable">love</span> <span class="operator">=</span> (<span class="type">int</span> a)-&gt;{</span><br><span class="line">            System.out.println(<span class="string">"i love you--&gt;"</span>+a);</span><br><span class="line">        };</span><br><span class="line">        love.love(<span class="number">2</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ILove</span>{</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">love</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i love you--&gt;<span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><p><strong>微小简化lambda表达式</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lambdaShow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambda2</span> {</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="type">ILove</span> <span class="variable">love</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//        ILove love = (int a)-&gt;{</span></span><br><span class="line"><span class="comment">//            System.out.println("i love you--&gt;"+a);</span></span><br><span class="line"><span class="comment">//        };</span></span><br><span class="line"><span class="comment">//        love.love(2);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//简化1.去掉参数类型</span></span><br><span class="line"><span class="comment">//        love = (a) -&gt;{</span></span><br><span class="line"><span class="comment">//            System.out.println("i love you--&gt;"+a);</span></span><br><span class="line"><span class="comment">//        };</span></span><br><span class="line"><span class="comment">//        love.love(2);</span></span><br><span class="line">        <span class="comment">//简化2.去掉括号</span></span><br><span class="line"><span class="comment">//        love = a-&gt;{</span></span><br><span class="line"><span class="comment">//            System.out.println("i love you--&gt;"+a);</span></span><br><span class="line"><span class="comment">//        };</span></span><br><span class="line"><span class="comment">//        love.love(2);</span></span><br><span class="line">        <span class="comment">//简化3.去掉花括号</span></span><br><span class="line">        love = a-&gt; System.out.println(<span class="string">"i love you--&gt;"</span>+a);</span><br><span class="line">        love.love(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//总结：代码如果有多行，不可以简化花括号</span></span><br><span class="line">        <span class="comment">//多个参数传递，要带回来括号，但是可以都省略参数类型</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ILove</span>{</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">love</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i love you--&gt;<span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><p>回顾</p><ul><li>Runnable接口中，就只有一个方法，所以我们可以使用lambda表达式来实现这个接口</li></ul><h2 id="线程停止"><a href="#线程停止" class="headerlink" title="线程停止"></a>线程停止</h2><ul><li>线程状态</li></ul><p><img src="https://s2.loli.net/2022/11/16/fOVrlmb6uAyYCXN.png" alt="image-20221116180958635"></p><ul><li>线程方法</li></ul><p><img src="https://s2.loli.net/2022/11/16/VT9AGwu2qhfER6d.png" alt="image-20221116181130439"></p><ul><li>停止线程<ul><li>不推荐使用JDK提供的stop(), destroy()方法【已废弃】</li><li>推荐线程自己停下来</li><li>建议使用一个标志位进行终止变量，当flag=false，则终止线程运行</li></ul></li></ul><p><img src="https://s2.loli.net/2022/11/16/dPCtQgRpwGMFa9E.png" alt="image-20221116181451681"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">run...Thread816</span><br><span class="line">run...Thread817</span><br><span class="line">main899</span><br><span class="line">main900</span><br><span class="line">run...Thread818</span><br><span class="line">run...Thread819</span><br><span class="line">run...Thread820</span><br><span class="line">run...Thread821</span><br><span class="line">线程停止了</span><br><span class="line">main901</span><br><span class="line">main902</span><br><span class="line">main903</span><br></pre></td></tr></tbody></table></figure><h2 id="线程休眠-sleep"><a href="#线程休眠-sleep" class="headerlink" title="线程休眠_sleep"></a>线程休眠_sleep</h2><ul><li>sleep指定当前线程阻塞的毫秒数</li><li>sleep存在异常InterruptedException</li><li>sleep时间达到后，线程进入就绪状态</li><li>sleep可以模拟网络延时，倒计时等</li><li>每一个对象都有一个锁，sleep不会释放锁</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cpu太快了，没有延迟，可能看不到代码背后的问题，比如线程不安全问题</span></span><br><span class="line"><span class="comment">// 网络延时可以放大问题的发生性</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>比如之前的买票代码，没有延迟，就可能一个人买完了票</p></blockquote><p><strong>模拟倒计时</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lambdaShow;</span><br><span class="line"><span class="comment">// 模拟倒计时</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSleep2</span> {</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            tenDown();</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">tenDown</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>){</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(num--);</span><br><span class="line">            <span class="keyword">if</span>(num&lt;=<span class="number">0</span>){</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><p><strong>模拟时间</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟倒计时</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSleep2</span> {</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="type">Date</span> <span class="variable">startTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>){</span><br><span class="line">            <span class="keyword">try</span>{</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.println(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">"HH:mm:ss"</span>).format(startTime));</span><br><span class="line">                startTime = <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis());</span><br><span class="line">            }<span class="keyword">catch</span> (InterruptedException e){</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">tenDown</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>){</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(num--);</span><br><span class="line">            <span class="keyword">if</span>(num&lt;=<span class="number">0</span>){</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14</span>:<span class="number">54</span>:<span class="number">58</span></span><br><span class="line"><span class="number">14</span>:<span class="number">54</span>:<span class="number">59</span></span><br><span class="line"><span class="number">14</span>:<span class="number">55</span>:<span class="number">00</span></span><br><span class="line"><span class="number">14</span>:<span class="number">55</span>:<span class="number">01</span></span><br><span class="line"><span class="number">14</span>:<span class="number">55</span>:<span class="number">02</span></span><br></pre></td></tr></tbody></table></figure><h2 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h2><ul><li>礼让线程，让当前正在执行的线程暂停，但不阻塞</li><li>将线程从运行态，转为就绪状态</li><li>让cpu重新调度，礼让不一定成功！看cpu心情</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestYield</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">MyYield</span> <span class="variable">myYield</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyYield</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(myYield,<span class="string">"a"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(myYield,<span class="string">"b"</span>).start();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyYield</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"线程开始执行"</span>);</span><br><span class="line">        Thread.<span class="keyword">yield</span>();</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"线程停止执行"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>礼让成功</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b线程开始执行</span><br><span class="line">a线程开始执行</span><br><span class="line">b线程停止执行</span><br><span class="line">a线程停止执行</span><br></pre></td></tr></tbody></table></figure><p>礼让失败</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">b</span><br></pre></td></tr></tbody></table></figure><blockquote><p>例子不好没试出来</p></blockquote><h2 id="线程强制执行-join"><a href="#线程强制执行-join" class="headerlink" title="线程强制执行_join"></a>线程强制执行_join</h2><p>相当于插队</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJoin</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {</span><br><span class="line">            System.out.println(<span class="string">"线程vip来了"</span>+i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        <span class="type">TestJoin</span> <span class="variable">testJoin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestJoin</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(testJoin);</span><br><span class="line">        thread.start();</span><br><span class="line">        thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//主线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) {</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">200</span>){</span><br><span class="line">                thread.join();</span><br><span class="line">            }</span><br><span class="line">            System.out.println(<span class="string">"main"</span>+i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/11/28/jXOHWbmQKfl5hAc.png" alt="img"></p><h2 id="线程状态观测"><a href="#线程状态观测" class="headerlink" title="线程状态观测"></a>线程状态观测</h2><ul><li>Thread.State<ul><li>NEW //尚未启动的线程处于此状态</li><li>RUNNABLE //在Java虚拟机中执行的线程处于此状态</li><li>BLOCKED //被阻塞等待监视器锁定的线程处于此状态</li><li>WAITING //正在等待另一个线程执行特定动作的线程处于此状态</li><li>TIMED_WAITING //正在等待另一个线程执行动作达到指定等待时间的线程处于此状态</li><li>TERMINATED //已退出的线程处于此状态</li></ul></li></ul><h2 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h2><ul><li>Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按学号优先级决定应该调度哪个线程来执行。</li><li>线程优先级用数字表示，范围从1~10，在Thread中定义了几个常量来表示优先级<ul><li>Thread.MIN_PRIORITY = 1;</li><li>Thread.MAX_PRIORITY = 10;</li><li>Thread.NORM_PRIORITY = 5; //默认优先级，不设置的话就是默认优先级</li></ul></li><li>线程优先级高不一定先执行，但是给它的资源就会多一些</li><li>使用以下方式来改变或获取优先级<ul><li>getPriority() //获取优先级</li><li>setPriority(int xxx) //改变优先级</li></ul></li></ul><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><ul><li>线程分为用户线程和守护线程</li><li>虚拟机必须确保用户线程执行完毕</li><li>虚拟机不用等待守护线程执行完毕</li><li>守护线程：后台记录操作日志，监控内存，垃圾回收等待</li></ul><p>通过 setDaemon(true) 方法来设置守护线程，参数为true是守护线程，默认是false用户线程</p><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><ul><li><p>并发：同一个对象被多个线程同时操作</p><ul><li>上万人同时抢100张票</li><li>两个银行同时取钱</li></ul></li><li><p>在现实生活中，我们遇到“同一个对象被多个线程同时操作”这种问题，比如食堂打饭，解决办法就是排队</p></li><li><p>处理多线程问题时，多个线程访问同一个对象，并且某些线程还想修改这个对象，这时候我们就需要线程同步。线程同步其实就是一种等待机制，多个需要同时访问此对象的线程进入这个对象的等待池形成队列，等待前面线程使用完毕，下一个线程在使用。</p></li><li><p>队列和锁：在线程访问对象时，加入锁机制 synchronized, 当一个线程获得对象的排他锁，独占资源，其他线程必须等待，使用后释放锁即可，存在以下问题</p><ul><li>一个线程持有锁会导致其他所有需要此锁的线程挂起</li><li>在多线程竞争下，加锁，释放锁会导致比较多的上下文切换，和调度延时，引起性能问题</li><li>如果一个优先级高的线程等待一个优先级低的线程释放锁，会导致优先级导致，引起性能问题</li></ul></li></ul><h3 id="三大不安全案例"><a href="#三大不安全案例" class="headerlink" title="三大不安全案例"></a>三大不安全案例</h3><h4 id="买票案例"><a href="#买票案例" class="headerlink" title="买票案例"></a>买票案例</h4><p>线程不安全，票数出现负数</p><p><strong>每个线程都在自己的工作内存交互，内存控制不当会造成数据不一致</strong></p><p>买票时，<strong>每个线程都把票数拿到自己的内存</strong>，当票数只剩一张时，所以它们看到的都是1，然后都去拿这一张票，当第一个线程拿到这张票时，票数修改为0，第二个线程再去拿时，票数就变成了-1.</p><h4 id="银行取钱案例"><a href="#银行取钱案例" class="headerlink" title="银行取钱案例"></a>银行取钱案例</h4><h4 id="线程不安全的集合"><a href="#线程不安全的集合" class="headerlink" title="线程不安全的集合"></a>线程不安全的集合</h4><p>以ArrayList 为例</p><p>我们加入了10000个元素，实际加入集合的只有7761个，原因是当这些线程在同一瞬间把集合元素添加到集合的同一位置，就覆盖掉了前面的元素，所以集合中的元素数量才会少</p><h4 id="如何解决不安全的问题？"><a href="#如何解决不安全的问题？" class="headerlink" title="如何解决不安全的问题？"></a>如何解决不安全的问题？</h4>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c#-基础-2- 各类程序</title>
      <link href="/liangjunyi.github.io/2022/11/10/c-ji-chu-2-ge-lei-cheng-xu/"/>
      <url>/liangjunyi.github.io/2022/11/10/c-ji-chu-2-ge-lei-cheng-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="c-基础-2-各类程序"><a href="#c-基础-2-各类程序" class="headerlink" title="c#-基础-2- 各类程序"></a>c#-基础-2- 各类程序</h1><h2 id="Solution与Project"><a href="#Solution与Project" class="headerlink" title="Solution与Project"></a>Solution与Project</h2><p>一个Solution里面可以包含一个或多个project</p><ul><li>Solution是针对客户需求的总的解决方案</li><li>Project解决具体的某个问题</li></ul><p>各类应用程序写Hello World</p><ul><li>Console</li><li>WPF (Windows Presentation Foundation)</li><li>Windows Forms (Old)</li><li>ASP.NET Web Forms (Old)</li><li>ASP.NET MVC (Model-View-Controller)</li><li>WCF(Windows Communication Foundation)</li><li>Windows Store Application</li><li>Cloud (Windows Azure)</li><li>WF (Workflow Foundation)</li></ul><h2 id="Console"><a href="#Console" class="headerlink" title="Console"></a>Console</h2><p>选择console app（.NET Framework）</p><p><img src="https://s2.loli.net/2022/11/11/KmOVCJoB41ySuAZ.png" alt="image-20221111091307177"></p><p><img src="https://s2.loli.net/2022/11/11/EUQWbsZmMcKaNtl.png" alt="image-20221111091250888"></p><h2 id="WPF"><a href="#WPF" class="headerlink" title="WPF"></a>WPF</h2><p>选择 WPF Application</p><p><img src="https://s2.loli.net/2022/11/11/fIvV2jSBQPOLiJu.png" alt="image-20221111091936372"></p><p>详情见上一章</p><p>与windowsforms相比功能更强，指在设计方面（可以编写xaml代码）</p><h2 id="WindowsForms"><a href="#WindowsForms" class="headerlink" title="WindowsForms"></a>WindowsForms</h2><p><img src="https://s2.loli.net/2022/11/11/9fqHY6Q2PzxS1D4.png" alt="image-20221111092643251"></p><p><img src="https://s2.loli.net/2022/11/11/FnzMlhISJf2LRWH.png" alt="image-20221111093025084"></p><h2 id="ASP-NET-Web-Forms"><a href="#ASP-NET-Web-Forms" class="headerlink" title="ASP.NET Web Forms"></a>ASP.NET Web Forms</h2>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c#-基础-1- 简单程序</title>
      <link href="/liangjunyi.github.io/2022/11/10/c-ji-chu-1-jian-dan-cheng-xu/"/>
      <url>/liangjunyi.github.io/2022/11/10/c-ji-chu-1-jian-dan-cheng-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="c-基础-1-简单程序"><a href="#c-基础-1-简单程序" class="headerlink" title="c#-基础-1- 简单程序"></a>c#-基础-1- 简单程序</h1><h2 id="1-创建project"><a href="#1-创建project" class="headerlink" title="1.创建project"></a>1.创建project</h2><p><img src="https://s2.loli.net/2022/11/10/sow2agPKQbpJxIU.png" alt="image-20221110175704915"></p><p>选择 WPF Application</p><h2 id="2-改变背景颜色"><a href="#2-改变背景颜色" class="headerlink" title="2.改变背景颜色"></a>2.改变背景颜色</h2><p><img src="https://s2.loli.net/2022/11/10/43jo1dlJcuaN5hI.png" alt="image-20221110180220798"></p><p>右下角properties下的Brush</p><p><img src="https://s2.loli.net/2022/11/10/j369pMEimryOqVH.png" alt="image-20221110180321820"></p><p>调节颜色</p><p><img src="https://s2.loli.net/2022/11/10/9CPNEM2mYn1JLei.png" alt="image-20221110180356317"></p><h2 id="3-添加组件"><a href="#3-添加组件" class="headerlink" title="3.添加组件"></a>3.添加组件</h2><p>选择左侧toolbox，选择里面的 All WPF Controls</p><p><img src="https://s2.loli.net/2022/11/10/eqN8UE3gbkzCSut.png" alt="image-20221110180507649"></p><p>添加完成</p><p><img src="https://s2.loli.net/2022/11/10/Pgi4EIuCBG8eax2.png" alt="image-20221110180637484"></p><h2 id="4-给TextBox赋名"><a href="#4-给TextBox赋名" class="headerlink" title="4.给TextBox赋名"></a>4.给TextBox赋名</h2><p><img src="https://s2.loli.net/2022/11/10/dthLiUoy3ZknE26.png" alt="image-20221110180756504"></p><h2 id="5-给Button增加事件"><a href="#5-给Button增加事件" class="headerlink" title="5.给Button增加事件"></a>5.给Button增加事件</h2><p>点击，选中button</p><p><img src="https://s2.loli.net/2022/11/10/yoSzkTbt2nC6mOG.png" alt="image-20221110180858819"></p><p>点击右侧小闪电</p><p><img src="https://s2.loli.net/2022/11/10/HkgD1Iz2C9NXxva.png" alt="image-20221110180934245"></p><p>双击click</p><p><img src="https://s2.loli.net/2022/11/10/YOfN4R9Sv21JjLM.png" alt="image-20221110181004203"></p><p>添加信息</p><p><img src="https://s2.loli.net/2022/11/10/9Z4gzB2AbVM86Jw.png" alt="image-20221110181042058"></p><h2 id="6-运行程序"><a href="#6-运行程序" class="headerlink" title="6.运行程序"></a>6.运行程序</h2><p><img src="https://s2.loli.net/2022/11/10/dnqjyWlQmbXpZAk.png" alt="image-20221110181139645"></p><p>点击一下按钮</p><p><img src="https://s2.loli.net/2022/11/10/zUvuMcGgL6jAiTS.png" alt="image-20221110181213886"></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-7-异常 01 - 03</title>
      <link href="/liangjunyi.github.io/2022/11/06/java-ji-chu-7-yi-chang-01-03/"/>
      <url>/liangjunyi.github.io/2022/11/06/java-ji-chu-7-yi-chang-01-03/</url>
      
        <content type="html"><![CDATA[<h1 id="Java异常-01-03"><a href="#Java异常-01-03" class="headerlink" title="Java异常 01 - 03"></a>Java异常 01 - 03</h1><h2 id="Java异常01-Error和Exception"><a href="#Java异常01-Error和Exception" class="headerlink" title="Java异常01 - Error和Exception"></a>Java异常01 - Error和Exception</h2><p><img src="https://s2.loli.net/2022/11/10/pwq2lzikdyHVhDs.png" alt="image-20221110155118391"></p><p><img src="https://s2.loli.net/2022/11/10/MhtqKflSX9sQrCE.png" alt="image-20221110155144022"></p><p><img src="https://s2.loli.net/2022/11/10/mZqVQfei9gvnsDR.png" alt="image-20221110155225513"></p><h2 id="Java异常02-捕获和抛出异常"><a href="#Java异常02-捕获和抛出异常" class="headerlink" title="Java异常02 - 捕获和抛出异常"></a>Java异常02 - 捕获和抛出异常</h2><ul><li>抛出异常</li><li>捕获异常</li><li>关键字<ul><li>try</li><li>catch</li><li>finally</li><li>throw</li><li>throws</li></ul></li></ul><p><code>ctrl + alt + t</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>{ <span class="comment">//监控区域</span></span><br><span class="line">            System.out.println(a/b);</span><br><span class="line">        }<span class="keyword">catch</span> (ArithmeticException e){ <span class="comment">// catch(想要捕获的异常类型)捕获异常，可以写多个catch，大的异常写下面</span></span><br><span class="line">            System.out.println(<span class="string">"程序出现异常，变量b不能为0"</span>);</span><br><span class="line">        }<span class="keyword">finally</span> {</span><br><span class="line">            System.out.println(<span class="string">"finally"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>主动抛出异常 throw</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//假设这个方法中，处理不了这个异常，方法上抛出异常</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>{</span><br><span class="line">        <span class="keyword">if</span>(b==<span class="number">0</span>){</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArithmeticException</span>(); <span class="comment">//主动抛出异常，一般在方法中使用</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>throws和try catch是处理异常时用的两种方式，try catch就是直接捕获了异常，然后解决掉，throws就是把异常返回给了外面（多是调用这个函数的地方），在外面catch try。如果不采取以上两种措施中的一个，就有可能报错。</p><h2 id="Java异常03-自定义异常及经验小结"><a href="#Java异常03-自定义异常及经验小结" class="headerlink" title="Java异常03 - 自定义异常及经验小结"></a>Java异常03 - 自定义异常及经验小结</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> detail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(<span class="type">int</span> a)</span>{</span><br><span class="line">        <span class="built_in">this</span>.detail = a;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MyException{"</span> +</span><br><span class="line">                <span class="string">"detail="</span> + detail +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a)</span> <span class="keyword">throws</span> MyException {</span><br><span class="line">        System.out.println(<span class="string">"传递参数为："</span>+a);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a&gt;<span class="number">10</span>){</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(a); <span class="comment">//抛出</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"OK"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            test(<span class="number">11</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (MyException e) {</span><br><span class="line">            System.out.println(<span class="string">"MyException=&gt;"</span>+e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象 12 - 17</title>
      <link href="/liangjunyi.github.io/2022/11/01/java-ji-chu-6-mian-xiang-dui-xiang-12-17/"/>
      <url>/liangjunyi.github.io/2022/11/01/java-ji-chu-6-mian-xiang-dui-xiang-12-17/</url>
      
        <content type="html"><![CDATA[<h1 id="Java面向对象-12-17"><a href="#Java面向对象-12-17" class="headerlink" title="Java面向对象 12 - 17"></a>Java面向对象 12 - 17</h1><h2 id="Java面向对象12-什么是多态"><a href="#Java面向对象12-什么是多态" class="headerlink" title="Java面向对象12 - 什么是多态"></a>Java面向对象12 - 什么是多态</h2><ul><li>动态编译 : 增强可扩展性</li><li>即同一个方法可以根据发送对象的不同而采用多种不同的行为方式</li><li>一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多（父类，有关系的类）</li><li>多态存在条件<ul><li>有继承关系</li><li>子类重写父类方法</li><li>父类引用指向子类对象</li></ul></li><li>注意：多态是方法的多态，属性没有多态</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"person"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"sleep"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Student"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"eat"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">//一个对象的实际类型是确定的</span></span><br><span class="line">        <span class="comment">//new Student();</span></span><br><span class="line">        <span class="comment">//new Person();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以指向的引用类型就不确定了：父类引用指向子类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Student 能调用的方法都是自己的或者继承父类的</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">//Person 父类型，可以指向子类，但是不能调用子类独有的方法</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对象能执行哪些方法，主要看对象左边的类型，和右边关系不大</span></span><br><span class="line">        <span class="comment">// s2.eat(); 无法执行，因为Person类里没有eat（）</span></span><br><span class="line">        s2.run();</span><br><span class="line">        s1.run(); <span class="comment">//都执行的子类的方法，原因是s2虽然企图去执行父类的方法</span></span><br><span class="line">                  <span class="comment">//但是由于子类复写了这个方法，所以执行子类的去了</span></span><br><span class="line">        s2.sleep();<span class="comment">//执行了父类的sleep方法,因为子类没复写</span></span><br><span class="line">        s1.sleep();<span class="comment">//因为子类继承了父类，因为子类没复写,所以有个一样的sleep方法</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Student</span><br><span class="line">Student</span><br><span class="line">sleep</span><br><span class="line">sleep</span><br></pre></td></tr></tbody></table></figure><ul><li>经典例子</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> {</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">show</span><span class="params">(D obj)</span> {</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"A and D"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">show</span><span class="params">(A obj)</span> {</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"A and A"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>{</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">show</span><span class="params">(B obj)</span>{</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"B and B"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">show</span><span class="params">(A obj)</span>{</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"B and A"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">B</span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">extends</span> <span class="title class_">B</span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">A</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        <span class="type">A</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        <span class="type">C</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">        <span class="type">D</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">D</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"1--"</span> + a1.show(b));</span><br><span class="line">        System.out.println(<span class="string">"2--"</span> + a1.show(c));</span><br><span class="line">        System.out.println(<span class="string">"3--"</span> + a1.show(d));</span><br><span class="line">        System.out.println(<span class="string">"4--"</span> + a2.show(b));</span><br><span class="line">        System.out.println(<span class="string">"5--"</span> + a2.show(c));</span><br><span class="line">        System.out.println(<span class="string">"6--"</span> + a2.show(d));</span><br><span class="line">        System.out.println(<span class="string">"7--"</span> + b.show(b));</span><br><span class="line">        System.out.println(<span class="string">"8--"</span> + b.show(c));</span><br><span class="line">        System.out.println(<span class="string">"9--"</span> + b.show(d));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>--A and A</span><br><span class="line"><span class="number">2</span>--A and A</span><br><span class="line"><span class="number">3</span>--A and D</span><br><span class="line"><span class="number">4</span>--B and A</span><br><span class="line"><span class="number">5</span>--B and A</span><br><span class="line"><span class="number">6</span>--A and D</span><br><span class="line"><span class="number">7</span>--B and B</span><br><span class="line"><span class="number">8</span>--B and B</span><br><span class="line"><span class="number">9</span>--A and D</span><br></pre></td></tr></tbody></table></figure><h2 id="Java面向对象13-instanceof和类型转换"><a href="#Java面向对象13-instanceof和类型转换" class="headerlink" title="Java面向对象13 - instanceof和类型转换"></a>Java面向对象13 - instanceof和类型转换</h2><ul><li>instanceof 用来判断两个类有没有父子关系</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Object &gt; Person &gt; Student</span></span><br><span class="line">        <span class="comment">// 前三个是true，因为创建的object对象是Student类的实例，只不过指向了Object类</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Student); <span class="comment">// true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Object); <span class="comment">// true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Teacher); <span class="comment">// false</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> String); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"==================================="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(person  <span class="keyword">instanceof</span> Student); <span class="comment">// true</span></span><br><span class="line">        System.out.println(person  <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br><span class="line">        System.out.println(person  <span class="keyword">instanceof</span> Object); <span class="comment">// true</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Teacher); <span class="comment">// false</span></span><br><span class="line"><span class="comment">//        System.out.println(person  instanceof String); //编译时报错</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"==================================="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Student); <span class="comment">// true</span></span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Object); <span class="comment">// true</span></span><br><span class="line"><span class="comment">//        System.out.println(student instanceof Teacher); // 编译时报错</span></span><br><span class="line"><span class="comment">//        System.out.println(student instanceof String); // 编译时报错</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>类型转换<ul><li>子类转换为父类，低转高，向上转型，可能会丢失一些自己的本来的方法</li><li>父类转换为子类，高转低，向下转型，需要强制转换</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo09;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"run"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo09;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">go</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"go"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo09;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">//这个是Student 转 Person，属于低转高                 </span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="comment">//        obj.go();// 报错因为Person类里面没有go方法           </span></span><br><span class="line">        <span class="comment">// 通过转化把 obj 再度转换为 Student 类型               </span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) obj;</span><br><span class="line">        student.go();</span><br><span class="line">        <span class="comment">// ((Student) obj).go(); 合成一句话也可以           </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}  </span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go</span><br></pre></td></tr></tbody></table></figure><h2 id="Java面向对象14-static关键字详解"><a href="#Java面向对象14-static关键字详解" class="headerlink" title="Java面向对象14 - static关键字详解"></a>Java面向对象14 - static关键字详解</h2><ul><li>代码块</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> {</span><br><span class="line">    <span class="comment">//2 : 起到赋初始值作用</span></span><br><span class="line">    {</span><br><span class="line">        System.out.println(<span class="string">"匿名代码块"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1 : 只执行一次</span></span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        System.out.println(<span class="string">"静态代码块"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"构造方法"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        System.out.println(<span class="string">"==============================="</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">静态代码块</span><br><span class="line">匿名代码块</span><br><span class="line">构造方法</span><br><span class="line">===============================</span><br><span class="line">匿名代码块</span><br><span class="line">构造方法</span><br></pre></td></tr></tbody></table></figure><ul><li>static 关键字</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> age; <span class="comment">// 静态变量 多线程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score; <span class="comment">// 非静态变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">go</span><span class="params">()</span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(Student.age);</span><br><span class="line"><span class="comment">//        System.out.println(Student.score);//报错</span></span><br><span class="line">        System.out.println(s1.age);</span><br><span class="line">        System.out.println(s1.score);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>final<ul><li>被final修饰的class不能被继承了</li></ul></li></ul><h2 id="Java面向对象15-抽象类"><a href="#Java面向对象15-抽象类" class="headerlink" title="Java面向对象15 - 抽象类"></a>Java面向对象15 - 抽象类</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo11;</span><br><span class="line"></span><br><span class="line"><span class="comment">// abstract 抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Action</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法，不用写具体实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 不能new这个类，只能子类去实现它</span></span><br><span class="line">    <span class="comment">// 2. 抽象类里可以写普通方法，但是如果类里有抽象方法，那么一定得是抽象类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存在构造器</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo11;</span><br><span class="line"><span class="comment">// 抽象类所有方法子类必须实现，除非子类也是abstract</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">Action</span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Java面向对象16-接口的定义与实现"><a href="#Java面向对象16-接口的定义与实现" class="headerlink" title="Java面向对象16 - 接口的定义与实现"></a>Java面向对象16 - 接口的定义与实现</h2><ul><li>普通类：只有具体实现</li><li>抽象类：具体实现和规范都有</li><li>接口：只有规范</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo12;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> {</span><br><span class="line">    <span class="comment">// 属性默认是常量 public static final,但是很少在接口里定义常量，多为方法</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">AGE</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line">    <span class="comment">//接口中所有定义默认都是public abstract</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">query</span><span class="params">(String name)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo12;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TimeService</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">timer</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo12;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类可以实现接口</span></span><br><span class="line"><span class="comment">// 类只能单继承，包括抽象类</span></span><br><span class="line"><span class="comment">// 但接口可以多实现，不能被继承()</span></span><br><span class="line"><span class="comment">// 实现接口的类一定要实现接口中的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>,TimeService {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String name)</span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String name)</span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String name)</span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">(String name)</span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">timer</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>作用：</p><ol><li>约束</li><li>定义一些方法让不同的人实现</li><li>public abstract</li><li>public static final</li><li>接口不能被实例化，接口没有构造方法</li><li>implements可以实现多个接口</li><li>必须要重写接口中的方法</li></ol><h2 id="Java面向对象17-N种内部类"><a href="#Java面向对象17-N种内部类" class="headerlink" title="Java面向对象17 - N种内部类"></a>Java面向对象17 - N种内部类</h2><p>在一个类的内部再定义一个类</p><ol><li>成员内部类</li><li>静态内部类</li><li>局部内部类</li><li>匿名内部类</li></ol><ul><li>成员内部类</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo13;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"这是外部类的方法"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">Inner</span>{</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">in</span><span class="params">()</span>{</span><br><span class="line">            System.out.println(<span class="string">"这是内部类"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得外部类的私有属性</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getID</span><span class="params">()</span>{</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo13;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过外部类实例化内部类</span></span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.in();</span><br><span class="line">        inner.getID();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是内部类</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><ul><li>静态内部类</li></ul><p>如果以上的 Inner class 是 static 类，那么 getID() 方法将会报错，因为static在一开始就执行了，但是id并不是一个static的东西，所以id还尚未出现，所以报错。除非id也是static。</p><ul><li>局部内部类</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo13;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>{</span><br><span class="line">        <span class="comment">//和局部变量一样，这种类创建在方法里</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner</span>{</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo13;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">//没有名字初始化类，不用把实例化保存到变量中</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Apple</span>().eat();</span><br><span class="line">        <span class="comment">//这个new一个接口也是匿名内部类</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Apple</span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"1"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UserService</span>{</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象 08 - 11</title>
      <link href="/liangjunyi.github.io/2022/10/27/java-ji-chu-6-mian-xiang-dui-xiang-08-11/"/>
      <url>/liangjunyi.github.io/2022/10/27/java-ji-chu-6-mian-xiang-dui-xiang-08-11/</url>
      
        <content type="html"><![CDATA[<h1 id="Java面向对象-08-11"><a href="#Java面向对象-08-11" class="headerlink" title="Java面向对象 08 - 11"></a>Java面向对象 08 - 11</h1><h2 id="Java面向对象08-封装详解"><a href="#Java面向对象08-封装详解" class="headerlink" title="Java面向对象08 - 封装详解"></a>Java面向对象08 - 封装详解</h2><ul><li>程序设计追求，<code>高内聚，低耦合</code>, 高内聚就是类的内部数据操作细节自己完成，低耦合是仅暴露少量的方法给外部使用</li><li>封装 (数据的隐藏)<ul><li>通常应该进制直接访问一个对象中的数据，应该通过操作接口来访问，这称为信息隐藏</li></ul></li><li>属性私有，get/set</li></ul><p>封装的意义</p><ol><li>提高程序安全性</li><li>隐藏代码的实现细节</li><li>提高可维护性</li><li>统一借口</li></ol><blockquote><p>通常在set的时候我们可以写一些条件，来规范外部的输入</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo04;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性私有</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id; <span class="comment">//id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> sex; <span class="comment">//性别</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age; <span class="comment">// 年龄</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一些可以操作这个属性的方法</span></span><br><span class="line">    <span class="comment">//public的get、set方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//get</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//set</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>{</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> {</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getSex</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(<span class="type">char</span> sex)</span> {</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> {</span><br><span class="line">        <span class="keyword">if</span>(age&gt;<span class="number">120</span>||age&lt;<span class="number">0</span>){</span><br><span class="line">            <span class="built_in">this</span>.age = <span class="number">3</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span>{</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        s1.setName(<span class="string">"赵晓艺"</span>);</span><br><span class="line">        System.out.println(s1.getName());</span><br><span class="line"></span><br><span class="line">        s1.setAge(<span class="number">999</span>); <span class="comment">//不合法</span></span><br><span class="line">        System.out.println(s1.getAge());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">赵晓艺</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Java面向对象09-什么是继承"><a href="#Java面向对象09-什么是继承" class="headerlink" title="Java面向对象09 - 什么是继承"></a>Java面向对象09 - 什么是继承</h2><ul><li>所有类都继承了Object类（直接或者间接）</li><li>super</li><li>方法重写</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"说了一句话"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.say();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">说了一句话</span><br></pre></td></tr></tbody></table></figure><h2 id="Java面向对象10-Super详解"><a href="#Java面向对象10-Super详解" class="headerlink" title="Java面向对象10 - Super详解"></a>Java面向对象10 - Super详解</h2><p>super注意点</p><ol><li>super调用父类的构造方法，必须在构造方法的第一个</li><li>super必须只能出现在子类的方法或者构造方法中</li><li>super 和 this不能同时调用构造方法</li></ol><p>this VS super</p><ol><li>代表的对象不同<ul><li>this 本身调用者这个对象</li><li>super 代表父类对象的应用</li></ul></li><li>前提<ul><li>this 没有继承也可以使用</li><li>super 只能在继承条件才可以使用</li></ul></li><li>构造方法<ul><li>this() 本类的构造</li><li>super() 父类的构造</li></ul></li></ol><blockquote><p>注意：在子类的构造函数中，如果没有明确的写，则会自动调用父类的构造方法，此时，如果父类写了一个有参构造，没有写无参构造，子类构造函数中又没有写有参调用super(), 那么会报错。因为父类不会再自动生成无参构造函数了，但子类因为没有明确写出则会自动调用父类的无参构造。</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">"zhaoxiaoyi"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"Person无参执行了"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"Person"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">"liangjunyi"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>{</span><br><span class="line">        <span class="comment">//调用父类的构造器，必须要在子类构造器的第一行</span></span><br><span class="line">        <span class="comment">//父类没有写无参构造，那么子类也不能调用无参super()</span></span><br><span class="line">        <span class="built_in">super</span>(); <span class="comment">//可以不写，也会执行</span></span><br><span class="line">        System.out.println(<span class="string">"Student无参执行了"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(String name)</span>{</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name);</span><br><span class="line">        System.out.println(<span class="built_in">super</span>.name);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"Student"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>{</span><br><span class="line">        print();</span><br><span class="line">        <span class="built_in">this</span>.print();</span><br><span class="line">        <span class="built_in">super</span>.print();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="comment">//        student.test("梁骏毅");</span></span><br><span class="line">        student.test2();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Student</span><br><span class="line">Student</span><br><span class="line">Person</span><br></pre></td></tr></tbody></table></figure><h2 id="Java面向对象11-方法重写"><a href="#Java面向对象11-方法重写" class="headerlink" title="Java面向对象11 - 方法重写"></a>Java面向对象11 - 方法重写</h2><ul><li>重写都是方法，与属性无关</li><li>重写与静态方法无关，与非静态方法有关</li><li>需要有继承关系，子类重写父类的方法<ul><li>方法名必须相同</li><li>参数列表必须相同</li><li>修饰符，范围可以扩大，但不能缩小，父类是private，重写可以是public，但是反之不行</li><li>public&gt;protected&gt;default&gt;private</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"B test"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">B</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"A test"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> {</span><br><span class="line">    <span class="comment">//静态方法与非静态方法有区别</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 静态方法</span></span><br><span class="line">        <span class="comment">// 方法的调用只和左边有关</span></span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.test();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//父类的引用指向了子类</span></span><br><span class="line">        <span class="comment">//b指向了A</span></span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        b.test();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A test</span><br><span class="line">A test</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-6-面向对象 01 - 07</title>
      <link href="/liangjunyi.github.io/2022/10/23/java-ji-chu-6-mian-xiang-dui-xiang-01-07/"/>
      <url>/liangjunyi.github.io/2022/10/23/java-ji-chu-6-mian-xiang-dui-xiang-01-07/</url>
      
        <content type="html"><![CDATA[<h1 id="Java面向对象-01-07"><a href="#Java面向对象-01-07" class="headerlink" title="Java面向对象 01 - 07"></a>Java面向对象 01 - 07</h1><h2 id="Java面向对象01-什么是面向对象"><a href="#Java面向对象01-什么是面向对象" class="headerlink" title="Java面向对象01 - 什么是面向对象"></a>Java面向对象01 - 什么是面向对象</h2><p>面向对象的本质：以类的的方式组织代码，以对象的组织（封装）数据</p><ul><li>抽象</li><li>三大特征：<ul><li>封装</li><li>继承</li><li>多态</li></ul></li></ul><h2 id="Java面向对象02-回顾方法的定义"><a href="#Java面向对象02-回顾方法的定义" class="headerlink" title="Java面向对象02 - 回顾方法的定义"></a>Java面向对象02 - 回顾方法的定义</h2><h2 id="Java面向对象03-回顾方法的调用"><a href="#Java面向对象03-回顾方法的调用" class="headerlink" title="Java面向对象03 - 回顾方法的调用"></a>Java面向对象03 - 回顾方法的调用</h2><ul><li>调用一</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//非静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"学生说话了"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"学生吃东西了"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> {</span><br><span class="line">    <span class="comment">//main方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.非静态方法实例化</span></span><br><span class="line">        <span class="comment">//用new来实例化类</span></span><br><span class="line">        <span class="comment">//对象类型 对象名 = 对象值</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.say();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.非静态方法实例化</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Student</span>().say();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.静态方法实例化</span></span><br><span class="line">        Student.eat();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">学生说话了</span><br><span class="line">学生说话了</span><br><span class="line">学生吃东西了</span><br></pre></td></tr></tbody></table></figure><ul><li>调用二<ul><li>两个static的函数互相调用</li><li>没有问题</li></ul></li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package Demo01;</span><br><span class="line"></span><br><span class="line">public class Demo02 {</span><br><span class="line">    public static void a(){</span><br><span class="line">        b();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public static void b(){</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li>调用三<ul><li>两个非static的函数互相调用</li><li>没有问题</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>{</span><br><span class="line">        b();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>调用四<ul><li>在一个static函数下，调用一个非static函数</li><li>报错</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>{</span><br><span class="line">        b();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>调用五<ul><li>在一个非static函数下，调用一个static函数</li><li>没有问题</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>{</span><br><span class="line">        b();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>原理：static方法在类加载时就存在了，但是非static方法在类被实例化的时候才存在，所以static方法不会提前知道非static方法的存在，但是非static方法一定能知道static方法的存在。</p></blockquote><ul><li>修改成功</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        System.out.println(person.name);</span><br><span class="line">        Demo04.change(person);</span><br><span class="line">        System.out.println(person.name);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(Person person)</span>{</span><br><span class="line">        person.name = <span class="string">"Liang Junyi"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>{</span><br><span class="line">    String name; <span class="comment">// null</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span></span><br><span class="line">Liang Junyi</span><br></pre></td></tr></tbody></table></figure><ul><li>修改失败</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">        Demo05.change(a);</span><br><span class="line"></span><br><span class="line">        System.out.println(a);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> a)</span>{</span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Java面向对象04-类与对象的创建"><a href="#Java面向对象04-类与对象的创建" class="headerlink" title="Java面向对象04 - 类与对象的创建"></a>Java面向对象04 - 类与对象的创建</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">//类，抽象的，实例化</span></span><br><span class="line">        <span class="comment">//类实例化后会返回一个自己的对象</span></span><br><span class="line">        <span class="comment">//student对象是一个Student类的具体实例</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">xiaoming</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Student</span> <span class="variable">xiaohong</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        xiaoming.name = <span class="string">"小明"</span>;</span><br><span class="line">        xiaoming.age = <span class="number">3</span>;</span><br><span class="line">        System.out.println(xiaoming.name);</span><br><span class="line">        System.out.println(xiaoming.age);</span><br><span class="line"></span><br><span class="line">        xiaohong.name = <span class="string">"小红"</span>;</span><br><span class="line">        xiaohong.age = <span class="number">5</span>;</span><br><span class="line">        System.out.println(xiaohong.name);</span><br><span class="line">        System.out.println(xiaohong.age);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">小明</span><br><span class="line"><span class="number">3</span></span><br><span class="line">小红</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Java面向对象05-构造器详解"><a href="#Java面向对象05-构造器详解" class="headerlink" title="Java面向对象05 - 构造器详解"></a>Java面向对象05 - 构造器详解</h2><ul><li>使用new关键字创建对象</li><li>使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中的构造器的调用</li><li>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：<ol><li>必须保持和类的名字相同</li><li>必须没有返回类型，也不能写void</li></ol></li></ul><p><strong>构造器要求</strong></p><ul><li><p>与类名相同的public函数</p></li><li><p>分为有参数与无参数构造</p></li></ul><p><strong>构造器特点</strong></p><ul><li>不创建的时候系统会默认创建一个无参数构造器<ul><li>反之手动创建了构造器后，不会再自动生成无参构造器</li></ul></li><li>使用new关键字，本质是在调用构造器</li><li>构造器被用来初始化值</li><li>通常有参构造与无参构造都会写，而且写不止一个有参构造，也就是重载</li><li><code>alt + insert</code> 快捷键，可用来生成构造器</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> {</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span>{</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> {</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"zhaoxiaoyi"</span>,<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(person.name);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Java面向对象06-创建对象内存分析"><a href="#Java面向对象06-创建对象内存分析" class="headerlink" title="Java面向对象06 - 创建对象内存分析"></a>Java面向对象06 - 创建对象内存分析</h2><p><img src="https://s2.loli.net/2022/11/09/Tca7qEkFMLvAjwh.png" alt="image-20221109162321337"></p><h2 id="Java面向对象07-简单小结类与对象"><a href="#Java面向对象07-简单小结类与对象" class="headerlink" title="Java面向对象07 - 简单小结类与对象"></a>Java面向对象07 - 简单小结类与对象</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-5-数组 01 - 09</title>
      <link href="/liangjunyi.github.io/2022/10/19/java-ji-chu-5-shu-zu-01-09/"/>
      <url>/liangjunyi.github.io/2022/10/19/java-ji-chu-5-shu-zu-01-09/</url>
      
        <content type="html"><![CDATA[<h1 id="Java数组-01-06"><a href="#Java数组-01-06" class="headerlink" title="Java数组 01 - 06"></a>Java数组 01 - 06</h1><h2 id="Java数组01-什么是数组"><a href="#Java数组01-什么是数组" class="headerlink" title="Java数组01 - 什么是数组"></a>Java数组01 - 什么是数组</h2><ul><li>数组是相同数据类型的有序集合</li><li>可以通过下标访问元素</li></ul><h2 id="Java数组02-数组的声明和创建"><a href="#Java数组02-数组的声明和创建" class="headerlink" title="Java数组02 - 数组的声明和创建"></a>Java数组02 - 数组的声明和创建</h2><ul><li>声明数组变量的语法</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar;<span class="comment">//首选方法</span></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">dataType arrayRefVar[];<span class="comment">//效果相同，但不是首选方法,c/c++的习惯</span></span><br></pre></td></tr></tbody></table></figure><ul><li>Java使用<strong>new</strong>操作符来创建数组，语法如下</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar[] = <span class="keyword">new</span> <span class="title class_">dataType</span>[arraySize];</span><br></pre></td></tr></tbody></table></figure><ul><li>数组元素是通过索引访问的，数组索引从0开始</li><li>获取数组长度：<code>arrays.length</code></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[] nums;</span><br><span class="line">        nums = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="type">int</span>[] nums2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">        nums[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        nums[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        nums[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">        nums[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">        nums[<span class="number">4</span>] = <span class="number">5</span>;</span><br><span class="line">        nums[<span class="number">5</span>] = <span class="number">6</span>;</span><br><span class="line">        nums[<span class="number">6</span>] = <span class="number">7</span>;</span><br><span class="line">        nums[<span class="number">7</span>] = <span class="number">8</span>;</span><br><span class="line">        nums[<span class="number">8</span>] = <span class="number">9</span>;</span><br><span class="line">        nums[<span class="number">9</span>] = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++){</span><br><span class="line">            sum = nums[i]+sum;</span><br><span class="line">        }</span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">55</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Java数组03-三种初始化及内存分析"><a href="#Java数组03-三种初始化及内存分析" class="headerlink" title="Java数组03 - 三种初始化及内存分析"></a>Java数组03 - 三种初始化及内存分析</h2><p><img src="https://s2.loli.net/2022/11/03/94BtmxZClYP1Wiu.png" alt="image-20221103131715156"></p><p><img src="https://s2.loli.net/2022/11/03/Ox7RvWlrBTFtqkg.png" alt="image-20221103131904756"></p><p><img src="https://s2.loli.net/2022/11/03/APydFHz4x58Oj9p.png" alt="image-20221103132119730"></p><p><strong>三种初始化</strong></p><ul><li>静态初始化</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] a = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>};</span><br><span class="line">Man[] mans = {<span class="keyword">new</span> <span class="title class_">Man</span>(<span class="number">1</span>,<span class="number">1</span>), <span class="keyword">new</span> <span class="title class_">Man</span>(<span class="number">2</span>,<span class="number">2</span>)}</span><br></pre></td></tr></tbody></table></figure><ul><li>动态初始化</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">2</span>;</span><br></pre></td></tr></tbody></table></figure><ul><li>数组的默认初始化<ul><li>数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式悲隐式初始化。</li></ul></li></ul><p><strong>例子</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 静态初始化: 创建 + 赋值</span></span><br><span class="line">        <span class="type">int</span> [] a = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>};</span><br><span class="line">        System.out.println(a[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 动态初始化: 包含默认初始化</span></span><br><span class="line">        <span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        b[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">        System.out.println(b[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(b[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(b[<span class="number">2</span>]);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Java数组04-下标越界及小结"><a href="#Java数组04-下标越界及小结" class="headerlink" title="Java数组04 - 下标越界及小结"></a>Java数组04 - 下标越界及小结</h2><p>数组的四个基本特点</p><ul><li>长度固定，一旦被创建，大小不可改变</li><li>元素必须相同类型，不可以混合</li><li>可以是任何类型，基本或者引用类型</li><li>数组变量是引用类型，数组可以被看成对象，数组中的每个元素相当于该对象的成员变量。数组本身就是对象，Java中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型，数组对象本身是在堆中的。</li></ul><h2 id="Java数组05-数组的使用"><a href="#Java数组05-数组的使用" class="headerlink" title="Java数组05 - 数组的使用"></a>Java数组05 - 数组的使用</h2><ul><li>普通for循环</li><li>For-Each循环</li><li>数组作方法入参</li><li>数组作返回值</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[] arrays = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>};</span><br><span class="line"></span><br><span class="line"><span class="comment">//        //这种方式没有下标，方便打印数组元素，不方便更改</span></span><br><span class="line"><span class="comment">//        for (int array : arrays) {</span></span><br><span class="line"><span class="comment">//            System.out.println(array);</span></span><br><span class="line"><span class="comment">//        }</span></span><br><span class="line">        <span class="type">int</span> [] reverse = reverse(arrays);</span><br><span class="line">        printArray(reverse);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反转数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] reverse(<span class="type">int</span>[] arrays){</span><br><span class="line">        <span class="type">int</span> [] result = <span class="keyword">new</span> <span class="title class_">int</span>[arrays.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>,j=result.length-<span class="number">1</span>;i&lt;arrays.length;i++,j--){</span><br><span class="line">            result[j] = arrays[i];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 打印数组元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arrays)</span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;arrays.length;i++){</span><br><span class="line">            System.out.print(arrays[i]+<span class="string">" "</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Java数组06-二维数组"><a href="#Java数组06-二维数组" class="headerlink" title="Java数组06 - 二维数组"></a>Java数组06 - 二维数组</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[][] array = {{<span class="number">1</span>,<span class="number">2</span>},{<span class="number">2</span>,<span class="number">3</span>},{<span class="number">3</span>,<span class="number">4</span>},{<span class="number">4</span>,<span class="number">5</span>}};</span><br><span class="line"></span><br><span class="line">        printArray(array[<span class="number">0</span>]);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(array[<span class="number">2</span>][<span class="number">0</span>]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arrays)</span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;arrays.length;i++){</span><br><span class="line">            System.out.print(arrays[i]+<span class="string">" "</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Java数组07-Arrays类讲解"><a href="#Java数组07-Arrays类讲解" class="headerlink" title="Java数组07 - Arrays类讲解"></a>Java数组07 - Arrays类讲解</h2><p>print数组的时候</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.toString);</span><br></pre></td></tr></tbody></table></figure><p>排序</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(a)</span><br></pre></td></tr></tbody></table></figure><p>填充</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.fill()</span><br></pre></td></tr></tbody></table></figure><p>例子</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] a = {<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">909</span>,<span class="number">123</span>,<span class="number">21</span>,<span class="number">54</span>,<span class="number">7</span>};</span><br><span class="line"></span><br><span class="line">        Arrays.sort(a);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line"></span><br><span class="line">        Arrays.fill(a,<span class="number">2</span>,<span class="number">4</span>,<span class="number">0</span>); <span class="comment">//数组填充</span></span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">21</span>, <span class="number">54</span>, <span class="number">123</span>, <span class="number">909</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">54</span>, <span class="number">123</span>, <span class="number">909</span>]</span><br></pre></td></tr></tbody></table></figure><h2 id="Java数组08-冒泡排序"><a href="#Java数组08-冒泡排序" class="headerlink" title="Java数组08 - 冒泡排序"></a>Java数组08 - 冒泡排序</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo06</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[] l = {<span class="number">34</span>,<span class="number">12</span>,<span class="number">32</span>,<span class="number">15</span>,<span class="number">2</span>,<span class="number">8</span>};</span><br><span class="line">        System.out.println(Arrays.toString(l));</span><br><span class="line">        sort(l);</span><br><span class="line">        System.out.println(Arrays.toString(l));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] array)</span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span> ; i&lt; array.length;i++){</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt; array.length;j++){</span><br><span class="line">                <span class="keyword">if</span>(array[i]&gt;array[j]){</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> array[i];</span><br><span class="line">                    array[i] = array[j];</span><br><span class="line">                    array[j] = temp;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Java数组09-稀疏数组"><a href="#Java数组09-稀疏数组" class="headerlink" title="Java数组09 - 稀疏数组"></a>Java数组09 - 稀疏数组</h2><p><img src="https://s2.loli.net/2022/11/07/kIMpsfdxLVlPDT8.png" alt="image-20221107112813601"></p><p><img src="https://s2.loli.net/2022/11/07/UjZK75A9XsbESp6.png" alt="image-20221107112846068"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[][] array1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        array1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        array1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">"输出原始的数组"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : array1){</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> anInt : ints){</span><br><span class="line">                System.out.print(anInt+<span class="string">"\t"</span>);</span><br><span class="line">            }</span><br><span class="line">            System.out.println();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转化为稀疏数组保存</span></span><br><span class="line">        <span class="comment">//1.获取有效值的个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">11</span>;i++){</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">11</span>;j++) {</span><br><span class="line">                <span class="keyword">if</span> (array1[i][j]!=<span class="number">0</span>){</span><br><span class="line">                    sum++;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"======================"</span>);</span><br><span class="line">        System.out.println(<span class="string">"有效值个数:"</span>+sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个稀疏数组的数组</span></span><br><span class="line">        <span class="type">int</span>[][] array2=<span class="keyword">new</span> <span class="title class_">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">0</span>] =<span class="number">11</span>;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">1</span>] =<span class="number">11</span>;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">2</span>] =sum;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历了二维数组</span></span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;array1.length;i++){</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;array1[i].length;j++){</span><br><span class="line">                <span class="keyword">if</span>(array1[i][j]!=<span class="number">0</span>){</span><br><span class="line">                    count++;</span><br><span class="line">                    array2[count][<span class="number">0</span>] =i;</span><br><span class="line">                    array2[count][<span class="number">1</span>] =j;</span><br><span class="line">                    array2[count][<span class="number">2</span>] =array1[i][j];</span><br><span class="line"></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//输出稀疏数组</span></span><br><span class="line">        System.out.println(<span class="string">"稀疏数组"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;array2.length;i++){</span><br><span class="line">            System.out.println(array2[i][<span class="number">0</span>]+<span class="string">"\t"</span></span><br><span class="line">            +array2[i][<span class="number">1</span>]+<span class="string">"\t"</span></span><br><span class="line">            +array2[i][<span class="number">2</span>]+<span class="string">"\t"</span>);</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"======================"</span>);</span><br><span class="line">        System.out.println(<span class="string">"还原"</span>);</span><br><span class="line">        <span class="comment">//读取稀疏数组</span></span><br><span class="line">        <span class="type">int</span>[][] array3 = <span class="keyword">new</span> <span class="title class_">int</span>[array2[<span class="number">0</span>][<span class="number">0</span>]][array2[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;array2.length;i++){</span><br><span class="line">            array3[array2[i][<span class="number">0</span>]][array2[i][<span class="number">1</span>]] = array2[i][<span class="number">2</span>];</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"输出还原的数组"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints:array3){</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> anInt :ints){</span><br><span class="line">                System.out.print(anInt+<span class="string">"\t"</span>);</span><br><span class="line">            }</span><br><span class="line">            System.out.println();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">输出原始的数组</span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">2</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line">======================</span><br><span class="line">有效值个数:<span class="number">2</span></span><br><span class="line">稀疏数组</span><br><span class="line"><span class="number">11</span><span class="number">11</span><span class="number">2</span></span><br><span class="line"><span class="number">1</span><span class="number">2</span><span class="number">1</span></span><br><span class="line"><span class="number">2</span><span class="number">3</span><span class="number">2</span></span><br><span class="line">======================</span><br><span class="line">还原</span><br><span class="line">输出还原的数组</span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">2</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java方法 01 - 06</title>
      <link href="/liangjunyi.github.io/2022/10/15/java-ji-chu-4-fang-fa-01-06/"/>
      <url>/liangjunyi.github.io/2022/10/15/java-ji-chu-4-fang-fa-01-06/</url>
      
        <content type="html"><![CDATA[<h1 id="Java方法-01-06"><a href="#Java方法-01-06" class="headerlink" title="Java方法 01 - 06"></a>Java方法 01 - 06</h1><h2 id="Java方法01-什么是方法"><a href="#Java方法01-什么是方法" class="headerlink" title="Java方法01 - 什么是方法"></a>Java方法01 - 什么是方法</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 加法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>{</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Java方法02-方法的定义和调用"><a href="#Java方法02-方法的定义和调用" class="headerlink" title="Java方法02 - 方法的定义和调用"></a>Java方法02 - 方法的定义和调用</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型 参数名){</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>修饰符<ul><li>public</li><li>static</li><li>final</li><li>等</li></ul></li><li>返回值类型<ul><li>void</li><li>int</li><li>等</li></ul></li><li>方法名</li><li>参数类型<ul><li>形参</li><li>实参</li></ul></li><li>方法体</li></ul><h2 id="Java方法03-方法的重载"><a href="#Java方法03-方法的重载" class="headerlink" title="Java方法03 - 方法的重载"></a>Java方法03 - 方法的重载</h2><ul><li><p>在一个类中，有相同的函数名称，但是形参不同的函数</p></li><li><p>重载规则</p><ul><li>方法名必须相同</li><li>参数列表必须不同（可以是参数个数不同，顺序不同，类型不同）</li><li>方法返回值可以相同或者不同</li><li>只是返回值不同并不是方法重载</li></ul></li><li><p>实现理论</p><ul><li>方法名称相同时，编译器会根据调用方法的参数去匹配，如果匹配失败则报错</li></ul></li></ul><h2 id="Java方法04-命令行传递参数"><a href="#Java方法04-命令行传递参数" class="headerlink" title="Java方法04 - 命令行传递参数"></a>Java方法04 - 命令行传递参数</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;args.length;i++){</span><br><span class="line">            System.out.println(<span class="string">"args["</span>+i+<span class="string">"]"</span>+args[i]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/11/02/sHk9eGyO8Xhcniq.png" alt="image-20221102163556770"></p><p>必须在src文件夹下才能执行</p><p>在src目录下，输入正确的path来执行文件</p><p>参数可以直接跟在后面</p><h2 id="Java方法05-可变参数"><a href="#Java方法05-可变参数" class="headerlink" title="Java方法05 - 可变参数"></a>Java方法05 - 可变参数</h2><ul><li>在方法声明中，在指定参数类型后加一个省略号(…)</li><li>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明。</li></ul><p>例子</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Demo03</span> <span class="variable">demo03</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo03</span>();</span><br><span class="line">        demo03.test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>... i)</span>{</span><br><span class="line">        System.out.println(i[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(i[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(i[<span class="number">2</span>]);</span><br><span class="line">        System.out.println(i[<span class="number">3</span>]);</span><br><span class="line">        System.out.println(i[<span class="number">4</span>]);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Java方法06-递归讲解"><a href="#Java方法06-递归讲解" class="headerlink" title="Java方法06 - 递归讲解"></a>Java方法06 - 递归讲解</h2><p>阶乘</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> f(<span class="number">4</span>);</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> n)</span>{</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">return</span> f(n-<span class="number">1</span>)*n;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java流程控制 07 - 12</title>
      <link href="/liangjunyi.github.io/2022/10/11/java-ji-chu-3-liu-cheng-kong-zhi-07-12/"/>
      <url>/liangjunyi.github.io/2022/10/11/java-ji-chu-3-liu-cheng-kong-zhi-07-12/</url>
      
        <content type="html"><![CDATA[<h1 id="Java流程控制-07-12"><a href="#Java流程控制-07-12" class="headerlink" title="Java流程控制 07 - 12"></a>Java流程控制 07 - 12</h1><h2 id="Java流程控制07-DoWhile循环"><a href="#Java流程控制07-DoWhile循环" class="headerlink" title="Java流程控制07 - DoWhile循环"></a>Java流程控制07 - DoWhile循环</h2><ul><li>对于<strong>while</strong>而言，如果不满足条件则不能进入循环，但有时候我们需要即使不满足条件，也至少执行一次</li><li>do … while 至少执行一次</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>{</span><br><span class="line">    <span class="comment">// 代码语句</span></span><br><span class="line">}<span class="keyword">while</span>(布尔表达式);</span><br></pre></td></tr></tbody></table></figure><h2 id="Java流程控制08-For循环"><a href="#Java流程控制08-For循环" class="headerlink" title="Java流程控制08 - For循环"></a>Java流程控制08 - For循环</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化;布尔表达式;更新){</span><br><span class="line">    <span class="comment">//代码语句</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Java流程控制09-打印九九乘法表"><a href="#Java流程控制09-打印九九乘法表" class="headerlink" title="Java流程控制09 - 打印九九乘法表"></a>Java流程控制09 - 打印九九乘法表</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">forDemo04</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++){</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++){</span><br><span class="line">                System.out.print(j+<span class="string">"*"</span>+i+<span class="string">"="</span>+j*i);</span><br><span class="line">                System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">            }</span><br><span class="line">            System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>*<span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="number">1</span>*<span class="number">2</span>=<span class="number">2</span><span class="number">2</span>*<span class="number">2</span>=<span class="number">4</span></span><br><span class="line"><span class="number">1</span>*<span class="number">3</span>=<span class="number">3</span><span class="number">2</span>*<span class="number">3</span>=<span class="number">6</span><span class="number">3</span>*<span class="number">3</span>=<span class="number">9</span></span><br><span class="line"><span class="number">1</span>*<span class="number">4</span>=<span class="number">4</span><span class="number">2</span>*<span class="number">4</span>=<span class="number">8</span><span class="number">3</span>*<span class="number">4</span>=<span class="number">12</span><span class="number">4</span>*<span class="number">4</span>=<span class="number">16</span></span><br><span class="line"><span class="number">1</span>*<span class="number">5</span>=<span class="number">5</span><span class="number">2</span>*<span class="number">5</span>=<span class="number">10</span><span class="number">3</span>*<span class="number">5</span>=<span class="number">15</span><span class="number">4</span>*<span class="number">5</span>=<span class="number">20</span><span class="number">5</span>*<span class="number">5</span>=<span class="number">25</span></span><br><span class="line"><span class="number">1</span>*<span class="number">6</span>=<span class="number">6</span><span class="number">2</span>*<span class="number">6</span>=<span class="number">12</span><span class="number">3</span>*<span class="number">6</span>=<span class="number">18</span><span class="number">4</span>*<span class="number">6</span>=<span class="number">24</span><span class="number">5</span>*<span class="number">6</span>=<span class="number">30</span><span class="number">6</span>*<span class="number">6</span>=<span class="number">36</span></span><br><span class="line"><span class="number">1</span>*<span class="number">7</span>=<span class="number">7</span><span class="number">2</span>*<span class="number">7</span>=<span class="number">14</span><span class="number">3</span>*<span class="number">7</span>=<span class="number">21</span><span class="number">4</span>*<span class="number">7</span>=<span class="number">28</span><span class="number">5</span>*<span class="number">7</span>=<span class="number">35</span><span class="number">6</span>*<span class="number">7</span>=<span class="number">42</span><span class="number">7</span>*<span class="number">7</span>=<span class="number">49</span></span><br><span class="line"><span class="number">1</span>*<span class="number">8</span>=<span class="number">8</span><span class="number">2</span>*<span class="number">8</span>=<span class="number">16</span><span class="number">3</span>*<span class="number">8</span>=<span class="number">24</span><span class="number">4</span>*<span class="number">8</span>=<span class="number">32</span><span class="number">5</span>*<span class="number">8</span>=<span class="number">40</span><span class="number">6</span>*<span class="number">8</span>=<span class="number">48</span><span class="number">7</span>*<span class="number">8</span>=<span class="number">56</span><span class="number">8</span>*<span class="number">8</span>=<span class="number">64</span></span><br><span class="line"><span class="number">1</span>*<span class="number">9</span>=<span class="number">9</span><span class="number">2</span>*<span class="number">9</span>=<span class="number">18</span><span class="number">3</span>*<span class="number">9</span>=<span class="number">27</span><span class="number">4</span>*<span class="number">9</span>=<span class="number">36</span><span class="number">5</span>*<span class="number">9</span>=<span class="number">45</span><span class="number">6</span>*<span class="number">9</span>=<span class="number">54</span><span class="number">7</span>*<span class="number">9</span>=<span class="number">63</span><span class="number">8</span>*<span class="number">9</span>=<span class="number">72</span><span class="number">9</span>*<span class="number">9</span>=<span class="number">81</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Java流程控制10-增强for循环"><a href="#Java流程控制10-增强for循环" class="headerlink" title="Java流程控制10 - 增强for循环"></a>Java流程控制10 - 增强for循环</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(声明语句:表达式){</span><br><span class="line">    <span class="comment">//代码句子</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>例子</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">forDemo05</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[] numbers = {<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>};</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x:numbers){</span><br><span class="line">            System.out.println(x);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Java流程控制11-break、continue、goto"><a href="#Java流程控制11-break、continue、goto" class="headerlink" title="Java流程控制11 - break、continue、goto"></a>Java流程控制11 - break、continue、goto</h2><ul><li>break 退出循环</li><li>continue 退出当前一轮循环，进行下一轮</li><li>goto 不常用，不要求掌握</li></ul><h2 id="Java流程控制12-打印三角形及Debug"><a href="#Java流程控制12-打印三角形及Debug" class="headerlink" title="Java流程控制12 - 打印三角形及Debug"></a>Java流程控制12 - 打印三角形及Debug</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=x;i++){</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;=(<span class="number">2</span>*x-<span class="number">1</span>-(<span class="number">2</span>*i-<span class="number">1</span>))/<span class="number">2</span>;j++){</span><br><span class="line">                System.out.print(<span class="string">" "</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">2</span>*i-<span class="number">1</span>;j++){</span><br><span class="line">                System.out.print(<span class="string">"*"</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;=(<span class="number">2</span>*x-<span class="number">1</span>-(<span class="number">2</span>*i-<span class="number">1</span>))/<span class="number">2</span>;j++){</span><br><span class="line">                System.out.print(<span class="string">" "</span>);</span><br><span class="line">            }</span><br><span class="line">            System.out.println();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">         *         </span><br><span class="line">        ***        </span><br><span class="line">       *****       </span><br><span class="line">      *******      </span><br><span class="line">     *********     </span><br><span class="line">    ***********    </span><br><span class="line">   *************   </span><br><span class="line">  ***************  </span><br><span class="line"> ***************** </span><br><span class="line">*******************</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java流程控制 01 - 06</title>
      <link href="/liangjunyi.github.io/2022/10/05/java-ji-chu-3-liu-cheng-kong-zhi-01-06/"/>
      <url>/liangjunyi.github.io/2022/10/05/java-ji-chu-3-liu-cheng-kong-zhi-01-06/</url>
      
        <content type="html"><![CDATA[<h1 id="Java流程控制-01-06"><a href="#Java流程控制-01-06" class="headerlink" title="Java流程控制 01 - 06"></a>Java流程控制 01 - 06</h1><h2 id="Java流程控制01-用户交互Scanner"><a href="#Java流程控制01-用户交互Scanner" class="headerlink" title="Java流程控制01 - 用户交互Scanner"></a>Java流程控制01 - 用户交互Scanner</h2><p>java.util.Scanner，我们可以根据Scanner类来获取用户输入</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br></pre></td></tr></tbody></table></figure><p>通过Scanner类的next()与nextLine()方法获取输入的字符串，在读取前我们一般需要使用hasNext()与hasNextLine()判断是否还有输入的数据。</p><p>next()</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 创建一个scanner对象，用于接受键盘数据</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">"使用next方式接收 : "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()){</span><br><span class="line">            <span class="comment">//使用next接收</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            System.out.println(<span class="string">"输出内容为:"</span>+str);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//凡是属于IO流的类，使用完记得关掉节约资源</span></span><br><span class="line">        scanner.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用next方式接收 : </span><br><span class="line">hello world</span><br><span class="line">输出内容为:hello</span><br></pre></td></tr></tbody></table></figure><p>nextLine()</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">"使用nextline方式接受 : "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNextLine()){</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            System.out.println(<span class="string">"输出内容为:"</span>+str);</span><br><span class="line">        }</span><br><span class="line">        scanner.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用nextline方式接受 : </span><br><span class="line">hello world</span><br><span class="line">输出内容为:hello world</span><br></pre></td></tr></tbody></table></figure><ul><li>next()<ol><li>一定要读取到有效字符后才可以结束输入</li><li>对输入有效字符之前遇到的空白，next()方法会自动把它去掉</li><li>只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符</li><li>next()不能得到带有空格的字符串</li></ol></li><li>nextLine()<ol><li>以Enter为结束符，也就是说nextLine()方法返回的是输入回车前的所有字符</li><li>可以获得空白</li></ol></li></ul><h2 id="Java流程控制02-Scanner进阶使用"><a href="#Java流程控制02-Scanner进阶使用" class="headerlink" title="Java流程控制02 - Scanner进阶使用"></a>Java流程控制02 - Scanner进阶使用</h2><p>判断输入类型</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"请输入整数:"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNextInt()){</span><br><span class="line">            i = scanner.nextInt();</span><br><span class="line">            System.out.println(<span class="string">"整体数据"</span> + i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"输入的不是整数数据"</span>);</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"请输入小数"</span>);</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNextFloat()){</span><br><span class="line">            f = scanner.nextFloat();</span><br><span class="line">            System.out.println(<span class="string">"小数数据"</span>+f);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span>{</span><br><span class="line">            System.out.println(<span class="string">"输入的不是小数数据"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>许输入多个数字，求总和和平均数，每输入一个数字用回车确认通过输入非数字来结束输入并输出结果</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">//允许输入多个数字，求总和和平均数，每输入一个数字用回车确认通过输入非数字来结束输入并输出结果</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//和</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过循环判断是否还有输入，在内部求和</span></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextDouble()) {</span><br><span class="line">            <span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> scanner.nextDouble();</span><br><span class="line">            m = m + <span class="number">1</span>;</span><br><span class="line">            sum = sum + x;</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"平均数"</span>+(sum/m));</span><br><span class="line">        System.out.println(<span class="string">"和"</span>+sum);</span><br><span class="line">        scanner.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Java流程控制03-用顺序结构"><a href="#Java流程控制03-用顺序结构" class="headerlink" title="Java流程控制03 - 用顺序结构"></a>Java流程控制03 - 用顺序结构</h2><p>基本结构</p><h2 id="Java流程控制04-if选择结构"><a href="#Java流程控制04-if选择结构" class="headerlink" title="Java流程控制04 - if选择结构"></a>Java流程控制04 - if选择结构</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式){</span><br><span class="line"><span class="comment">//如果表达式为true执行的语句</span></span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">    <span class="comment">//如果表达式为false执行的语句</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Java流程控制05-Switch选择结构"><a href="#Java流程控制05-Switch选择结构" class="headerlink" title="Java流程控制05 - Switch选择结构"></a>Java流程控制05 - Switch选择结构</h2><p>语法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression){</span><br><span class="line">    <span class="keyword">case</span> value:</span><br><span class="line">        <span class="comment">//语句</span></span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">case</span> value:</span><br><span class="line">        <span class="comment">//语句</span></span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">default</span>:<span class="comment">//可选</span></span><br><span class="line">        <span class="comment">//语句</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>例子</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">switchDemo01</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">char</span> <span class="variable">grade</span> <span class="operator">=</span> <span class="string">'C'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (grade){</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'A'</span>:</span><br><span class="line">                System.out.println(<span class="string">"优秀"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'B'</span>:</span><br><span class="line">                System.out.println(<span class="string">"良好"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">                System.out.println(<span class="string">"及格"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">                System.out.println(<span class="string">"再接再厉"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'E'</span>:</span><br><span class="line">                System.out.println(<span class="string">"挂科"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"未知等级"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">及格</span><br></pre></td></tr></tbody></table></figure><p>注意:</p><p>如果没有加 <strong>break</strong> 则会造成 <strong>switch 穿透</strong>，一直执行下去到有break或者除了switch</p><h2 id="Java流程控制06-While循环"><a href="#Java流程控制06-While循环" class="headerlink" title="Java流程控制06 - While循环"></a>Java流程控制06 - While循环</h2><ul><li>while 是最基本的循环，它的结构为:</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(布尔表达式){</span><br><span class="line"><span class="comment">//循环内容</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>例子</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">whileDemo01</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i&lt;<span class="number">100</span>){</span><br><span class="line">            i++;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础语法 07 - 12</title>
      <link href="/liangjunyi.github.io/2022/09/30/java-ji-chu-2-ji-chu-yu-fa-07-12/"/>
      <url>/liangjunyi.github.io/2022/09/30/java-ji-chu-2-ji-chu-yu-fa-07-12/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础语法-07-12"><a href="#Java基础语法-07-12" class="headerlink" title="Java基础语法 07 - 12"></a>Java基础语法 07 - 12</h1><h2 id="Java基础语法07-基本运算符"><a href="#Java基础语法07-基本运算符" class="headerlink" title="Java基础语法07 - 基本运算符"></a>Java基础语法07 - 基本运算符</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">long</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">123123123123123L</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line">        <span class="type">short</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">e</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(a+b+c+d); <span class="comment">//Long</span></span><br><span class="line">        System.out.println(b+c+d); <span class="comment">//Int</span></span><br><span class="line">        System.out.println(c+d); <span class="comment">//Int</span></span><br><span class="line">        System.out.println(f%e);<span class="comment">//取余</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123123123123264</span></span><br><span class="line"><span class="number">141</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Java基础语法08-自增自减运算符"><a href="#Java基础语法08-自增自减运算符" class="headerlink" title="Java基础语法08 - 自增自减运算符"></a>Java基础语法08 - 自增自减运算符</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">//++ -- 自增自减，一元运算符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a++; <span class="comment">//对于a来说加1了，对于b来说先得到了a的值，所以是3</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ++a; <span class="comment">//对于c来说先等a加上了1，再得到a的值，所以是5</span></span><br><span class="line"></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//幂运算 2^3 很多运算，我们会使用工具来操作</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">pow</span> <span class="operator">=</span> Math.pow(<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(pow);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">9.0</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Java基础语法09-逻辑运算符、位运算符"><a href="#Java基础语法09-逻辑运算符、位运算符" class="headerlink" title="Java基础语法09 - 逻辑运算符、位运算符"></a>Java基础语法09 - 逻辑运算符、位运算符</h2><p>逻辑运算符</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// and or not</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">a</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"a &amp;&amp; b:"</span>+(a&amp;&amp;b));</span><br><span class="line">        System.out.println(<span class="string">"a || b:"</span>+(a||b));</span><br><span class="line">        System.out.println(<span class="string">"! (a &amp;&amp; b):"</span>+!(a&amp;&amp;b));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a &amp;&amp; b:<span class="literal">false</span></span><br><span class="line">a || b:<span class="literal">true</span></span><br><span class="line">! (a &amp;&amp; b):<span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><p>位运算符</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * A = 0011 1100</span></span><br><span class="line"><span class="comment">        * B = 0000 1101</span></span><br><span class="line"><span class="comment">        * ----------------------</span></span><br><span class="line"><span class="comment">        * A &amp; B = 0000 1100</span></span><br><span class="line"><span class="comment">        * A | B = 0011 1101</span></span><br><span class="line"><span class="comment">        * A ^ B = 0011 0001</span></span><br><span class="line"><span class="comment">        * ~B = 1111 0010</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 2*8 = 16    2*2*2*2</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        System.out.println(<span class="number">2</span>&lt;&lt;<span class="number">3</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">16</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Java基础语法10-三元运算符及小结"><a href="#Java基础语法10-三元运算符及小结" class="headerlink" title="Java基础语法10 - 三元运算符及小结"></a>Java基础语法10 - 三元运算符及小结</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// x ? y : z</span></span><br><span class="line">        <span class="comment">// 如果x为true，则结果为y，否则结果为z</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> score&lt;<span class="number">60</span> ? <span class="string">"不及格"</span>:<span class="string">"及格"</span>;</span><br><span class="line">        System.out.println(type);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">及格</span><br></pre></td></tr></tbody></table></figure><h2 id="Java基础语法11-包机制"><a href="#Java基础语法11-包机制" class="headerlink" title="Java基础语法11 - 包机制"></a>Java基础语法11 - 包机制</h2><ul><li>为了更好的组织类，Java增加了包机制</li><li>一般利用公司域名倒置为包名</li><li>import 来导入包</li></ul><h2 id="Java基础语法12-JavaDoc"><a href="#Java基础语法12-JavaDoc" class="headerlink" title="Java基础语法12 - JavaDoc"></a>Java基础语法12 - JavaDoc</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> junyi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo08</span> {</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础语法 01 - 06</title>
      <link href="/liangjunyi.github.io/2022/09/26/java-ji-chu-2-ji-chu-yu-fa-01-06/"/>
      <url>/liangjunyi.github.io/2022/09/26/java-ji-chu-2-ji-chu-yu-fa-01-06/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础语法-01-06"><a href="#Java基础语法-01-06" class="headerlink" title="Java基础语法 01 - 06"></a>Java基础语法 01 - 06</h1><h2 id="Java基础语法01-注释"><a href="#Java基础语法01-注释" class="headerlink" title="Java基础语法01 - 注释"></a>Java基础语法01 - 注释</h2><ul><li>单行注释<ul><li>//</li></ul></li><li>多行注释<ul><li>/* */</li></ul></li><li>文档注释<ul><li>/** */</li></ul></li></ul><h2 id="Java基础语法02-标识符和关键字"><a href="#Java基础语法02-标识符和关键字" class="headerlink" title="Java基础语法02 - 标识符和关键字"></a>Java基础语法02 - 标识符和关键字</h2><ul><li>所有标识符开头，都已字母大小写，美元($)或者下划线(_)</li><li>首字母之后也尽量不要使用特殊符号</li><li>不能用关键字作变量名或方法名</li><li>标识符大小写敏感</li></ul><h2 id="Java基础语法03-数据类型"><a href="#Java基础语法03-数据类型" class="headerlink" title="Java基础语法03 - 数据类型"></a>Java基础语法03 - 数据类型</h2><ul><li><p>强类型语言</p><ul><li>要求变量的使用要严格符合规定，所有变量都必须先定义后使用</li></ul></li><li><p>弱类型语言</p></li><li><p>Java的数据类型分为两大类</p><ul><li>基本类型(primitive type)</li><li>引用类型(referen type)</li></ul></li></ul><p><img src="https://s2.loli.net/2022/10/31/T5em7hULzOFjdW1.png" alt="image-20221031115959286"></p><h2 id="Java基础语法04-数据类型"><a href="#Java基础语法04-数据类型" class="headerlink" title="Java基础语法04 - 数据类型"></a>Java基础语法04 - 数据类型</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 整数扩展 二进制0b 十进制 八进制0 十六进制0x</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">010</span>; <span class="comment">//八进制</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">0x10</span>; <span class="comment">//十六进制</span></span><br><span class="line"></span><br><span class="line">        System.out.println(i);</span><br><span class="line">        System.out.println(i2);</span><br><span class="line">        System.out.println(i3);</span><br><span class="line">        System.out.println(<span class="string">"==================================================="</span>);</span><br><span class="line">        <span class="comment">//===================================================</span></span><br><span class="line">        <span class="comment">//浮点数拓展？ 银行业务怎么表示?</span></span><br><span class="line">        <span class="comment">//BigDecimal 数学工具类</span></span><br><span class="line">        <span class="comment">//===================================================</span></span><br><span class="line">        <span class="comment">//float 有限 离散 含入误差 大约 接近但不等于</span></span><br><span class="line">        <span class="comment">//double</span></span><br><span class="line">        <span class="comment">//避免使用浮点数进行比较</span></span><br><span class="line"></span><br><span class="line">        <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">0.1f</span>; <span class="comment">//0.1</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">1.0</span>/<span class="number">10</span>; <span class="comment">//0.1</span></span><br><span class="line"></span><br><span class="line">        System.out.println(f==d);</span><br><span class="line"></span><br><span class="line">        <span class="type">float</span> d1=<span class="number">231313123123123132f</span>;</span><br><span class="line">        <span class="type">float</span> <span class="variable">d2</span> <span class="operator">=</span> d1+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(d1==d2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"==================================================="</span>);</span><br><span class="line">        <span class="comment">//===================================================</span></span><br><span class="line">        <span class="comment">//字符拓展</span></span><br><span class="line">        <span class="comment">//===================================================</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">'a'</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">'中'</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        System.out.println((<span class="type">int</span>)c1);</span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        System.out.println((<span class="type">int</span>)c2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//所有的字符本质还是数字</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="string">'\u0061'</span>;</span><br><span class="line">        System.out.println(c3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转义字符</span></span><br><span class="line">        <span class="comment">//\t</span></span><br><span class="line">        <span class="comment">//\n</span></span><br><span class="line">        System.out.println(<span class="string">"Hello\nWorld"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//对象 从内存分析</span></span><br><span class="line">        System.out.println(<span class="string">"==================================================="</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">"hello world"</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">"hello world"</span>);</span><br><span class="line">        System.out.println(sa==sb);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="string">"hello world"</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sd</span> <span class="operator">=</span> <span class="string">"hello world"</span>;</span><br><span class="line">        System.out.println(sc==sd);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line">===================================================</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">===================================================</span><br><span class="line">a</span><br><span class="line"><span class="number">97</span></span><br><span class="line">中</span><br><span class="line"><span class="number">20013</span></span><br><span class="line">a</span><br><span class="line">Hello</span><br><span class="line">World</span><br><span class="line">===================================================</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Java基础语法05-类型转换"><a href="#Java基础语法05-类型转换" class="headerlink" title="Java基础语法05 - 类型转换"></a>Java基础语法05 - 类型转换</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>)i;</span><br><span class="line"></span><br><span class="line">        System.out.println(i);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">128</span><br><span class="line">-128</span><br></pre></td></tr></tbody></table></figure><p>因为byte的最大值是127，所以赋值128给它会出问题，内存溢出</p><p>这种转换是强制转换</p><ul><li><em>（类型）变量名</em></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> i;</span><br><span class="line"></span><br><span class="line">        System.out.println(i);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">128</span></span><br><span class="line"><span class="number">128.0</span></span><br></pre></td></tr></tbody></table></figure><p>因为double的上限更高，所以不需要强制转换</p><p>这种转换是自动转换</p><p><strong>注意点</strong></p><ol><li>不能对布尔值转换</li><li>不能把对象转为不相干类型</li><li>把高容量转为低容量时强制转换</li><li>转换时可能遇到内存溢出，或者精度问题</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> i;</span><br><span class="line"></span><br><span class="line">        System.out.println(i);</span><br><span class="line">        System.out.println(b);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"============"</span>);</span><br><span class="line">        System.out.println((<span class="type">int</span>)<span class="number">23.7</span>);</span><br><span class="line">        System.out.println((<span class="type">int</span>)-<span class="number">45.89f</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"============"</span>);</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">'a'</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> c+<span class="number">1</span>;</span><br><span class="line">        System.out.println(d);</span><br><span class="line">        System.out.println((<span class="type">char</span>)d);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">128</span></span><br><span class="line"><span class="number">128.0</span></span><br><span class="line">============</span><br><span class="line"><span class="number">23</span></span><br><span class="line">-<span class="number">45</span></span><br><span class="line">============</span><br><span class="line"><span class="number">98</span></span><br><span class="line">b</span><br></pre></td></tr></tbody></table></figure><p><strong>容易犯的错误</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">//操作比较大的数的时候，注意溢出问题</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">money</span>  <span class="operator">=</span> <span class="number">10_0000_0000</span>;</span><br><span class="line">        System.out.println(money);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">years</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> money*years;</span><br><span class="line">        System.out.println(years*money);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">total3</span> <span class="operator">=</span> money*((<span class="type">long</span>)years);</span><br><span class="line">        System.out.println(total3);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1000000000</span></span><br><span class="line">-<span class="number">1474836480</span></span><br><span class="line"><span class="number">20000000000</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Java基础语法06-变量"><a href="#Java基础语法06-变量" class="headerlink" title="Java基础语法06 - 变量"></a>Java基础语法06 - 变量</h2><ul><li>Java是一种强类型语言，每个变量必须声明类型</li><li>Java变量是程序中最基本的存储单元，其要素包括变量名，变量类型和作用域。</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type varName [=value] [{,varName[=value]}];</span><br><span class="line">//数据类型 变量名 = 值; 可以使用逗号隔开声明多个同类型变量。</span><br></pre></td></tr></tbody></table></figure><ul><li>变量作用域<ul><li>类变量 （static）</li><li>实例变量</li><li>局部变量</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span> {</span><br><span class="line">    <span class="comment">//类变量 static</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">double</span> <span class="variable">salary</span> <span class="operator">=</span> <span class="number">2500</span>;</span><br><span class="line">    <span class="comment">//实例变量：从属于对象,不自行初始化，则使用默认值</span></span><br><span class="line">    <span class="comment">//布尔值，默认是false</span></span><br><span class="line">    <span class="comment">//除了基本类型，其余默认值都是null</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// main 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 局部变量：必须声明和初始化值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">        <span class="type">Demo04</span> <span class="variable">demo04</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo04</span>();</span><br><span class="line">        System.out.println(demo04.age);</span><br><span class="line">        System.out.println(demo04.name);</span><br><span class="line"></span><br><span class="line">        System.out.println(salary);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 其他方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="literal">null</span></span><br><span class="line"><span class="number">2500.0</span></span><br></pre></td></tr></tbody></table></figure><ul><li>常量</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05</span> {</span><br><span class="line">    <span class="comment">//修饰符不存在先后顺序</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        System.out.println(PI);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/11/01/Jdzm5LjQuVpSo6q.png" alt="image-20221101155350887"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java入门04 - Java程序运行机制</title>
      <link href="/liangjunyi.github.io/2022/09/22/java-ji-chu-1-ru-men-04-java-cheng-xu-yun-xing-ji-zhi/"/>
      <url>/liangjunyi.github.io/2022/09/22/java-ji-chu-1-ru-men-04-java-cheng-xu-yun-xing-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Java入门04-Java程序运行机制"><a href="#Java入门04-Java程序运行机制" class="headerlink" title="Java入门04 - Java程序运行机制"></a>Java入门04 - Java程序运行机制</h1><ul><li>编译型</li><li>解释型</li><li>程序运行机制</li></ul><p><img src="https://s2.loli.net/2022/10/31/8Up3O16WGHjNs2q.png" alt="image-20221031110926750"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java入门03 - 第一个Java程序</title>
      <link href="/liangjunyi.github.io/2022/09/18/java-ji-chu-1-ru-men-03-di-yi-ge-java-cheng-xu/"/>
      <url>/liangjunyi.github.io/2022/09/18/java-ji-chu-1-ru-men-03-di-yi-ge-java-cheng-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="Java入门03-第一个Java程序"><a href="#Java入门03-第一个Java程序" class="headerlink" title="Java入门03 - 第一个Java程序"></a>Java入门03 - 第一个Java程序</h1><ol><li><p>随便创建一个文件夹，存放代码</p></li><li><p>新建一个java文件</p><ul><li>文件后缀名为.java</li><li>Hello.java</li><li>注意：系统可能没显示文件后缀名</li></ul></li><li><p>编写代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span>{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line">System.out.print(<span class="string">"Hello,World!"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>编译java文件</p><ul><li><p>在目标文件夹下打开cmd</p></li><li><pre><code class="bash">javac Hello.java<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   - 生成一个Hello.class文件</span><br><span class="line"></span><br><span class="line">5. 运行class文件</span><br><span class="line"></span><br><span class="line">   - 在目标文件夹下打开cmd</span><br><span class="line"></span><br><span class="line">   - ```bash</span><br><span class="line">     java Hello</span><br></pre></td></tr></tbody></table></figure></code></pre></li><li><p>运行结果在命令行界面显示</p></li></ul></li></ol><h2 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h2><ol><li>每个单词的大小写问题，<strong>java大小写敏感</strong></li><li>尽量使用英文</li><li>文件名和类名必须一致，且首字母大写</li><li>符号使用为中文</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java入门02 - Java开发环境搭建</title>
      <link href="/liangjunyi.github.io/2022/09/17/java-ji-chu-1-ru-men-02-java-kai-fa-huan-jing-da-jian/"/>
      <url>/liangjunyi.github.io/2022/09/17/java-ji-chu-1-ru-men-02-java-kai-fa-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java入门01 - JDK JRE JVM</title>
      <link href="/liangjunyi.github.io/2022/09/13/java-ji-chu-1-ru-men-01-jdk-jre-jvm/"/>
      <url>/liangjunyi.github.io/2022/09/13/java-ji-chu-1-ru-men-01-jdk-jre-jvm/</url>
      
        <content type="html"><![CDATA[<h1 id="JDK-JRE-JVM"><a href="#JDK-JRE-JVM" class="headerlink" title="JDK JRE JVM"></a>JDK JRE JVM</h1><ul><li>JDK : Java Development Kit</li><li>JRE : Java Runtime Environment</li><li>JVM : JAVA Virtual Machine</li></ul><p><img src="https://s2.loli.net/2022/10/28/jEJ7ztaXnwkgCNu.png" alt="image-20221028120416910"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ascenda Hotel Booking Project</title>
      <link href="/liangjunyi.github.io/2022/09/09/project-ascenda-hotel-booking/"/>
      <url>/liangjunyi.github.io/2022/09/09/project-ascenda-hotel-booking/</url>
      
        <content type="html"><![CDATA[<h1 id="Ascenda-Hotel-Booking-Project-Report"><a href="#Ascenda-Hotel-Booking-Project-Report" class="headerlink" title="Ascenda Hotel Booking Project Report"></a>Ascenda Hotel Booking Project Report</h1><h2 id="Members"><a href="#Members" class="headerlink" title="Members"></a>Members</h2><ul><li>Liang Junyi</li><li>Devanshi Joshi</li><li>Fu Meihui</li><li>Huy Nguyen</li></ul><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Ascenda is a hotel booking system that allows users to make hotel reservations seamlessly. With the boom of the Millennial traveler, now more than 700 million people are expected to book primarily online by 2023. With that in mind, we are working on a hotel booking system software where guests can choose how long they will stay, the type of room they want, get add-ons, and pay securely online through a payment platform. The system will incorporate the following features, with updates to come in the future:</p><ol><li>A fast text-based autocomplete search that can suggest relevant places / destinations as users type a destination</li><li>For a given destination, the dates of stay and number of rooms/guests, the website will return a list of matching hotels as well as the cheapest room for each hotel.</li><li>For a given hotel, the system will make an API call to provide a list of all matching room types that can be provided by the specified hotel.</li><li>Once decided, a customer will make their booking and provide payment via a payment gateway. The booking information is then stored in a database with some security features implemented to ensure user privacy.</li></ol><p><strong>Video link:</strong></p><p><a href="https://github.com/joshidevanshi/HotelbookingsysG8/blob/main/Introduce.mp4">https://github.com/joshidevanshi/HotelbookingsysG8/blob/main/Introduce.mp4</a></p><h2 id="System-Design-and-Implementation"><a href="#System-Design-and-Implementation" class="headerlink" title="System Design and Implementation"></a>System Design and Implementation</h2><ul><li>Front end: HTML, CSS and Javascript</li><li>Back end: Django</li><li>Database: MongoDB, sqlite</li><li>Software Development Diagrams: Figma</li></ul><h2 id="Use-case-diagram"><a href="#Use-case-diagram" class="headerlink" title="Use case diagram"></a>Use case diagram</h2><p>At the beginning of our implementation, we started with analyzing the requirements and summarizing them with use cases. According to the function and feature requirements given by Ascenda Loyalty, we came up with the following nine use cases for our hotel booking system:</p><ol><li>Search for hotels (at a certain destination) </li><li>Search for rooms </li><li>View list of hotels (and sort/filter based on user preference) </li><li>View list of rooms (based on the user’s search parameters)</li><li>Book a room</li><li>Login </li><li>Register</li><li>Check booking history </li><li>Booking Cancellation</li></ol><p>In order to help us better understand this system and the relationship between use cases and actors, a use case diagram is created.</p><p>From the end users’ perspective, the relationships between these use cases and their possible interactions with this hotel booking system can be visually represented by the use diagram below</p><p><img src="https://lh5.googleusercontent.com/5H_kUlcp1tpYpGI6kNRuoUTZERpQjvEGB-fcOtyDHdExEpQmsQwZ_oU_9IcrWYfXF05omByIynUKI6FD85P3MW0CDlXQlqXfwMiPX6zR-Bnl7co9D-vtcPMJpy1JR6p-AWClCfOtXljnJRbQcXqjQpJYTu4aVQoG2MGxoW-YM8TcZhd2UkLVje53og" alt="img"></p><h2 id="Class-diagram"><a href="#Class-diagram" class="headerlink" title="Class diagram"></a>Class diagram</h2><p>A UML class diagram is also created to better depict the structure of our system by showing the system’s classes, their attributes, operations and the relationship among these objects.</p><p><img src="https://lh4.googleusercontent.com/7BQ0Da1ZNzWbFJUHBK3PsUR35wCJLRqtW3qt-zwMwppnKmLPeaGI4GQyuoDIu6Fwnj4j1uBzqLdMJ21JGz9gAw1hcSbW6NLQ2bvnNA4fveK1PKKVyAwa2zoI139wp5tGiPsbXZgNP5JUfw6uaMGo84c_0T5LJVZ6buWSzjne4P88zJhNnqf7ty5CbQ" alt="img"></p><h2 id="Software-Development-Process-and-Risk-Analysis"><a href="#Software-Development-Process-and-Risk-Analysis" class="headerlink" title="Software Development Process and Risk Analysis"></a>Software Development Process and Risk Analysis</h2><p>Software development process:During discussion, we identified a software development processes that align with our implementation plan: rapid prototyping - easy to implement but also very time consuming </p><p>After project meeting 1, we’ve decided to apply rapid prototyping for our software development process. As such we will be creating the front end of the website on figma to implement the required features while we work on making each feature functional using the backend code. </p><p>Risks of using this technique:</p><ul><li>Might be time consuming to make the prototype and then translate it into code</li><li>We have inadequate experience in web development and personal data security making the process of prototyping the actual working website will be slower.</li></ul><p>However we can mitigate these risks by:</p><ul><li>Integrating snippets of the HTML, CSS code given in figma to implement the features for the front end of the website to replicate the figma template we create into front end code</li><li>We can divide the tasks wisely among us so that each of us can learn and contribute to the making of the website. This will make the process of learning for us more effective and the creation of the actual working website prototype faster.</li></ul><h2 id="How-to-run-the-project"><a href="#How-to-run-the-project" class="headerlink" title="How to run the project"></a>How to run the project</h2><p>Our project website has to be locally hosted to run on the user’s computer. In order to do so, follow the steps listed here:<br><strong>Step 1:</strong> </p><p>Open the command terminal on your device. <em>cd</em> to the folder where you would like to clone the project.<br><strong>Step 2:</strong> </p><p>In the desired location, clone the project by entering: </p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/joshidevanshi/HotelbookingsysG8.git</span><br></pre></td></tr></tbody></table></figure><p><strong>Step 3:</strong> </p><p>Create a virtual environment using the command:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv venv</span><br></pre></td></tr></tbody></table></figure><p><strong>Step 4:</strong> </p><p>Activate this virtual environment using:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for Mac → $ source venv/bin/activate</span><br><span class="line"></span><br><span class="line">for Windows → &gt; venv/bin/activate</span><br></pre></td></tr></tbody></table></figure><p><strong>Step 5:</strong></p><p>cd hbsproject<br><strong>Step 6:</strong></p><p>Enter these 3 commands: </p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py makemigrations</span><br><span class="line"></span><br><span class="line">python3 manage.py migrate </span><br><span class="line"></span><br><span class="line">python3 manage.py runserver</span><br></pre></td></tr></tbody></table></figure><p><strong>Step 7:</strong></p><p>Paste the link that appears as shown here:</p><p><img src="https://lh3.googleusercontent.com/_hYQ4Ot4EYV_T_k8WnKYprxN7dku9fFPPEncczod_AM4i1NN6PSw5nIvMx7nr7EgTlTXUlU0fbWNSxkvBLPCxjhE7Cei95awh-rrJTE80G9Cj3afY5T3xr2PLnLRE9Hr_E5WIb5wBJdSAtzJnNmVWUsQQn4okqZwgjltSzF2sMd3YXlXF9eeDho1kA" alt="img"></p><p><strong>Step 8:</strong></p><p>To end the session, simply quit using Control-C as mentioned in the image above. </p><h2 id="Front-end"><a href="#Front-end" class="headerlink" title="Front end"></a>Front end</h2><ul><li><p>expanding cards</p><p><img src="https://lh4.googleusercontent.com/_qRzlUME5SVAYF1isWFH_rV7_GYAjemgEk3YpPHVEfbHd7F1z17eDgb_xckyqTLJmvoqJ3QO0wjvxRtVb8Ev-UHkzESJks7-Ki19uH4idpeBXCJqqAJPjL6Mzktvj4VJqDP_4N0te3fscEWdTbhClqkL6zWzjXWis6Sw0e3rJWQjFE8LxTog315WQA" alt="img"></p></li><li><p>Sticky Navbar</p><p><img src="https://lh4.googleusercontent.com/yZ4EPAPk3ZdEHOsjZx-qxIDCGWPGkaSzgWoZol8GDIv_f8OcrfvbmYGtq_rxLuLWto5iweMWEbeqSEydh9tG9oQM5tSpy9nMsjvi7pCZsio4FmJ3pF9guav6NiymNyfTy907iWQGf3t3eb8MKmpKcVbyTNHhXH15t4O0pPrh5oMumjV7r7kmSDP7QA" alt="image-20220813190018124"></p></li><li><p>Rotating Navigation Animation</p><p><img src="https://lh3.googleusercontent.com/DK8ZNqajqCFmoF2P0hvVtMO-lmr6GV2315A9lMRo_GrP8FDD_dxzuSpxdWZD5ao6rD54LYuIsmDQayWv4smaxzdsr7GV-Kdu7sdsJzqFRjuUEKUAVH6cB_BEI1jzM_OG4Wrn1taUK1BktNQu-Bij-8x_KAmbJDw8Xe_70BPbwmjr0Mf11iTwbbdl_w" alt="img"></p></li><li><p>Form Wave</p><p><img src="https://lh3.googleusercontent.com/98LHzF6wfuywFuBLSLD3W4h_k6znOZeQVtXY4kn3trQ4sIDxan2lQNb53pc4XLQJDn1REzUN7l2lq-X1LTs5mnG0DPzKIK0C2L6bJa7K-yPhSripZu5mpoWlX4jDAMy1RU9WQKCIlhDocunxdgSxGQIlTAMl17nHBdNR-vDSc-bxeow1b3Q5cEgNkg" alt="1"></p></li></ul><p><strong>Resource :</strong><a href="https://github.com/bradtraversy/50projects50days"> https://github.com/bradtraversy/50projects50days</a></p><p><strong>Engineering challenges:</strong> With the use of too many CSS files, the CSS in different files conflict with each other. The way to solve it is to open the html by the browser and use f12 to open the debug mode and change the CSS on the browser first. After finishing online, we can then change the CSS file locally. </p><h2 id="Basic-features"><a href="#Basic-features" class="headerlink" title="Basic features"></a>Basic features</h2><h3 id="Feature-1-Destination-search"><a href="#Feature-1-Destination-search" class="headerlink" title="Feature 1: Destination search"></a>Feature 1: Destination search</h3><p>In order to implement a fast text-based autocomplete search, we’ve used Jquery - a Javascript library to first make an API call to the json data provided by Ascenda as user types a destination. To make this a smooth experience for users, we’ve adjusted the drop-down list so that it will only display the top 20 searches instead of the entire data. This not only reduces the loading time, but also makes the UI look more visually appealing in the final product.</p><p>With the destination, number of guests, number of rooms and check in , check out date selected, after the user types the search button, our backend will get the user’s data by request.post method. After processing the data, we generate an API link. Calling the API link, we get the hotel data and navigate users to the HotelList page.</p><p><strong>Engineering challenges:</strong> The API here can not get the information by first calling, we need to let it sleep for some seconds and call the API again to get the data.</p><h3 id="Feature-2-Hotel-Search-Results"><a href="#Feature-2-Hotel-Search-Results" class="headerlink" title="Feature 2: Hotel Search Results"></a>Feature 2: Hotel Search Results</h3><p>After getting the information which users give in Feature 1, we have a HotelList page to list all the hotels that meet the condition. Because the hotel list is always very long, we do the pagination here.</p><p><img src="https://lh3.googleusercontent.com/5_u7vCeJTUmzvBxfkNWLakcYasPFr9fB-wwJ_G5XwI2AGfBo0ImhtCUUTyg9e1xEZsOjbbHBxbeQ2t5mG-1Z5HjBpckV3ZNPaJRTM-tmtyLz5waixKIdyGv6OOUUGZq-iTOzZrPij9WI36bK5Mu8_waPmDTZWX6p2NmLGb2Vf6wtOo3ivE-twcH4WQ" alt="image-20220813193053272"></p><p>Users can adjust the page by pre or next button to go to adjacent pages, they also can type the page number they want in the input box then type go to button to the destination page.</p><p>If there is no hotel available by user’s information. For example, users search for 123abc as a destination. We will show information to inform users there is no hotel available. Also if the page number that user key in is an invalid page number like -1,abc or 100 (which exceed the maximum page number), we will also give the same information to inform the user there is no hotel available.</p><p><strong>Engineering challenges:</strong> Rendering all the hotels at same time requires a very long time. The way to solve it is using pagination.</p><h3 id="Feature-3-Hotel-Room-Details"><a href="#Feature-3-Hotel-Room-Details" class="headerlink" title="Feature 3: Hotel Room Details"></a>Feature 3: Hotel Room Details</h3><p>In the Hotel List page mentioned in Feature 2, users can click onto each hotel for more details. This is implemented as Feature 3. Rating, a brief introduction and the location information of the hotel with a map of the surrounding can be found on this page. Besides, a list of available rooms and their prices are also implemented for users to refer to. This list of rooms is the result of filtering according to the user input like the number of guests and check-in check-out dates that we get from Feature 1. The booking button will bring the user to Feature 4 to checkout.</p><h3 id="Feature-4-Booking-data"><a href="#Feature-4-Booking-data" class="headerlink" title="Feature 4: Booking data"></a>Feature 4: Booking data</h3><p>We implemented a checkout form to get user information and payment details as well as a way to store these in MongoDB with security features implemented. The checkout form would first use the Rest API GET method to get the hotel name, the room type chosen by the customer as well as their check-in, check-out date; these data will be displayed in the top right so users can check and confirm their choices. Users will then fill in the form with their personal information and payment details. Once done, they will click the submit button; this would encrypt the user’s info and store them in MongoDB while also adding the newly created booking to the “Booking History” page.</p><p><strong>Engineering challenges:</strong> Extra security features must be implemented when users submit their booking. This requires interacting with MongoDB, which can be quite difficult as NoSQL databases are not officially supported by Django itself. Thus, we have to write from scratch the scripts that would allow Django to work seamlessly with MongoDB.</p><h2 id="Additional-features"><a href="#Additional-features" class="headerlink" title="Additional features"></a>Additional features</h2><h3 id="Login-and-Register"><a href="#Login-and-Register" class="headerlink" title="Login and Register"></a>Login and Register</h3><p>We implemented the login and register features to allow the user to create an account. When a first time user registers an account, a user will be able to login to use the website and most importantly view their own booking history. For registering simply enter the email address, set a password and reenter the password again. Upon registration, the user can proceed to the homepage to make a booking. The website has a logout feature which the user can use to exit the website after making a transaction. For users that are already registered, can login to make a booking or/and view their booking history.<br><strong>Engineering Challenge:</strong> In the process of implementing these 2 features, we faced difficulties in authenticating the user by extracting the user information and comparing it to the login information keyed in by the user. </p><h3 id="Payment-security"><a href="#Payment-security" class="headerlink" title="Payment security"></a>Payment security</h3><p>To guarantee data security, once users have submitted a booking, the data they submitted will be encrypted before being saved to the database. Furthermore, should the users decide to review their booking info (through the Booking History feature we implement), sensitive information will be partially masked, for example, credit card number will only show the first 4 and last 6 digits. As GDPR (General Data Protection Regulation) requires that end users can request for their private information to be destroyed, we implement a feature for users themselves to delete the private info in our database, which is further elaborated in the “Booking History” feature. </p><h3 id="Booking-history"><a href="#Booking-history" class="headerlink" title="Booking history"></a>Booking history</h3><p>One of the additional features we implemented is a booking history, where users can view their past bookings and subsequently, delete them if they wish to cancel a certain booking. When users open a booking history page, it would show the details of the bookings they’ve made (hotel name, room type, check-in and out date, contact info, etc.). The data is added when users first complete the check-out form.<br>To augment this with security requirements, we’ve also added the “delete booking” feature. For any certain booking, users can choose to cancel a booking by pressing the “delete booking” located to the right of that booking. This would proceed to delete the booking data in the booking history as well as completely removing the booking details in the database. Thus, users can seamlessly delete their booking without their personal information being compromised.</p><h3 id="Database-Cache"><a href="#Database-Cache" class="headerlink" title="Database Cache"></a>Database Cache</h3><p>Another additional feature we implemented is a database cache. When a user visits the BookHistory page, we will get the booking detail information from our database. The cache method can reduce the time wasted for a user a second time visiting this page within minutes.</p><p><img src="https://lh3.googleusercontent.com/CcNEBC0LmLxBl7yo8PEgbKsMDWf6Lnr1XWnv-wNE54RbddApC_cgtm6Z0EsCFJX_4y7WvIOwBEyZaeL097za-pEJvnEBUIlSGD9M-oI7ZqkMdAn8_jJLWVQ8MPgBctLEXWgOe9Eqoo50sZ9sw1-FhQ-eHeo7ixk2XI5JYIsH3i4ce9Upa4ETdy08hw" alt="img"></p><p>Here is a plot to show the difference between a user visiting the BookHistory page 20 times without using cache and using cache . It spends nearly the same time as the user first visits the page, but using cache reduces a lot of time for the later visiting.To activate this cache, you can go to hbsproject\hbsproject\settings.py and change the path here.</p><p>‘LOCATION’: ‘D:\django_caches’</p><p><strong>Engineering challenges here:</strong> Getting data from a database needs some time. The way to solve it is using cache to reduce the average time. It also does not occupy too much memory because after some time, it will automatically delete the cache data.</p><h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><p>We included three types of testing in our project which included unit testing, auto testing and fuzzing tests.</p><h3 id="Unit-Testing"><a href="#Unit-Testing" class="headerlink" title="Unit Testing"></a>Unit Testing</h3><p><img src="https://lh3.googleusercontent.com/o3uNzmBfQHkeTeF2Yy8tSFGrJ9N_4T6VqVtlucOzsskQYHv28tOiEkFcACaMMb4OIf4hy90qMLXfgJW4l7e6ikXDIE-NwiQ9E8bzsScR5BIONmvoakx0myyL9-Insgb0m-2dqronLmw1WkTOmNE6JwPAQIZ_wL9aJCKkhKGQ5UrqAnG1tlej9Vz1Xg" alt="img"></p><p>We wrote unit tests in the tests.py file in the Django “hbsApp”. These unit tests are written to check whether the urls are redirected to the right pages as required and defined in the urls.py file. We even wrote tests to check for the register, login and index pages. </p><p><strong>Testing Challenge</strong>: We were all new to unit testing so learnt more about them from the lessons in class and referred to online sources. </p><h3 id="Auto-Testing"><a href="#Auto-Testing" class="headerlink" title="Auto Testing"></a>Auto Testing</h3><p><img src="https://lh3.googleusercontent.com/pW6xFkbYLACMglhpVfZdLNjVVfVH4L_kc9eL2UgOj94U2L25oHwkC3yn2eah9zrJB91T4WbS_AtOyoucvcY08VVkBc2MEnV656gTIevbb-TmJDF-7gT2kjgm4UxoPwXo-kB7C4kRwKMaS9jnPiFBiMqbdE7A5R6AptU8Q_xiTO4e5qg6zgrbjrdGjQ" alt="img"></p><p><strong>Method : UI Testing</strong></p><p><strong>Tools : Selenium</strong></p><p>It will help us test the web’s Performance</p><ul><li>login :<ul><li>input : user email, user password</li><li>output : True/False</li><li>Testcase:<ul><li>correct login account</li><li>login without user email (missing information)</li><li>login with non-exist user email</li><li>login with wrong password</li></ul></li></ul></li><li>register :<ul><li>input : user id, user password, check password</li><li>output : True/False</li><li>Testcase:<ul><li>correct register account</li></ul></li></ul></li><li>destination search:<ul><li>input : destination, number of rooms, number of guests, check in date, check out date</li><li>output : HotelList page</li><li>Testcase:<ul><li>valid destination</li><li>invalid destination</li></ul></li></ul></li><li>book a room :<ul><li>after user book a room, the booking history should display user’s booking</li><li>Next page :input : pre, next or go to button with key in page number</li><li>output : go to the destination page</li><li>Testcase:<ul><li>next button, go to next page</li><li>key in 10000 and go to, result in no hotel available</li></ul></li></ul></li></ul><p><img src="https://lh4.googleusercontent.com/vRjVyDpSNm4ovCVstAdLf05PNnQnw0knT99IkeuvGJYzCnSnz1febNtBIHmFid_7yVUSXBvqgANFCC0D-59xV4uqR6eNFW9V5uf_qUBrl4cjIX0FMtJPWZqb1pUutmHiauUHTFxDebaOpfatz1y-Us2GwYvgguEV8Y6BPgUyy9pSwD4awVMr1RePHg" alt="img"></p><p>Here we also apply the fuzz testing. To give some random input.</p><p><strong>Testing challenges:</strong> We are not familiar with using the fuzz testing tools. So we directly generate the random input by ourselves using python</p><h2 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h2><h3 id="Register"><a href="#Register" class="headerlink" title="Register"></a>Register</h3><p>Upon registration by keying in the required information, this user information is saved into the in-built sqlite database in Django. Using the User authentication system in the Django framework, the login feature can compare the information entered by the user to the information saved into the database when the user registers for the first time. </p><h3 id="Booking-detail"><a href="#Booking-detail" class="headerlink" title="Booking detail"></a>Booking detail</h3><p>When users created a booking, they would be required to fill in a form with their personal information as well as the payment details. This info would then be stored in MongoDB, where Personal Identifiable Information (PII) such as email address, credit card number, etc. would be encrypted to protect user privacy, which is also a requirement by Ascenda. The database entry can also be deleted by the users themselves through the additional “Delete Booking” feature we implemented.</p><h2 id="Further-improvements"><a href="#Further-improvements" class="headerlink" title="Further improvements"></a>Further improvements</h2><p>Due to the limited time provided and the gaps in our knowledge, there is still room for further improvement and future features.</p><ol><li>Searching Speed: speed is essential for a ecommerce website like this, up till now the destination search still takes a few second and this can be shorten by applying better searching algorithm in the future</li><li>Security: We have implemented security features to protect user’s payment privacy, further implementations like registration verification or double verification can be applied to protect the system from rogue programs.</li><li>Additional Features:<ol><li>Membership Function: Member user can find the lowest price room in the destination</li><li>User Comments Page: To get user’s feedback on <ol><li>The reason why do they want to cancel the booking</li><li>User experience for our future improvement</li></ol></li><li>Filter method : People can filter the hotel list based on their requirements like price, rating, some facilities and so on.</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web develop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Django </tag>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> Mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android learning - 010 Constraint Layout</title>
      <link href="/liangjunyi.github.io/2022/09/07/android-learning-010-constraint-layout/"/>
      <url>/liangjunyi.github.io/2022/09/07/android-learning-010-constraint-layout/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-learning-010-Constraint-Layout"><a href="#Android-learning-010-Constraint-Layout" class="headerlink" title="Android learning - 010 Constraint Layout"></a>Android learning - 010 Constraint Layout</h1>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android app development </tag>
            
            <tag> Android learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android learning - 009 Use case</title>
      <link href="/liangjunyi.github.io/2022/09/05/android-learning-009-use-case/"/>
      <url>/liangjunyi.github.io/2022/09/05/android-learning-009-use-case/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-learning-009-Use-case"><a href="#Android-learning-009-Use-case" class="headerlink" title="Android learning - 009 Use case"></a>Android learning - 009 Use case</h1>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android app development </tag>
            
            <tag> Android learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android learning - 008 Common Layout</title>
      <link href="/liangjunyi.github.io/2022/09/01/android-learning-008-common-layout/"/>
      <url>/liangjunyi.github.io/2022/09/01/android-learning-008-common-layout/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-learning-008-Common-Layout"><a href="#Android-learning-008-Common-Layout" class="headerlink" title="Android learning - 008 Common Layout"></a>Android learning - 008 Common Layout</h1><ul><li>线性布局 LinearLayout</li><li>相对布局 RelativeLayout</li><li>帧布局 FrameLayout</li></ul><p><strong>补充两个通用属性</strong></p><ul><li>Margin</li><li>padding</li></ul><h2 id="线性布局LinearLayout"><a href="#线性布局LinearLayout" class="headerlink" title="线性布局LinearLayout"></a>线性布局LinearLayout</h2><p>特有属性：</p><ul><li>方向 orientation ：子view的排列方向（垂直 vertical 或者 水平 horizontal ）</li></ul><p>字view可以有的属性</p><ul><li>比重 weight：各个子view所占的比例</li></ul><p>注意：</p><p>LinearLayout 规定了某个方向排列后，orientation在这个方向上的作用的优先级是最高的。</p><p>这意味着某些位置相关的属性将失效。</p><p>比如orientation=vertical垂直，则layout_gravity=top/bottom/center_vertical无效，left/right仍有效</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android app development </tag>
            
            <tag> Android learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android learning - 007 Layout and View</title>
      <link href="/liangjunyi.github.io/2022/08/27/android-learning-007-layout-and-view/"/>
      <url>/liangjunyi.github.io/2022/08/27/android-learning-007-layout-and-view/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-learning-007-Layout-and-View"><a href="#Android-learning-007-Layout-and-View" class="headerlink" title="Android learning - 007 Layout and View"></a>Android learning - 007 Layout and View</h1><h2 id="1-What-is-Layout-and-what-is-view"><a href="#1-What-is-Layout-and-what-is-view" class="headerlink" title="1.What is Layout and what is view"></a>1.What is Layout and what is view</h2><ul><li>Layout : layout目录下一个个xml文件</li><li>view : xml文件里的一个个节点，对应页面上的元素</li></ul><h2 id="2-Create-a-new-Layout"><a href="#2-Create-a-new-Layout" class="headerlink" title="2.Create a new Layout"></a>2.Create a new Layout</h2><p><img src="https://s2.loli.net/2022/09/07/c7MikOFHN2eGKZf.png" alt="image-20220907205206392"></p><h2 id="3-View-的公共属性"><a href="#3-View-的公共属性" class="headerlink" title="3. View 的公共属性"></a>3. View 的公共属性</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Hello world \n 114514"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@color/black"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"@color/white"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/09/07/iyFSsmRkvZKW2e5.png" alt="image-20220907210512799"></p><h3 id="3-1-layout-width-layout-height"><a href="#3-1-layout-width-layout-height" class="headerlink" title="3.1 layout_width &amp; layout_height"></a>3.1 layout_width &amp; layout_height</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android:layout_width="wrap_content"</span><br><span class="line">android:layout_height="wrap_content"</span><br></pre></td></tr></tbody></table></figure><p>宽，高自适应文本大小</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android:layout_width="match_parent"</span><br><span class="line">android:layout_height="match_parent"</span><br></pre></td></tr></tbody></table></figure><p>与父布局宽高一致</p><p><img src="https://s2.loli.net/2022/09/07/SewgTauYZNBORDt.png" alt="image-20220907205830243"></p><h3 id="3-2-text"><a href="#3-2-text" class="headerlink" title="3.2 text"></a>3.2 text</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:text="Hello world \n 114514"</span><br></pre></td></tr></tbody></table></figure><p>换行显示</p><h3 id="3-3-gravity"><a href="#3-3-gravity" class="headerlink" title="3.3 gravity"></a>3.3 gravity</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:gravity="center"</span><br></pre></td></tr></tbody></table></figure><p>把text放在当前view中的位置</p><h3 id="3-4-layout-gravity"><a href="#3-4-layout-gravity" class="headerlink" title="3.4 layout_gravity"></a>3.4 layout_gravity</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:layout_gravity="center"</span><br></pre></td></tr></tbody></table></figure><p>把当前view放在layout中的位置</p><h3 id="3-5-background"><a href="#3-5-background" class="headerlink" title="3.5 background"></a>3.5 background</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:background="@color/black"</span><br></pre></td></tr></tbody></table></figure><p>view的背景变成黑色</p><h3 id="3-6-textColor"><a href="#3-6-textColor" class="headerlink" title="3.6 textColor"></a>3.6 textColor</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:textColor="@color/white"</span><br></pre></td></tr></tbody></table></figure><p>文字变成白色</p><h3 id="3-7-id"><a href="#3-7-id" class="headerlink" title="3.7 id"></a>3.7 id</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:id="@+id/tv_content"</span><br></pre></td></tr></tbody></table></figure><p>为这个view设置id</p><h2 id="4-创建布局的第二种方法"><a href="#4-创建布局的第二种方法" class="headerlink" title="4.创建布局的第二种方法"></a>4.创建布局的第二种方法</h2><p>xml布局文件中的一个个view节点最后也会被解析成java代码类</p><p>采用xml的方法布局，只是为了方便我们开发者进行直观布局</p><p>java创建：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.app_1myfirstapp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> {</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">textView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextView</span>(<span class="built_in">this</span>);</span><br><span class="line">        textView.setText(<span class="string">"hello"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android app development </tag>
            
            <tag> Android learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android learning - 006 Gradle File</title>
      <link href="/liangjunyi.github.io/2022/08/25/android-learning-006-gradle-file/"/>
      <url>/liangjunyi.github.io/2022/08/25/android-learning-006-gradle-file/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-learning-006-Gradle-File"><a href="#Android-learning-006-Gradle-File" class="headerlink" title="Android learning - 006 Gradle File"></a>Android learning - 006 Gradle File</h1>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android app development </tag>
            
            <tag> Android learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android learning - 005 Project directory</title>
      <link href="/liangjunyi.github.io/2022/08/21/android-learning-005-project-directory/"/>
      <url>/liangjunyi.github.io/2022/08/21/android-learning-005-project-directory/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-learning-005-Project-directory"><a href="#Android-learning-005-Project-directory" class="headerlink" title="Android learning - 005 Project directory"></a>Android learning - 005 Project directory</h1>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android app development </tag>
            
            <tag> Android learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android learning - 004 First Android APP</title>
      <link href="/liangjunyi.github.io/2022/08/18/android-learning-004-first-android-app/"/>
      <url>/liangjunyi.github.io/2022/08/18/android-learning-004-first-android-app/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-learning-004-First-Android-APP"><a href="#Android-learning-004-First-Android-APP" class="headerlink" title="Android learning - 004 First Android APP"></a>Android learning - 004 First Android APP</h1>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android app development </tag>
            
            <tag> Android learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android learning - 003 Install JDK and Setup Java Environment</title>
      <link href="/liangjunyi.github.io/2022/08/15/android-learning-003-install-jdk-and-setup-java-environment/"/>
      <url>/liangjunyi.github.io/2022/08/15/android-learning-003-install-jdk-and-setup-java-environment/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-learning-003-Install-JDK-and-Setup-Java-Environment"><a href="#Android-learning-003-Install-JDK-and-Setup-Java-Environment" class="headerlink" title="Android learning - 003 Install JDK and Setup Java Environment"></a>Android learning - 003 Install JDK and Setup Java Environment</h1>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android app development </tag>
            
            <tag> Android learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android learning - 002 Config for Android Studio</title>
      <link href="/liangjunyi.github.io/2022/08/13/android-learning-002-config-for-android-studio/"/>
      <url>/liangjunyi.github.io/2022/08/13/android-learning-002-config-for-android-studio/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-learning-002-Config-for-Android-Studio"><a href="#Android-learning-002-Config-for-Android-Studio" class="headerlink" title="Android learning - 002 Config for Android Studio"></a>Android learning - 002 Config for Android Studio</h1>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android app development </tag>
            
            <tag> Android learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android learning - 001 Install Android Studio</title>
      <link href="/liangjunyi.github.io/2022/08/12/android-learning-001-install-android-studio/"/>
      <url>/liangjunyi.github.io/2022/08/12/android-learning-001-install-android-studio/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-learning-001-Install-Android-Studio"><a href="#Android-learning-001-Install-Android-Studio" class="headerlink" title="Android learning - 001 Install Android Studio"></a>Android learning - 001 Install Android Studio</h1>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android app development </tag>
            
            <tag> Android learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.1.1 什么是内存？进程的基本原理，深入指令理解其过程</title>
      <link href="/liangjunyi.github.io/2022/07/31/operating-system-3.1.1-shi-me-shi-nei-cun-jin-cheng-de-ji-ben-yuan-li-shen-ru-zhi-ling-li-jie-qi-guo-cheng/"/>
      <url>/liangjunyi.github.io/2022/07/31/operating-system-3.1.1-shi-me-shi-nei-cun-jin-cheng-de-ji-ben-yuan-li-shen-ru-zhi-ling-li-jie-qi-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="0-思维导图"><a href="#0-思维导图" class="headerlink" title="0.思维导图"></a>0.思维导图</h2><p><img src="https://s2.loli.net/2022/06/23/cnOfSbxqZWsL2MV.png" alt="image-20220623100232740"></p><h2 id="1-什么是内存？有何作用？"><a href="#1-什么是内存？有何作用？" class="headerlink" title="1.什么是内存？有何作用？"></a>1.什么是内存？有何作用？</h2><h3 id="（1）存储单元"><a href="#（1）存储单元" class="headerlink" title="（1）存储单元"></a>（1）存储单元</h3><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20220623100316141.png" alt="image-20220623100316141"></p><h3 id="（2）几个常用数量单位-内存地址"><a href="#（2）几个常用数量单位-内存地址" class="headerlink" title="（2）几个常用数量单位&amp;内存地址"></a>（2）几个常用数量单位&amp;内存地址</h3><p><img src="https://s2.loli.net/2022/06/23/QWdqkMIjGO8iLuT.png" alt="image-20220623100333667"></p><h2 id="2-进程运行的基本原理"><a href="#2-进程运行的基本原理" class="headerlink" title="2.进程运行的基本原理"></a>2.进程运行的基本原理</h2><h3 id="（1）指令的工作原理—操作码-若干参数（可能包含地址参数）"><a href="#（1）指令的工作原理—操作码-若干参数（可能包含地址参数）" class="headerlink" title="（1）指令的工作原理—操作码+若干参数（可能包含地址参数）"></a>（1）指令的工作原理—操作码+若干参数（可能包含地址参数）</h3><ul><li>从X=X+1大致看一下指令的执行过程</li></ul><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20220623100351987.png" alt="image-20220623100351987"></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20220623100400789.png" alt="image-20220623100400789"></p><p><img src="https://s2.loli.net/2022/06/23/mveCsKoO4kapUbn.png" alt="image-20220623100411595"></p><p><img src="https://s2.loli.net/2022/06/23/fdRAc56BtCrF3yb.png" alt="image-20220623100424959"></p><h3 id="（2）逻辑地址（相对地址）vs物理地址（绝对地址）"><a href="#（2）逻辑地址（相对地址）vs物理地址（绝对地址）" class="headerlink" title="（2）逻辑地址（相对地址）vs物理地址（绝对地址）"></a>（2）逻辑地址（相对地址）vs物理地址（绝对地址）</h3><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20220623100440185.png" alt="image-20220623100440185"></p><h3 id="（3）从写程序到程序运行—编译、链接、装入"><a href="#（3）从写程序到程序运行—编译、链接、装入" class="headerlink" title="（3）从写程序到程序运行—编译、链接、装入"></a>（3）从写程序到程序运行—编译、链接、装入</h3><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20220623100456899.png" alt="image-20220623100456899"></p><h3 id="（4）装入模块装入内存"><a href="#（4）装入模块装入内存" class="headerlink" title="（4）装入模块装入内存"></a>（4）装入模块装入内存</h3><p><strong>不修改装入模块中的指令地址就直接装入内存的话：</strong></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20220623100511349.png" alt="image-20220623100511349"></p><p><img src="https://s2.loli.net/2022/06/23/wNyBR5ZIbqMvCh2.png" alt="image-20220623100523296"></p><h3 id="（5）装入的三种方式"><a href="#（5）装入的三种方式" class="headerlink" title="（5）装入的三种方式"></a>（5）装入的三种方式</h3><h4 id="①绝对装入"><a href="#①绝对装入" class="headerlink" title="①绝对装入"></a>①绝对装入</h4><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20220623100540547.png" alt="image-20220623100540547"></p><h4 id="②静态重定位"><a href="#②静态重定位" class="headerlink" title="②静态重定位"></a>②静态重定位</h4><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20220623100559580.png" alt="image-20220623100559580"></p><h4 id="③-动态重定位"><a href="#③-动态重定位" class="headerlink" title="③ 动态重定位"></a>③ 动态重定位</h4><p><img src="https://s2.loli.net/2022/06/23/bfeJAK91m5WMvk6.png" alt="image-20220623100614835"></p><p><img src="https://s2.loli.net/2022/06/23/vCERSnX2hxcA64i.png" alt="image-20220623100624539"></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20220623100642490.png" alt="image-20220623100642490"></p><h3 id="（6）链接的三种方式"><a href="#（6）链接的三种方式" class="headerlink" title="（6）链接的三种方式"></a>（6）链接的三种方式</h3><h4 id="①-静态链接"><a href="#①-静态链接" class="headerlink" title="① 静态链接"></a>① 静态链接</h4><p><img src="https://s2.loli.net/2022/06/23/YGwU6xyrHRF1Snv.png" alt="image-20220623100658238"></p><h4 id="②装入时动态链接"><a href="#②装入时动态链接" class="headerlink" title="②装入时动态链接"></a>②装入时动态链接</h4><p><img src="https://s2.loli.net/2022/06/23/PE6iXfG8CdRxw4Z.png" alt="image-20220623100714212"></p><h4 id="③运行时动态链接"><a href="#③运行时动态链接" class="headerlink" title="③运行时动态链接"></a>③运行时动态链接</h4><p><img src="https://s2.loli.net/2022/06/23/mK1Oe3N8l7Jf9nC.png" alt="image-20220623100729824"></p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.4.1 操作系统之死锁详解(预防、避免、检测、解除)+思维导图</title>
      <link href="/liangjunyi.github.io/2022/07/30/operating-system-2.4.1-cao-zuo-xi-tong-zhi-si-suo-xiang-jie-yu-fang-bi-mian-jian-ce-jie-chu-si-wei-dao-tu/"/>
      <url>/liangjunyi.github.io/2022/07/30/operating-system-2.4.1-cao-zuo-xi-tong-zhi-si-suo-xiang-jie-yu-fang-bi-mian-jian-ce-jie-chu-si-wei-dao-tu/</url>
      
        <content type="html"><![CDATA[<h4 id="0-思维导图"><a href="#0-思维导图" class="headerlink" title="0.思维导图"></a>0.思维导图</h4><p><img src="https://s2.loli.net/2022/06/22/kQYbztdJSaXfrl9.png" alt="20200410230641280"></p><h4 id="1-什么是死锁？"><a href="#1-什么是死锁？" class="headerlink" title="1.什么是死锁？"></a>1.什么是死锁？</h4><p><img src="https://s2.loli.net/2022/06/22/wWRBkCq2OjdTsY5.png" alt="image-20220622175743032"></p><h4 id="2-死锁、饥饿、死循环的区别"><a href="#2-死锁、饥饿、死循环的区别" class="headerlink" title="2.死锁、饥饿、死循环的区别"></a>2.死锁、饥饿、死循环的区别</h4><p><img src="https://s2.loli.net/2022/06/22/XgdAfH7mton9yTQ.png" alt="image-20220622210122559"></p><p><img src="https://s2.loli.net/2022/06/22/BXkZM37jwK9rPOW.png" alt="image-20220622210131402"></p><h4 id="3-死锁产生的四个必要条件"><a href="#3-死锁产生的四个必要条件" class="headerlink" title="3.死锁产生的四个必要条件"></a>3.死锁产生的四个必要条件</h4><p><img src="https://s2.loli.net/2022/06/22/E6GYwCQml2gVxBT.png" alt="image-20220622210144562"></p><h4 id="4-什么时候会发生死锁？"><a href="#4-什么时候会发生死锁？" class="headerlink" title="4.什么时候会发生死锁？"></a>4.什么时候会发生死锁？</h4><p><img src="https://s2.loli.net/2022/06/22/jgmX9nBSOi8WTF6.png" alt="image-20220622210159856"></p><h4 id="5-死锁的处理策略"><a href="#5-死锁的处理策略" class="headerlink" title="5.死锁的处理策略"></a>5.死锁的处理策略</h4><p><img src="https://s2.loli.net/2022/06/22/IBgidmNuby8o6qT.png" alt="image-20220622210215195"></p><h5 id="（1）预防死锁"><a href="#（1）预防死锁" class="headerlink" title="（1）预防死锁"></a>（1）预防死锁</h5><h6 id="①-破坏互斥条件"><a href="#①-破坏互斥条件" class="headerlink" title="① 破坏互斥条件"></a>① 破坏互斥条件</h6><p><img src="https://s2.loli.net/2022/06/22/tjzgKxlHByd4uk6.png" alt="image-20220622210236387"></p><h6 id="②-破坏不可剥夺条件"><a href="#②-破坏不可剥夺条件" class="headerlink" title="② 破坏不可剥夺条件"></a>② 破坏不可剥夺条件</h6><p><img src="https://s2.loli.net/2022/06/22/cdUzVBnEPrtJi4f.png" alt="image-20220622210251845"></p><h6 id="③-破坏请求和保持条件"><a href="#③-破坏请求和保持条件" class="headerlink" title="③ 破坏请求和保持条件"></a>③ 破坏请求和保持条件</h6><p><img src="https://s2.loli.net/2022/06/22/PTdf9pj8VDoSgtU.png" alt="image-20220622210305754"></p><h6 id="④-破坏循环等待条件"><a href="#④-破坏循环等待条件" class="headerlink" title="④ 破坏循环等待条件"></a>④ 破坏循环等待条件</h6><p><img src="https://s2.loli.net/2022/06/22/kRMtqCadFsWhbn1.png" alt="image-20220622210320059"></p><h5 id="（2）避免死锁"><a href="#（2）避免死锁" class="headerlink" title="（2）避免死锁"></a>（2）避免死锁</h5><h6 id="①-什么是安全序列？"><a href="#①-什么是安全序列？" class="headerlink" title="① 什么是安全序列？"></a>① 什么是安全序列？</h6><p><img src="https://s2.loli.net/2022/06/22/gFANRQJc5KiXl16.png" alt="image-20220622210335666"></p><p><img src="https://s2.loli.net/2022/06/22/PLBzhw3VsKO1Djm.png" alt="image-20220622210343784"></p><p><img src="https://s2.loli.net/2022/06/22/evSArgYRxFMaWCJ.png" alt="image-20220622210352624"></p><p><img src="https://s2.loli.net/2022/06/22/HgV2kf9eXFz43jv.png" alt="image-20220622210402774"></p><p><img src="https://s2.loli.net/2022/06/22/lws4UAGdq9j2Vi3.png" alt="image-20220622210411080"></p><h6 id="②-安全序列、安全状态、不安全状态、死锁之间的联系"><a href="#②-安全序列、安全状态、不安全状态、死锁之间的联系" class="headerlink" title="② 安全序列、安全状态、不安全状态、死锁之间的联系"></a>② 安全序列、安全状态、不安全状态、死锁之间的联系</h6><p><img src="https://s2.loli.net/2022/06/22/W8H5XznBTRxdehE.png" alt="image-20220622210419490"></p><p><img src="https://s2.loli.net/2022/06/22/qDeBRoWuljiXgrm.png" alt="image-20220622210428315"></p><h6 id="③-避免系统进入不安全状态——银行家算法"><a href="#③-避免系统进入不安全状态——银行家算法" class="headerlink" title="③ 避免系统进入不安全状态——银行家算法"></a>③ 避免系统进入不安全状态——银行家算法</h6><p><img src="https://s2.loli.net/2022/06/22/gRhHeIpCPvENxsj.png" alt="image-20220622210454211"></p><p><img src="https://s2.loli.net/2022/06/22/1eDMCmUQYsuB5ix.png" alt="image-20220622210505108"></p><p><img src="https://s2.loli.net/2022/06/22/yKPbOh4sLMeU9tH.png" alt="image-20220622210515371"></p><p><img src="https://s2.loli.net/2022/06/22/refhB6yngYdZcpQ.png" alt="image-20220622210525599"></p><p><img src="https://s2.loli.net/2022/06/22/ZptjdH4O1unrR8k.png" alt="image-20220622210533738"></p><p><img src="https://s2.loli.net/2022/06/22/dL68JcBZApt4YyH.png" alt="image-20220622210542193"></p><p><img src="https://s2.loli.net/2022/06/22/Plny9tsDxQikZBX.png" alt="image-20220622210557781"></p><p><img src="https://s2.loli.net/2022/06/22/2KtwHA1rcUpMqD6.png" alt="image-20220622210606499"></p><ul><li>使用代码实现</li></ul><p><img src="https://s2.loli.net/2022/06/22/CaXcwbDnm7YkA8i.png" alt="image-20220622210621030"></p><p><img src="https://s2.loli.net/2022/06/22/OVcFPtvIWjGYuCU.png" alt="image-20220622210628110"></p><p><img src="https://s2.loli.net/2022/06/22/RpwX2JdyLPbE4f6.png" alt="image-20220622210635323"></p><h5 id="（3）死锁的检测和解除"><a href="#（3）死锁的检测和解除" class="headerlink" title="（3）死锁的检测和解除"></a>（3）死锁的检测和解除</h5><p><img src="https://s2.loli.net/2022/06/22/W7UGVpyZ5haLdkF.png" alt="image-20220622210649155"></p><h6 id="①-死锁的检测"><a href="#①-死锁的检测" class="headerlink" title="① 死锁的检测"></a>① 死锁的检测</h6><p><img src="https://s2.loli.net/2022/06/22/3JsbFBSTvh2MZOX.png" alt="image-20220622210702474"></p><ul><li>举个例子，可以消除所有边，即无死锁发生</li></ul><p><img src="https://s2.loli.net/2022/06/22/z9EMlZKdYJOmUb2.png" alt="image-20220622210716894"></p><p><img src="https://s2.loli.net/2022/06/22/Et8Mx4IDsLV5GKN.png" alt="image-20220622210725038"></p><p><img src="https://s2.loli.net/2022/06/22/M1lv56J4LDe9SkG.png" alt="image-20220622210732689"></p><ul><li>举个例子，不可消除所有边，即产生死锁</li></ul><p><img src="https://s2.loli.net/2022/06/22/vwNpa7XRA6cy3sn.png" alt="image-20220622210748014"></p><p><img src="https://s2.loli.net/2022/06/22/xL8jKklc2wf1QPv.png" alt="image-20220622210755766"></p><p><img src="https://s2.loli.net/2022/06/22/ftUoB61lGbIzVAS.png" alt="image-20220622210804324"></p><p><img src="https://s2.loli.net/2022/06/22/8PiN4G1uoS3bOUH.png" alt="image-20220622210813602"></p><h6 id="②-死锁的解除"><a href="#②-死锁的解除" class="headerlink" title="② 死锁的解除"></a>② 死锁的解除</h6><p><img src="https://s2.loli.net/2022/06/22/s89R2HUCokWiZwN.png" alt="image-20220622210828098"></p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.3.7 操作系统之管程和java中实现管程的机制</title>
      <link href="/liangjunyi.github.io/2022/07/29/operating-system-2.3.7-cao-zuo-xi-tong-zhi-guan-cheng-he-java-zhong-shi-xian-guan-cheng-de-ji-zhi/"/>
      <url>/liangjunyi.github.io/2022/07/29/operating-system-2.3.7-cao-zuo-xi-tong-zhi-guan-cheng-he-java-zhong-shi-xian-guan-cheng-de-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="0-思维导图"><a href="#0-思维导图" class="headerlink" title="0.思维导图"></a>0.思维导图</h2><p><img src="https://s2.loli.net/2022/06/22/qsoXyW7gJd4NZHm.png" alt="image-20220622173909765"></p><h2 id="1-为什么引入管程？"><a href="#1-为什么引入管程？" class="headerlink" title="1.为什么引入管程？"></a>1.为什么引入管程？</h2><p><img src="https://s2.loli.net/2022/06/22/P3ADfo8HruxWVtc.png" alt="image-20220622173923812"></p><h2 id="2-管程的组成及基本特征"><a href="#2-管程的组成及基本特征" class="headerlink" title="2.管程的组成及基本特征"></a>2.管程的组成及基本特征</h2><p><img src="https://s2.loli.net/2022/06/22/eTZjw8chVufmgaH.png" alt="image-20220622173937058"></p><h2 id="3-管程实现生产者消费者问题"><a href="#3-管程实现生产者消费者问题" class="headerlink" title="3.管程实现生产者消费者问题"></a>3.管程实现生产者消费者问题</h2><p><img src="https://s2.loli.net/2022/06/22/TJBbHam1USDyWeV.png" alt="image-20220622173949733"></p><p><img src="https://s2.loli.net/2022/06/22/oclX18SB2QV4hGn.png" alt="image-20220622173959340"></p><p><img src="https://s2.loli.net/2022/06/22/dRXnt3hpJlM8wyg.png" alt="image-20220622174008176"></p><p><img src="https://s2.loli.net/2022/06/22/esSPNpFK4Vf9gwH.png" alt="image-20220622174016367"></p><h2 id="4-java中类似于管程的机制"><a href="#4-java中类似于管程的机制" class="headerlink" title="4.java中类似于管程的机制"></a>4.java中类似于管程的机制</h2><p><img src="https://s2.loli.net/2022/06/22/p2R1Z67OwqIMzPd.png" alt="image-20220622174031304"></p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.3.6 操作系统之进程同步与互斥经典问题（生产者-消费者问题、多生产者-多消费者问题、吸烟者问题、读者-写者问题、哲学家进餐问题）</title>
      <link href="/liangjunyi.github.io/2022/07/28/operating-system-2.3.6-cao-zuo-xi-tong-zhi-jin-cheng-tong-bu-yu-hu-chi-jing-dian-wen-ti-sheng-chan-zhe-xiao-fei-zhe-wen-ti-duo-sheng-chan-zhe-duo-xiao-fei-zhe-wen-ti-xi-yan-zhe-wen-ti-du-zhe-xie-zhe-wen-ti-zhe-xue-jia-jin-can-wen-ti/"/>
      <url>/liangjunyi.github.io/2022/07/28/operating-system-2.3.6-cao-zuo-xi-tong-zhi-jin-cheng-tong-bu-yu-hu-chi-jing-dian-wen-ti-sheng-chan-zhe-xiao-fei-zhe-wen-ti-duo-sheng-chan-zhe-duo-xiao-fei-zhe-wen-ti-xi-yan-zhe-wen-ti-du-zhe-xie-zhe-wen-ti-zhe-xue-jia-jin-can-wen-ti/</url>
      
        <content type="html"><![CDATA[<h4 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h4><ul><li>同步时，前V后P。</li></ul><p><img src="https://s2.loli.net/2022/06/22/98G4fhnDx3YzRjq.png" alt="image-20220622172709096"></p><h4 id="1-生产者-消费者问题"><a href="#1-生产者-消费者问题" class="headerlink" title="1.生产者-消费者问题"></a>1.生产者-消费者问题</h4><h5 id="（1）问题描述"><a href="#（1）问题描述" class="headerlink" title="（1）问题描述"></a>（1）问题描述</h5><ul><li>系统中有<code>一组生产者进程</code>和<code>一组消费者进程</code>，生产者进程每次<code>生产一个</code>产品放入缓冲区，消费者进程每次从缓冲区中<code>取出一个</code>产品并使用。(注: 这里的“产品”理解为某种数据)</li><li>生产者、消费者<code>共享</code>一个初始为空、大小为n的<code>缓冲区</code>。</li><li>只有缓冲区<code>没满</code>时，<code>生产者</code>才能把产品<code>放入</code>缓冲区，否则必须等待。</li><li>只有缓冲区<code>不空</code>时，<code>消费者</code>才能从中<code>取出</code>产品，否则必须等待。</li><li>缓冲区是临界资源，各进程必须<code>互斥</code>地访问。</li></ul><p><img src="https://s2.loli.net/2022/06/22/GFaexMsrpW4ZvBn.png" alt="image-20220622172723722"></p><h5 id="（2）问题分析"><a href="#（2）问题分析" class="headerlink" title="（2）问题分析"></a>（2）问题分析</h5><ul><li>1)关系分析。生产者和消费者对缓冲区互斥访问是<code>互斥关系</code>，同时生产者和消费者又是一个相互协作的关系，只有生产者生产之后,消费者才能消费，它们也是<code>同步关系</code>。</li><li>2)整理思路。根据各进程的操作流程确定P、V操作的大致顺序。<br>生产者每次要消耗(P）一个空闲缓冲区，并生产(V)一个产品。<br>消费者每次要消耗(P）一个产品，并释放一个空闲缓冲区(V)。<br>往缓冲区放入/取走产品需要互斥。</li><li>3)信号量设置。设置信号量。设置需要的信号量，并根据题目条件确定信号量初值。( 互斥信号量初值一般为1，同步信号量的初始值要看对应资源的初始值是多少)</li></ul><p><img src="https://s2.loli.net/2022/06/22/yuHle32a6pIDzOh.png" alt="image-20220622172737598"></p><h5 id="（3）如何实现？"><a href="#（3）如何实现？" class="headerlink" title="（3）如何实现？"></a>（3）如何实现？</h5><p><img src="https://s2.loli.net/2022/06/22/ZlWinACvbNzXctr.png" alt="image-20220622172757556"></p><h5 id="（4）实现互斥的P操作一定要在实现同步的P操作之后"><a href="#（4）实现互斥的P操作一定要在实现同步的P操作之后" class="headerlink" title="（4）实现互斥的P操作一定要在实现同步的P操作之后"></a>（4）实现互斥的P操作一定要在实现同步的P操作之后</h5><p><img src="https://s2.loli.net/2022/06/22/nw9ERoQges1yZ4D.png" alt="image-20220622172813621"></p><h5 id="（5）知识回顾与重要考点"><a href="#（5）知识回顾与重要考点" class="headerlink" title="（5）知识回顾与重要考点"></a>（5）知识回顾与重要考点</h5><p><img src="https://s2.loli.net/2022/06/22/7noLClfD6SdUasJ.png" alt="image-20220622172838426"></p><h4 id="2-多生产者-多消费者问题"><a href="#2-多生产者-多消费者问题" class="headerlink" title="2.多生产者-多消费者问题"></a>2.多生产者-多消费者问题</h4><h5 id="（1）问题描述-1"><a href="#（1）问题描述-1" class="headerlink" title="（1）问题描述"></a>（1）问题描述</h5><p><img src="https://s2.loli.net/2022/06/22/MrlC9euw2At1XJO.png" alt="image-20220622172917876"></p><h5 id="（2）问题分析-1"><a href="#（2）问题分析-1" class="headerlink" title="（2）问题分析"></a>（2）问题分析</h5><p><img src="https://s2.loli.net/2022/06/22/akP9nuzcxs5JDwZ.png" alt="image-20220622172934340"></p><h5 id="（3）实现方法"><a href="#（3）实现方法" class="headerlink" title="（3）实现方法"></a>（3）实现方法</h5><h6 id="①-有mutex"><a href="#①-有mutex" class="headerlink" title="① 有mutex"></a>① 有mutex</h6><p><img src="https://s2.loli.net/2022/06/22/nz3vNFKc8WjgTIZ.png" alt="image-20220622172956207"></p><h6 id="②-无mutex"><a href="#②-无mutex" class="headerlink" title="② 无mutex"></a>② 无mutex</h6><p><img src="https://s2.loli.net/2022/06/22/DrEPyhBVjGSo4XM.png" alt="image-20220622173041176"></p><h6 id="③-为什么有mutex和没有mutex一样呢？"><a href="#③-为什么有mutex和没有mutex一样呢？" class="headerlink" title="③ 为什么有mutex和没有mutex一样呢？"></a>③ 为什么有mutex和没有mutex一样呢？</h6><ul><li>原因在于:本题中的缓冲区大小为1，在任何时刻，apple、 orange、 plate 三个同步信号量中最多只有一个是1。因此在任何时刻，最多只有一个进程的P操作不会被阻塞，并顺利地进入临界区…</li></ul><h6 id="④-如果有两个盘子plate"><a href="#④-如果有两个盘子plate" class="headerlink" title="④ 如果有两个盘子plate"></a>④ 如果有两个盘子plate</h6><p><img src="https://s2.loli.net/2022/06/22/KILraW9tbUkCGZo.png" alt="image-20220622173115104"></p><h5 id="（4）知识总结与重要考点"><a href="#（4）知识总结与重要考点" class="headerlink" title="（4）知识总结与重要考点"></a>（4）知识总结与重要考点</h5><ul><li><code>总结</code>:在生产者_消费者问题中，如果缓冲区大小为1，那么有可能不需要设置互斥信号量就可以实现互斥访问缓冲区的功能。当然，<code>这不是绝对的</code>，要具体问题具体分析。</li><li><code>建议</code>:在考试中如果来不及仔细分析，可以加上互斥信号量，保证各进程一定会互斥地访问缓冲区。但需要注意的是，·<code>实现互斥的P操作一定要在实现同步的P操作之后</code>·，否则可能引起·<code>“死锁”</code>·。</li></ul><p><img src="https://s2.loli.net/2022/06/22/6Y7xG5qVjys9LNk.png" alt="image-20220622173136906"></p><h4 id="3-读者-写者问题"><a href="#3-读者-写者问题" class="headerlink" title="3.读者-写者问题"></a>3.读者-写者问题</h4><h5 id="（1）问题描述-2"><a href="#（1）问题描述-2" class="headerlink" title="（1）问题描述"></a>（1）问题描述</h5><p><img src="https://s2.loli.net/2022/06/22/oP3dKGbjS2I5xLV.png" alt="image-20220622173156088"></p><h5 id="（2）问题分析-2"><a href="#（2）问题分析-2" class="headerlink" title="（2）问题分析"></a>（2）问题分析</h5><p><img src="https://s2.loli.net/2022/06/22/RNd2eXgvuzZtAF9.png" alt="image-20220622173210977"></p><h5 id="（3）实现方法-1"><a href="#（3）实现方法-1" class="headerlink" title="（3）实现方法"></a>（3）实现方法</h5><h6 id="①-给count加mutex互斥访问"><a href="#①-给count加mutex互斥访问" class="headerlink" title="① 给count加mutex互斥访问"></a>① 给count加mutex互斥访问</h6><ul><li>这里说一下为什么要加mutex。</li><li>比如：当count=0时，第一个读者进程执行到p(rw),rw=0,假设此时时间片到了，切换到第二个读者进程,第二个进程发现count=0,则执行p(rw)，但是此时rw=0，于是第二个进程被堵在p（rw）这里，同理，后面的可能会有多个进程堵在p(rw)，只有当第一个进程再次获得时间片，执行count++,让count不为0，然后其他进程就可以直接绕过if直接进行count++来访问文件，但是第三个读者进程和后面的几个可能堵在p(rw)的多个读者进程则必须得等count–为0后才可以再次和写进程竞争来访问文件，对count的访问没有做到一气呵成，会导致本来一些进程一直堵在p（rw）。</li></ul><p><img src="https://s2.loli.net/2022/06/22/6SwQs3Zfd1rIJjm.png" alt="image-20220622173236369"></p><h6 id="②-加一个w实现“读写公平法”"><a href="#②-加一个w实现“读写公平法”" class="headerlink" title="② 加一个w实现“读写公平法”"></a>② 加一个w实现“读写公平法”</h6><ul><li>在上面的算法中，读进程是优先的，即当存在读进程时，写操作将被延迟，且只要有 一个读进程活跃，随后而来的读进程都将被允许访问文件。这样的方式会导致写进程可能长时间等待，且存在写进程<code>“饿死”</code>的情况。</li><li>若希望写进程优先，<code>即当有读进程正在读共享文件时，有写进程请求访问，这时应禁止后续读进程的请求，等到已在共享文件的读进程执行完毕，立即让写进程执行，只有在无写进程执行的情况下才允许读进程再次运行</code>。为此，增加一个信号量并在上面程序的writer()和 reader()函数中各增加一对PV操作，就可以得到写进程优先的解决程序。</li></ul><p><img src="https://s2.loli.net/2022/06/22/1hcAOxpysDUzW6T.png" alt="image-20220622173304553"></p><h5 id="（4）知识回顾与重要考点"><a href="#（4）知识回顾与重要考点" class="headerlink" title="（4）知识回顾与重要考点"></a>（4）知识回顾与重要考点</h5><p><img src="https://s2.loli.net/2022/06/22/vZX2QjknO6qyM3I.png" alt="image-20220622173319153"></p><h4 id="4-吸烟者问题"><a href="#4-吸烟者问题" class="headerlink" title="4.吸烟者问题"></a>4.吸烟者问题</h4><h5 id="（1）问题描述-3"><a href="#（1）问题描述-3" class="headerlink" title="（1）问题描述"></a>（1）问题描述</h5><p><img src="https://s2.loli.net/2022/06/22/7QaIXZYBEfOCpAL.png" alt="image-20220622173336724"></p><h5 id="（2）问题分析-3"><a href="#（2）问题分析-3" class="headerlink" title="（2）问题分析"></a>（2）问题分析</h5><p><img src="https://s2.loli.net/2022/06/22/GuB3sYrhvIPDVWt.png" alt="image-20220622173353548"></p><p><img src="https://s2.loli.net/2022/06/22/uIrCGnHoeSYEJgW.png" alt="image-20220622173404033"></p><h5 id="（3）实现方法-2"><a href="#（3）实现方法-2" class="headerlink" title="（3）实现方法"></a>（3）实现方法</h5><p><img src="https://s2.loli.net/2022/06/22/lVHOdBIDgYRU936.png" alt="image-20220622173424592"></p><h5 id="（4）知识回顾与重要考点-1"><a href="#（4）知识回顾与重要考点-1" class="headerlink" title="（4）知识回顾与重要考点"></a>（4）知识回顾与重要考点</h5><p><img src="https://s2.loli.net/2022/06/22/uR1qNYis3kPmdvM.png" alt="image-20220622173441427"></p><h4 id="5-哲学家进餐问题"><a href="#5-哲学家进餐问题" class="headerlink" title="5.哲学家进餐问题"></a>5.哲学家进餐问题</h4><h5 id="（1）问题描述-4"><a href="#（1）问题描述-4" class="headerlink" title="（1）问题描述"></a>（1）问题描述</h5><p><img src="https://s2.loli.net/2022/06/22/NtDq3ZU2ikPLbz5.png" alt="image-20220622173458270"></p><h5 id="（2）问题分析-4"><a href="#（2）问题分析-4" class="headerlink" title="（2）问题分析"></a>（2）问题分析</h5><p><img src="https://s2.loli.net/2022/06/22/K9qOUXu1ALeECcs.png" alt="image-20220622173515430"></p><h5 id="（3）如何实现"><a href="#（3）如何实现" class="headerlink" title="（3）如何实现"></a>（3）如何实现</h5><p><img src="https://s2.loli.net/2022/06/22/muPoCpOWt81nbe9.png" alt="image-20220622173533557"></p><p><img src="https://s2.loli.net/2022/06/22/4ecZpiwEPXDqzWr.png" alt="image-20220622173548146"></p><p><img src="https://s2.loli.net/2022/06/22/38kpYlK2CguUb7e.png" alt="image-20220622173619305"></p><h5 id="（4）知识回顾与重要考点-2"><a href="#（4）知识回顾与重要考点-2" class="headerlink" title="（4）知识回顾与重要考点"></a>（4）知识回顾与重要考点</h5><p><img src="https://s2.loli.net/2022/06/22/PowIKV4u7MfxL6U.png" alt="image-20220622173634255"></p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.3.5 操作系统之信号量机制实现进程的互斥、同步与前驱关系</title>
      <link href="/liangjunyi.github.io/2022/07/26/operating-system-2.3.5-cao-zuo-xi-tong-zhi-xin-hao-liang-ji-zhi-shi-xian-jin-cheng-de-hu-chi-tong-bu-yu-qian-qu-guan-xi/"/>
      <url>/liangjunyi.github.io/2022/07/26/operating-system-2.3.5-cao-zuo-xi-tong-zhi-xin-hao-liang-ji-zhi-shi-xian-jin-cheng-de-hu-chi-tong-bu-yu-qian-qu-guan-xi/</url>
      
        <content type="html"><![CDATA[<h4 id="0-思维导图"><a href="#0-思维导图" class="headerlink" title="0.思维导图"></a>0.思维导图</h4><ul><li><p>在看此小结内容之前，需熟悉这一篇博客里面的知识，关于P、V操作内部实现原理等</p><p><a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/22/2.3.4-cao-zuo-xi-tong-zhi-xin-hao-liang-ji-zhi-zheng-xing-xin-hao-liang-ji-lu-xing-xin-hao-liang-p-v/">https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/22/2.3.4-cao-zuo-xi-tong-zhi-xin-hao-liang-ji-zhi-zheng-xing-xin-hao-liang-ji-lu-xing-xin-hao-liang-p-v/</a></p></li></ul><p><img src="https://s2.loli.net/2022/06/22/2Squak6LrENhbmG.png" alt="image-20220622172329840"></p><h4 id="1-信号量机制实现进程互斥"><a href="#1-信号量机制实现进程互斥" class="headerlink" title="1.信号量机制实现进程互斥"></a>1.信号量机制实现进程互斥</h4><p><img src="https://s2.loli.net/2022/06/22/cF8usLUlmgeGr2C.png" alt="image-20220622172359946"></p><h4 id="2-信号量机制实现进程同步"><a href="#2-信号量机制实现进程同步" class="headerlink" title="2.信号量机制实现进程同步"></a>2.信号量机制实现进程同步</h4><ul><li>想象一下四则运算的顺序，加减乘除；</li></ul><p><img src="https://s2.loli.net/2022/06/22/DWFgdInaiT7Cc6m.png" alt="image-20220622172416659"></p><ul><li>要想理解这一部分知识，必须知道P、V操作的内部实现原理</li></ul><p><img src="https://s2.loli.net/2022/06/22/3Xk8wAiWFycDKUM.png" alt="image-20220622172432187"></p><h4 id="3-信号量机制实现前驱关系"><a href="#3-信号量机制实现前驱关系" class="headerlink" title="3.信号量机制实现前驱关系"></a>3.信号量机制实现前驱关系</h4><p><img src="https://s2.loli.net/2022/06/22/ZtJ2vgduR97lycF.png" alt="image-20220622172447661"></p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.3.4 操作系统之信号量机制（整型信号量、记录型信号量P、V）</title>
      <link href="/liangjunyi.github.io/2022/07/26/operating-system-2.3.4-cao-zuo-xi-tong-zhi-xin-hao-liang-ji-zhi-zheng-xing-xin-hao-liang-ji-lu-xing-xin-hao-liang-p-v/"/>
      <url>/liangjunyi.github.io/2022/07/26/operating-system-2.3.4-cao-zuo-xi-tong-zhi-xin-hao-liang-ji-zhi-zheng-xing-xin-hao-liang-ji-lu-xing-xin-hao-liang-p-v/</url>
      
        <content type="html"><![CDATA[<h4 id="0-思维导图"><a href="#0-思维导图" class="headerlink" title="0.思维导图"></a>0.思维导图</h4><p><img src="https://s2.loli.net/2022/06/22/XoIHdB7gnQhEO82.png" alt="image-20220622152311995"></p><h4 id="1-为什么引入信号量机制？"><a href="#1-为什么引入信号量机制？" class="headerlink" title="1.为什么引入信号量机制？"></a>1.为什么引入信号量机制？</h4><ul><li>为了更好的解决进程互斥与同步的问题</li></ul><p><img src="https://s2.loli.net/2022/06/22/5jxRYZni14Wgh7l.png" alt="image-20220622152342718"></p><h4 id="2-什么是信号量机制？"><a href="#2-什么是信号量机制？" class="headerlink" title="2.什么是信号量机制？"></a>2.什么是信号量机制？</h4><p><img src="https://s2.loli.net/2022/06/22/Udm71XOWI5wnoeM.png" alt="image-20220622152358132"></p><h4 id="3-整型信号量"><a href="#3-整型信号量" class="headerlink" title="3.整型信号量"></a>3.整型信号量</h4><p><img src="https://s2.loli.net/2022/06/22/RjqELfw82PnxsH3.png" alt="image-20220622152428146"></p><h4 id="4-记录型信号量"><a href="#4-记录型信号量" class="headerlink" title="4.记录型信号量"></a>4.记录型信号量</h4><p><img src="https://s2.loli.net/2022/06/22/x4eWu2g85pmCBPL.png" alt="image-20220622152443229"></p><h5 id="（1）举一个生动形象的例子了解记录型信号量"><a href="#（1）举一个生动形象的例子了解记录型信号量" class="headerlink" title="（1）举一个生动形象的例子了解记录型信号量"></a>（1）举一个生动形象的例子了解记录型信号量</h5><ul><li>一张图咱们回忆一下进程的状态</li></ul><p><img src="https://s2.loli.net/2022/06/22/SHlcPDjt6BNKow3.png" alt="image-20220622152506520"></p><ul><li>一个例子</li></ul><p><img src="https://s2.loli.net/2022/06/22/pJ2m3HXbgSuZMso.png" alt="image-20220622152524234"></p><p><img src="https://s2.loli.net/2022/06/22/SMRyIAX5mblxQpJ.png" alt="image-20220622152535745"></p><p><img src="https://s2.loli.net/2022/06/22/P6dYZVnUuDewOaI.png" alt="image-20220622152548328"></p><p><img src="https://s2.loli.net/2022/06/22/frwBIsVyRTnhUuY.png" alt="image-20220622152558442"></p><p><img src="https://s2.loli.net/2022/06/22/PkIpoBM8qOEs1gt.png" alt="image-20220622152609098"></p><h5 id="（2）梳理一下记录型信号量的知识点（P、V）"><a href="#（2）梳理一下记录型信号量的知识点（P、V）" class="headerlink" title="（2）梳理一下记录型信号量的知识点（P、V）"></a>（2）梳理一下记录型信号量的知识点（P、V）</h5><p><img src="https://s2.loli.net/2022/06/22/bW74DxjgI5yMKQP.png" alt="image-20220622152625070"></p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.3.3 操作系统之实现临界区进程互斥的硬件实现方法</title>
      <link href="/liangjunyi.github.io/2022/07/24/operating-system-2.3.3-cao-zuo-xi-tong-zhi-shi-xian-lin-jie-qu-jin-cheng-hu-chi-de-ying-jian-shi-xian-fang-fa/"/>
      <url>/liangjunyi.github.io/2022/07/24/operating-system-2.3.3-cao-zuo-xi-tong-zhi-shi-xian-lin-jie-qu-jin-cheng-hu-chi-de-ying-jian-shi-xian-fang-fa/</url>
      
        <content type="html"><![CDATA[<h4 id="0-思维导图"><a href="#0-思维导图" class="headerlink" title="0.思维导图"></a>0.思维导图</h4><p><img src="https://s2.loli.net/2022/06/22/BYqaUovgxwH4dzT.png" alt="image-20220622152025175"></p><h4 id="1-中断隐藏方法"><a href="#1-中断隐藏方法" class="headerlink" title="1.中断隐藏方法"></a>1.中断隐藏方法</h4><p><img src="https://s2.loli.net/2022/06/22/I4vsGwZCN6x8LuR.png" alt="image-20220622152047088"></p><h4 id="2-TestAndSet指令"><a href="#2-TestAndSet指令" class="headerlink" title="2.TestAndSet指令"></a>2.TestAndSet指令</h4><ul><li>执行TSL指令时，它的内部运转逻辑：</li><li>假设lock现在为false，代表临界资源A空闲，那么我就可以访问这个资源，同时将lock=true，提醒别的进程，这个临界资源A我正在使用，让他们等等</li><li>假设lock为true，代表临界资源正在有人使用，所以我必须等待，并且将lock=true，并不影响什么，所以没关系，只是为了让lock为false时可以上锁，将上锁与检查在一个TSL指令完成。</li></ul><p><img src="https://s2.loli.net/2022/06/22/yfpajAi6YUXLQMR.png" alt="image-20220622152129342"></p><h4 id="3-Swap指令"><a href="#3-Swap指令" class="headerlink" title="3.Swap指令"></a>3.Swap指令</h4><ul><li>old是每个进程都要进行的一步，都必须将old=true</li><li>分析一下这样做的原因：</li><li>因为lock是某一特定临界资源的共享变量，当每一个进程准备访问这个特定的临界资源时，初始化old=true，然后进入while循环进行交换，如果当前lock是false,则交换后old=false,则当前进程可以跳出循环进入临界区代码段，同时因为交换，lock=old=true上锁，不让别的进程来打扰，别的进程会因为lock变为true,一直在while循环等待,当我使用完临界资源，则将lock=false,此时别的进程再交换old和lock就能判断old=false,可以跳出循环，使用临界资源。</li></ul><p><img src="https://s2.loli.net/2022/06/22/pR7aInhFV8DWOEe.png" alt="image-20220622152203433"></p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.3.2 操作系统之实现临界区进程互斥的软件实现方法</title>
      <link href="/liangjunyi.github.io/2022/07/23/operating-system-2.3.2-cao-zuo-xi-tong-zhi-shi-xian-lin-jie-qu-jin-cheng-hu-chi-de-ruan-jian-shi-xian-fang-fa/"/>
      <url>/liangjunyi.github.io/2022/07/23/operating-system-2.3.2-cao-zuo-xi-tong-zhi-shi-xian-lin-jie-qu-jin-cheng-hu-chi-de-ruan-jian-shi-xian-fang-fa/</url>
      
        <content type="html"><![CDATA[<h4 id="0-思维导图"><a href="#0-思维导图" class="headerlink" title="0.思维导图"></a>0.思维导图</h4><p><img src="https://s2.loli.net/2022/06/22/9yrLqn18K4zteil.png" alt="image-20220622151743530"></p><ul><li>软件实现方法的思想：在进入区设置并检查一些标志 来标明是否有进程在临界区中,若已有进程在临界区，则在进入区通过循环检查进行等待，进程离开临界区后则在退出区修改标志。<code>入区通过循环检查进行等待，进程离开临界区后则在退出区修改标志。</code></li></ul><h4 id="1-单标志法"><a href="#1-单标志法" class="headerlink" title="1.单标志法"></a>1.单标志法</h4><p><img src="https://s2.loli.net/2022/06/22/HS7zxgfC8ysleGW.png" alt="image-20220622151809678"></p><p><img src="https://s2.loli.net/2022/06/22/cs93Q5ykiRVWrGe.png" alt="image-20220622151822739"></p><h4 id="2-双标志先检查法"><a href="#2-双标志先检查法" class="headerlink" title="2.双标志先检查法"></a>2.双标志先检查法</h4><p><img src="https://s2.loli.net/2022/06/22/dPNeQak5irKRmXu.png" alt="image-20220622151838349"></p><h4 id="3-双标志后检查法"><a href="#3-双标志后检查法" class="headerlink" title="3.双标志后检查法"></a>3.双标志后检查法</h4><p><img src="https://s2.loli.net/2022/06/22/reafzvwV28GcyW5.png" alt="image-20220622151903653"></p><h4 id="4-Peterson算法"><a href="#4-Peterson算法" class="headerlink" title="4.Peterson算法"></a>4.Peterson算法</h4><p><img src="https://s2.loli.net/2022/06/22/F52oiwSxfX6Amtk.png" alt="image-20220622151916121"></p><p><img src="https://s2.loli.net/2022/06/22/uBkh5M9RsPFS86D.png" alt="image-20220622151924150"></p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.3.1 进程的同步与互斥</title>
      <link href="/liangjunyi.github.io/2022/07/22/operating-system-2.3.1-jin-cheng-de-tong-bu-yu-hu-chi/"/>
      <url>/liangjunyi.github.io/2022/07/22/operating-system-2.3.1-jin-cheng-de-tong-bu-yu-hu-chi/</url>
      
        <content type="html"><![CDATA[<h4 id="0-思维导图"><a href="#0-思维导图" class="headerlink" title="0.思维导图"></a>0.思维导图</h4><p><img src="https://s2.loli.net/2022/06/22/MFjmJZUdbQisvrY.png" alt="image-20220622151424484"></p><h4 id="1-进程同步"><a href="#1-进程同步" class="headerlink" title="1.进程同步"></a>1.进程同步</h4><ul><li>同步也称为直接制约关系。</li><li>在多道程序环境下，进程是并发执行的，不同进程之间存在着不同的相互制约关系。为了协调进程之间的相互制约关系,如等待、传递信息等，引入了进程同步的概念。进程同步是为了解决进程的异步问题。</li><li>一个简单的例子来理解这个概念。</li><li>例如，让系统计算1 + 2x3，假设系统产生两个进程: 一个是加法进程，一个是乘法进程。要让计算结果是正确的，一定要让加法进程发生在乘法进程之后,但实际上操作系统具有异步性,若不加以制约，加法进程发生在乘法进程之前是绝对有可能的，因此要制定一定的机制去约束加法进程，让它在乘法进程完成之后才发生。</li></ul><blockquote><p>异步性：进程具有异步性的特征。异步性是指，各<a href="https://so.csdn.net/so/search?q=%E5%B9%B6%E5%8F%91&amp;spm=1001.2101.3001.7020">并发</a>执行的进程以各自独立的、不可预知的速度向前推进。</p></blockquote><h4 id="2-进程互斥"><a href="#2-进程互斥" class="headerlink" title="2.进程互斥"></a>2.进程互斥</h4><ul><li>互斥，亦称间接制约关系。进程互斥指当一个进程访问某临界资源时，另一个想要访问该临界资源的进程必须等待。当前访问临界资源的进程访问结束，释放该资源之后，另一个进程才能去访问临界资源。</li><li>在这里需复习一下临界资源的概念。</li><li>我们把一个时间段内只允许一个进程使用的资源称为临界资源。许多物理设备(比如摄像头、打印机)都属于临界资源。此外还有许多变量、数据、内存缓冲区等都属于临界资源。</li><li>对临界资源的访问，必须互斥地进行。</li></ul><p><img src="https://s2.loli.net/2022/06/22/mopxkX65ncr3DK2.png" alt="image-20220622151526495"></p><ul><li>为了禁止两个进程同时进入<code>临界区</code>，需遵循以下准则</li></ul><p><img src="https://s2.loli.net/2022/06/22/UuOM5yHCh793xWR.png" alt="image-20220622151548520"></p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.2.5 操作系统之调度算法（时间片轮转调度算法、优先级调度算法、多级反馈队列调度算法）</title>
      <link href="/liangjunyi.github.io/2022/07/20/operating-system-2.2.5-cao-zuo-xi-tong-zhi-diao-du-suan-fa-shi-jian-pian-lun-zhuan-diao-du-suan-fa-you-xian-ji-diao-du-suan-fa-duo-ji-fan-kui-dui-lie-diao-du-suan-fa/"/>
      <url>/liangjunyi.github.io/2022/07/20/operating-system-2.2.5-cao-zuo-xi-tong-zhi-diao-du-suan-fa-shi-jian-pian-lun-zhuan-diao-du-suan-fa-you-xian-ji-diao-du-suan-fa-duo-ji-fan-kui-dui-lie-diao-du-suan-fa/</url>
      
        <content type="html"><![CDATA[<h4 id="0-思维导图"><a href="#0-思维导图" class="headerlink" title="0.思维导图"></a>0.思维导图</h4><p><img src="https://s2.loli.net/2022/06/22/cOZ1dqnieNj5lKh.png" alt="image-20220622150613912"></p><h4 id="1-时间片轮转—RR"><a href="#1-时间片轮转—RR" class="headerlink" title="1.时间片轮转—RR"></a>1.时间片轮转—RR</h4><ul><li>Round-Robin</li></ul><p><img src="https://s2.loli.net/2022/06/22/pfXiSWh5Z2Cwk3F.png" alt="image-20220622150635164"></p><ul><li>时间片为2举例</li></ul><p><img src="https://s2.loli.net/2022/06/22/CJZGO3SroUvQDWs.png" alt="image-20220622150656784"></p><p><img src="https://s2.loli.net/2022/06/22/odHBZKSDnNOTqAJ.png" alt="image-20220622150710187"></p><ul><li>以时间片为5举例</li></ul><p><img src="https://s2.loli.net/2022/06/22/7knXfuw2gmjtrNR.png" alt="image-20220622150743447"></p><ul><li>可能出现的问题，比如与FCFS对比</li></ul><p><img src="https://s2.loli.net/2022/06/22/PgZe9Ybk76ARDLd.png" alt="image-20220622150759976"></p><p><img src="https://s2.loli.net/2022/06/22/17rpyWQdLnIR4NY.png" alt="image-20220622150818802"></p><h4 id="2-优先级调度算法"><a href="#2-优先级调度算法" class="headerlink" title="2.优先级调度算法"></a>2.优先级调度算法</h4><p><img src="https://s2.loli.net/2022/06/22/OieZBWDHJC2MjAy.png" alt="image-20220622150849899"></p><ul><li>非抢占式例子</li></ul><p><img src="https://s2.loli.net/2022/06/22/VbTSdNzMqAQl5ZJ.png" alt="image-20220622150904653"></p><ul><li>抢占式例子</li></ul><p><img src="https://s2.loli.net/2022/06/22/hIu9WwmKf2CnSXG.png" alt="image-20220622150925143"></p><ul><li>补充</li></ul><p><img src="https://s2.loli.net/2022/06/22/zvoXrRTa2sJGedg.png" alt="image-20220622150943407"></p><h4 id="3-多级反馈队列调度算法"><a href="#3-多级反馈队列调度算法" class="headerlink" title="3.多级反馈队列调度算法"></a>3.多级反馈队列调度算法</h4><p><img src="https://s2.loli.net/2022/06/22/HK7exq1Uy8sOLET.png" alt="image-20220622151006059"></p><p><img src="https://s2.loli.net/2022/06/22/gvirt3h8IZn5wfu.png" alt="image-20220622151014757"></p><ul><li>举个例子</li></ul><p><img src="https://s2.loli.net/2022/06/22/LfRjSJ3ZyvpKUoG.png" alt="image-20220622151032034"></p><p><img src="https://s2.loli.net/2022/06/22/uFyiKBZtclXHDsA.png" alt="image-20220622151044648"></p><p><img src="https://s2.loli.net/2022/06/22/cu5r1NzxP8UFWDm.png" alt="image-20220622151052828"></p><p><img src="https://s2.loli.net/2022/06/22/ftxz3hryHkLqPbR.png" alt="image-20220622151101776"></p><p><img src="https://s2.loli.net/2022/06/22/xsDEzCUIH5oYvlK.png" alt="image-20220622151110946"></p><p><img src="https://s2.loli.net/2022/06/22/eGm6n2IwNVYbvyP.png" alt="image-20220622151120570"></p><h4 id="4-三种算法的对比总结"><a href="#4-三种算法的对比总结" class="headerlink" title="4.三种算法的对比总结"></a>4.三种算法的对比总结</h4><p><img src="https://s2.loli.net/2022/06/22/dlYQovjzMPqhRpD.png" alt="image-20220622151135254"></p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.2.4 操作系统之作业/进程调度算法（FCFS先来先服务、SJF短作业优先、HRRN高响应比优先）</title>
      <link href="/liangjunyi.github.io/2022/07/18/operating-system-2.2.4-cao-zuo-xi-tong-zhi-zuo-ye-jin-cheng-diao-du-suan-fa-fcfs-xian-lai-xian-fu-wu-sjf-duan-zuo-ye-you-xian-hrrn-gao-xiang-ying-bi-you-xian/"/>
      <url>/liangjunyi.github.io/2022/07/18/operating-system-2.2.4-cao-zuo-xi-tong-zhi-zuo-ye-jin-cheng-diao-du-suan-fa-fcfs-xian-lai-xian-fu-wu-sjf-duan-zuo-ye-you-xian-hrrn-gao-xiang-ying-bi-you-xian/</url>
      
        <content type="html"><![CDATA[<h4 id="0-思维导图"><a href="#0-思维导图" class="headerlink" title="0.思维导图"></a>0.思维导图</h4><p><img src="https://s2.loli.net/2022/06/22/ot82ispjvGBVDFJ.png" alt="image-20220622150108569"></p><h4 id="1-先来先服务—FCFS"><a href="#1-先来先服务—FCFS" class="headerlink" title="1.先来先服务—FCFS"></a>1.先来先服务—FCFS</h4><ul><li>First come first sever</li></ul><p><img src="https://s2.loli.net/2022/06/22/iVqTCQGj1YcE2Wu.png" alt="image-20220622150128479"></p><p><img src="https://s2.loli.net/2022/06/22/SoEZWXF6deRPk7m.png" alt="image-20220622150137853"></p><h4 id="2-短作业优先—SJF"><a href="#2-短作业优先—SJF" class="headerlink" title="2.短作业优先—SJF"></a>2.短作业优先—SJF</h4><ul><li>Shortest Job First</li></ul><p><img src="https://s2.loli.net/2022/06/22/QCihWDGM1SPRFeb.png" alt="image-20220622150201710"></p><ul><li>非抢占式—SJF</li></ul><p><img src="https://s2.loli.net/2022/06/22/oXiAk1usnlcbdV3.png" alt="image-20220622150219442"></p><ul><li>抢占式—SJF(SRTN)</li></ul><p><img src="https://s2.loli.net/2022/06/22/c8dqtJSQDwvIzOk.png" alt="image-20220622150240056"></p><p><img src="https://s2.loli.net/2022/06/22/PcCEZMBDXde1z4Q.png" alt="image-20220622150300154"></p><ul><li>注意几个细节</li></ul><p><img src="https://s2.loli.net/2022/06/22/vEBUDSN9OztWrdm.png" alt="image-20220622150318165"></p><h4 id="3-高响应比优先—HRRN"><a href="#3-高响应比优先—HRRN" class="headerlink" title="3.高响应比优先—HRRN"></a>3.高响应比优先—HRRN</h4><ul><li>Highest Response Ratio Next</li></ul><p><img src="https://s2.loli.net/2022/06/22/9afIhjdckgyZlbP.png" alt="image-20220622150331878"></p><p><img src="https://s2.loli.net/2022/06/22/mDT9QJOh5rPloiF.png" alt="image-20220622150342301"></p><p><img src="https://s2.loli.net/2022/06/22/IurUpPD1sdwijBc.png" alt="image-20220622150352036"></p><h4 id="4-三种算法的对比和总结"><a href="#4-三种算法的对比和总结" class="headerlink" title="4.三种算法的对比和总结"></a>4.三种算法的对比和总结</h4><p><img src="https://s2.loli.net/2022/06/22/UaAkXWFfq25OM64.png" alt="image-20220622150407782"></p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.2.3 操作系统之调度算法的评价指标（cpu利用率、系统吞吐量、周转时间、等待时间、响应时间）</title>
      <link href="/liangjunyi.github.io/2022/07/16/operating-system-2.2.3-cao-zuo-xi-tong-zhi-diao-du-suan-fa-de-ping-jie-zhi-biao-cpu-li-yong-lu-xi-tong-tun-tu-liang-zhou-zhuan-shi-jian-deng-dai-shi-jian-xiang-ying-shi-jian/"/>
      <url>/liangjunyi.github.io/2022/07/16/operating-system-2.2.3-cao-zuo-xi-tong-zhi-diao-du-suan-fa-de-ping-jie-zhi-biao-cpu-li-yong-lu-xi-tong-tun-tu-liang-zhou-zhuan-shi-jian-deng-dai-shi-jian-xiang-ying-shi-jian/</url>
      
        <content type="html"><![CDATA[<h4 id="0-思维导图"><a href="#0-思维导图" class="headerlink" title="0.思维导图"></a>0.思维导图</h4><p><img src="https://s2.loli.net/2022/06/22/AL3NjazkZu9xHnp.png" alt="image-20220622145812862"></p><h4 id="1-CPU利用率"><a href="#1-CPU利用率" class="headerlink" title="1.CPU利用率"></a>1.CPU利用率</h4><p><img src="https://s2.loli.net/2022/06/22/q9nzbtcGpWkgIlN.png" alt="image-20220622145826906"></p><h4 id="2-系统吞吐量"><a href="#2-系统吞吐量" class="headerlink" title="2.系统吞吐量"></a>2.系统吞吐量</h4><p><img src="https://s2.loli.net/2022/06/22/uZ6bnzYDk1SghdU.png" alt="image-20220622145852015"></p><h4 id="3-周转时间"><a href="#3-周转时间" class="headerlink" title="3.周转时间"></a>3.周转时间</h4><p><img src="https://s2.loli.net/2022/06/22/uaH3RwrSdKXVZ5J.png" alt="image-20220622145906116"></p><p><img src="https://s2.loli.net/2022/06/22/qrvs4nWFeyAk1uM.png" alt="image-20220622145921661"></p><h4 id="4-等待时间"><a href="#4-等待时间" class="headerlink" title="4.等待时间"></a>4.等待时间</h4><p><img src="https://s2.loli.net/2022/06/22/BPmg8Hx9oztI6aM.png" alt="image-20220622145935513"></p><h4 id="5-响应时间"><a href="#5-响应时间" class="headerlink" title="5.响应时间"></a>5.响应时间</h4><p><img src="https://s2.loli.net/2022/06/22/t9n4wuhNkbFgU5p.png" alt="image-20220622145952270"></p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.2.2 操作系统之进程调度的时机（主动放弃与被动放弃）、切换与过程（广义与狭义）、方式（非剥夺与剥夺）</title>
      <link href="/liangjunyi.github.io/2022/07/14/operating-system-2.2.2-cao-zuo-xi-tong-zhi-jin-cheng-diao-du-de-shi-ji-zhu-dong-fang-qi-yu-bei-dong-fang-qi-qie-huan-yu-guo-cheng-guang-yi-yu-xia-yi-fang-shi-fei-bo-duo-yu-bo-duo/"/>
      <url>/liangjunyi.github.io/2022/07/14/operating-system-2.2.2-cao-zuo-xi-tong-zhi-jin-cheng-diao-du-de-shi-ji-zhu-dong-fang-qi-yu-bei-dong-fang-qi-qie-huan-yu-guo-cheng-guang-yi-yu-xia-yi-fang-shi-fei-bo-duo-yu-bo-duo/</url>
      
        <content type="html"><![CDATA[<h4 id="0-思维导图"><a href="#0-思维导图" class="headerlink" title="0.思维导图"></a>0.思维导图</h4><p><img src="https://s2.loli.net/2022/06/22/a1IuO52T6UnCbJY.png" alt="image-20220622145438601"></p><h4 id="1-时机"><a href="#1-时机" class="headerlink" title="1.时机"></a>1.时机</h4><h5 id="（1）什么时候进行进程调度？"><a href="#（1）什么时候进行进程调度？" class="headerlink" title="（1）什么时候进行进程调度？"></a>（1）什么时候进行进程调度？</h5><p><img src="https://s2.loli.net/2022/06/22/3H2T1LINqX7Kbc8.png" alt="image-20220622145455121"></p><h5 id="（2）什么时候不能进行进程调度？"><a href="#（2）什么时候不能进行进程调度？" class="headerlink" title="（2）什么时候不能进行进程调度？"></a>（2）什么时候不能进行进程调度？</h5><p><img src="https://s2.loli.net/2022/06/22/xtkYE2QGBITXwri.png" alt="image-20220622145508216"></p><h5 id="（3）OS内核程序临界区与普通临界区的进程调度情况"><a href="#（3）OS内核程序临界区与普通临界区的进程调度情况" class="headerlink" title="（3）OS内核程序临界区与普通临界区的进程调度情况"></a>（3）OS内核程序临界区与普通临界区的进程调度情况</h5><p><img src="https://s2.loli.net/2022/06/22/K3gtEO2kSlWfe8q.png" alt="image-20220622145531565"></p><p><img src="https://s2.loli.net/2022/06/22/HoLa8CDVGIqUmng.png" alt="image-20220622145550716"></p><h4 id="2-进程调度的方式"><a href="#2-进程调度的方式" class="headerlink" title="2.进程调度的方式"></a>2.进程调度的方式</h4><ul><li>所谓进程调度方式，是指当某个进程正在处理机上执行时，若有某个更为重要或紧迫的进程需要处理，即有优先权更高的进程进入就绪队列，此时应如何分配处理机。</li></ul><p><img src="https://s2.loli.net/2022/06/22/VUHm8bMyYzRWvXN.png" alt="image-20220622145615600"></p><h4 id="3-进程的切换和过程"><a href="#3-进程的切换和过程" class="headerlink" title="3.进程的切换和过程"></a>3.进程的切换和过程</h4><p><img src="https://s2.loli.net/2022/06/22/4ulyoBCZPi98If5.png" alt="image-20220622145628186"></p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.2.1操作系统之处理机调度的概念及层次</title>
      <link href="/liangjunyi.github.io/2022/07/11/operating-system-2.2.1-cao-zuo-xi-tong-zhi-chu-li-ji-diao-du-de-gai-nian-ji-ceng-ci/"/>
      <url>/liangjunyi.github.io/2022/07/11/operating-system-2.2.1-cao-zuo-xi-tong-zhi-chu-li-ji-diao-du-de-gai-nian-ji-ceng-ci/</url>
      
        <content type="html"><![CDATA[<h4 id="0-思维导图"><a href="#0-思维导图" class="headerlink" title="0.思维导图"></a>0.思维导图</h4><p><img src="https://s2.loli.net/2022/06/22/RKPclXFrLUAONu3.png" alt="image-20220622145057251"></p><h4 id="1-调度的基本概念"><a href="#1-调度的基本概念" class="headerlink" title="1.调度的基本概念"></a>1.调度的基本概念</h4><p><img src="https://s2.loli.net/2022/06/22/Sa7wB5J86eYN2CE.png" alt="image-20220622145112236"></p><h4 id="2-调度的三个层次"><a href="#2-调度的三个层次" class="headerlink" title="2.调度的三个层次"></a>2.调度的三个层次</h4><h5 id="（1）高级调度（-作业调度）"><a href="#（1）高级调度（-作业调度）" class="headerlink" title="（1）高级调度（ 作业调度）"></a>（1）高级调度（ 作业调度）</h5><p><img src="https://s2.loli.net/2022/06/22/p2NACeDaxJXrol5.png" alt="image-20220622145130248"></p><h5 id="（2）中级调度（内存调度）"><a href="#（2）中级调度（内存调度）" class="headerlink" title="（2）中级调度（内存调度）"></a>（2）中级调度（内存调度）</h5><p><img src="https://s2.loli.net/2022/06/22/MxgYLoUTj9CqdJ3.png" alt="image-20220622145145368"></p><h5 id="（3）进程的挂起状态与七状态模型"><a href="#（3）进程的挂起状态与七状态模型" class="headerlink" title="（3）进程的挂起状态与七状态模型"></a>（3）进程的<a href="https://so.csdn.net/so/search?q=%E6%8C%82%E8%B5%B7&amp;spm=1001.2101.3001.7020">挂起</a>状态与七状态模型</h5><p><img src="https://s2.loli.net/2022/06/22/k5xs8PSqAWC94gy.png" alt="image-20220622145159237"></p><h5 id="（4）低级调度（进程调度）"><a href="#（4）低级调度（进程调度）" class="headerlink" title="（4）低级调度（进程调度）"></a>（4）低级调度（进程调度）</h5><p><img src="https://s2.loli.net/2022/06/22/SAwqX6GKaoVTenW.png" alt="image-20220622145214846"></p><h5 id="（5）三层调度的联系和对比"><a href="#（5）三层调度的联系和对比" class="headerlink" title="（5）三层调度的联系和对比"></a>（5）三层调度的联系和对比</h5><p><img src="https://s2.loli.net/2022/06/22/sMoEpNB5F3WrzAT.png" alt="image-20220622145228286"></p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.1.5 操作系统之线程概念与多线程模型</title>
      <link href="/liangjunyi.github.io/2022/07/11/operating-system-2.1.5-cao-zuo-xi-tong-zhi-xian-cheng-gai-nian-yu-duo-xian-cheng-mo-xing/"/>
      <url>/liangjunyi.github.io/2022/07/11/operating-system-2.1.5-cao-zuo-xi-tong-zhi-xian-cheng-gai-nian-yu-duo-xian-cheng-mo-xing/</url>
      
        <content type="html"><![CDATA[<h3 id="0-思维导图"><a href="#0-思维导图" class="headerlink" title="0.思维导图"></a>0.思维导图</h3><p><img src="https://s2.loli.net/2022/06/22/taBpDyKwYd9qNGs.png" alt="image-20220622144520100"></p><h3 id="1-为什么要引入线程？"><a href="#1-为什么要引入线程？" class="headerlink" title="1.为什么要引入线程？"></a>1.为什么要引入线程？</h3><p><img src="https://s2.loli.net/2022/06/22/MkLWR1UXerbYvAF.png" alt="image-20220622144535055"></p><ul><li>为了方便于理解，我打开了我的任务管理器，可以看出chrome一个进程，下面有很多分支，可以把这些分支当做线程看待，PID即进程和线程都有的标识符。</li></ul><p><img src="https://s2.loli.net/2022/06/22/TgkBl6NDSWZF9rL.png" alt="image-20220622144550774"></p><h3 id="2-什么是线程？"><a href="#2-什么是线程？" class="headerlink" title="2.什么是线程？"></a>2.什么是线程？</h3><p><img src="https://s2.loli.net/2022/06/22/DRcCwfdtGFyoOY2.png" alt="image-20220622144604040"></p><h3 id="3-引入线程带来的变化及进程与线程的比较"><a href="#3-引入线程带来的变化及进程与线程的比较" class="headerlink" title="3.引入线程带来的变化及进程与线程的比较"></a>3.引入线程带来的变化及进程与线程的比较</h3><p><img src="https://s2.loli.net/2022/06/22/1Lld5ihYqzGZs6H.png" alt="image-20220622144616321"></p><h3 id="4-线程的属性"><a href="#4-线程的属性" class="headerlink" title="4.线程的属性"></a>4.线程的属性</h3><p><img src="https://s2.loli.net/2022/06/22/qFXdQjt1wEA2JeB.png" alt="image-20220622144631630"></p><h3 id="5-线程的实现方式"><a href="#5-线程的实现方式" class="headerlink" title="5.线程的实现方式"></a>5.线程的实现方式</h3><ul><li>前面我们了解了引入线程的好处和引入线程的变化，以及线程的属性，那么线程如何实现呢？</li><li>线程的实现分为两类：<code>用户级线程</code>(User-Level Thread,UTL)和<code>内核级线程</code>(Kernel-Level Thread, KTL)l。内核级线程又称<code>内核支持的线程</code>。</li></ul><h4 id="（1）用户级线程"><a href="#（1）用户级线程" class="headerlink" title="（1）用户级线程"></a>（1）用户级线程</h4><p><img src="https://s2.loli.net/2022/06/22/vd5Me1UgcPWHTfB.png" alt="image-20220622144653647"></p><h4 id="（2）内核级线程"><a href="#（2）内核级线程" class="headerlink" title="（2）内核级线程"></a>（2）内核级线程</h4><p><img src="https://s2.loli.net/2022/06/22/WyqTCvDBcISrKi5.png" alt="image-20220622144707510"></p><h4 id="（3）特殊的组合方式及重点注意"><a href="#（3）特殊的组合方式及重点注意" class="headerlink" title="（3）特殊的组合方式及重点注意"></a>（3）特殊的组合方式及重点注意</h4><p><img src="https://s2.loli.net/2022/06/22/Z3xOgo1s4Q7qYHk.png" alt="image-20220622144723973"></p><h3 id="6-多线程模型"><a href="#6-多线程模型" class="headerlink" title="6.多线程模型"></a>6.多线程模型</h3><ul><li>前面我们提到了线程的实现方式，有用户级和内核级。那么这两种模式的交叉组合就会产生几种不一样的组织结构，即不一样的模型。</li></ul><h4 id="（1）多对一模型"><a href="#（1）多对一模型" class="headerlink" title="（1）多对一模型"></a>（1）多对一模型</h4><p><img src="https://s2.loli.net/2022/06/22/Ix41BqlZYnsDewN.png" alt="image-20220622144803020"></p><h4 id="（2）一对一模型"><a href="#（2）一对一模型" class="headerlink" title="（2）一对一模型"></a>（2）一对一模型</h4><p><img src="https://s2.loli.net/2022/06/22/cJLrEpx3lTS428h.png" alt="image-20220622144816731"></p><h4 id="（3）多对多模型"><a href="#（3）多对多模型" class="headerlink" title="（3）多对多模型"></a>（3）多对多模型</h4><ul><li>此种模型效率是三种模型中最好的</li></ul><p><img src="https://s2.loli.net/2022/06/22/lYEW89ZsIGqiAX4.png" alt="image-20220622144837010"></p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.1.4 进程之间的通信（共享通信、消息传递、管道通信）</title>
      <link href="/liangjunyi.github.io/2022/07/09/operating-system-2.1.4-jin-cheng-zhi-jian-de-tong-xin-gong-xiang-tong-xin-xiao-xi-chuan-di-guan-dao-tong-xin/"/>
      <url>/liangjunyi.github.io/2022/07/09/operating-system-2.1.4-jin-cheng-zhi-jian-de-tong-xin-gong-xiang-tong-xin-xiao-xi-chuan-di-guan-dao-tong-xin/</url>
      
        <content type="html"><![CDATA[<h3 id="0-思维导图"><a href="#0-思维导图" class="headerlink" title="0.思维导图"></a>0.思维导图</h3><p><img src="https://s2.loli.net/2022/06/22/yrpt7R68aUI3zx9.png" alt="image-20220622144155478"></p><h3 id="1-什么是进程通信？"><a href="#1-什么是进程通信？" class="headerlink" title="1.什么是进程通信？"></a>1.什么是进程通信？</h3><ul><li>图中我们可以知道什么是进程通信，以及进程通信的低级和高级方式；</li><li>我们还可以知道为什么要引入进程通信方式，以及它的意义</li></ul><p><img src="https://s2.loli.net/2022/06/22/gGiOmH9kAx8L4dh.png" alt="image-20220622144227582"></p><h3 id="2-共享存储"><a href="#2-共享存储" class="headerlink" title="2.共享存储"></a>2.共享存储</h3><ul><li>共享一块大家都可以访问的空间，一次只能有一个进程进行读或写操作</li></ul><p><img src="https://s2.loli.net/2022/06/22/RVscEbqWnyxukvJ.png" alt="image-20220622144252938"></p><h3 id="3-管道通信"><a href="#3-管道通信" class="headerlink" title="3.管道通信"></a>3.管道通信</h3><p><img src="https://s2.loli.net/2022/06/22/ICgRpuVQWfkix4P.png" alt="image-20220622144318225"></p><h3 id="4-消息传递"><a href="#4-消息传递" class="headerlink" title="4.消息传递"></a>4.消息传递</h3><ul><li>发送信息的进程将消息头写好，接受信息进程根据消息头读取信息或寻找信封是哪一个</li></ul><p><img src="https://s2.loli.net/2022/06/22/hSJ1kuv8DfTrFjH.png" alt="image-20220622144341383"></p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.1.3 操作系统之原语实现对进程的控制</title>
      <link href="/liangjunyi.github.io/2022/07/05/operating-system-2.1.3-cao-zuo-xi-tong-zhi-yuan-yu-shi-xian-dui-jin-cheng-de-kong-zhi/"/>
      <url>/liangjunyi.github.io/2022/07/05/operating-system-2.1.3-cao-zuo-xi-tong-zhi-yuan-yu-shi-xian-dui-jin-cheng-de-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="0-思维导图"><a href="#0-思维导图" class="headerlink" title="0.思维导图"></a>0.思维导图</h3><p><img src="https://s2.loli.net/2022/06/22/1W9hzkdfNcIo36L.png" alt="image-20220622143344638"></p><h3 id="1-什么是进程控制？"><a href="#1-什么是进程控制？" class="headerlink" title="1.什么是进程控制？"></a>1.什么是进程控制？</h3><p><img src="https://s2.loli.net/2022/06/22/IQsuaL1AV2rtH36.png" alt="image-20220622143412841"></p><h3 id="2-原语实现对进程的控制"><a href="#2-原语实现对进程的控制" class="headerlink" title="2.原语实现对进程的控制"></a>2.原语实现对进程的控制</h3><ul><li>关于原语的作用和处在操作系统内核的重要地位可参考：<a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/19/1.3.1-cao-zuo-xi-tong-de-yun-xing-ji-zhi-he-ti-xi-jie-gou-da-nei-he-xiao-nei-he/">https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/19/1.3.1-cao-zuo-xi-tong-de-yun-xing-ji-zhi-he-ti-xi-jie-gou-da-nei-he-xiao-nei-he/</a></li></ul><p><img src="https://s2.loli.net/2022/06/22/4ZeQ6NHpaWVjcCk.png" alt="image-20220622143541206"></p><h3 id="3-回忆进程的组织"><a href="#3-回忆进程的组织" class="headerlink" title="3.回忆进程的组织"></a>3.回忆进程的组织</h3><ul><li>进程在操作系统中的组织使各个进程能够有序的进行切换和运行</li></ul><p><img src="https://s2.loli.net/2022/06/22/8u2tQyLAFsK6r1I.png" alt="image-20220622143608218"></p><h3 id="4-进程控制大致图解"><a href="#4-进程控制大致图解" class="headerlink" title="4.进程控制大致图解"></a>4.进程控制大致图解</h3><p><img src="https://s2.loli.net/2022/06/22/2bjRMpNr7taHZXE.png" alt="image-20220622143636088"></p><blockquote><p>这里说明一下调度和切换的区别：<br><code>调度</code>是指决定资源分配给哪个进程的行为，是一种决策行为<br><code>切换</code>是指实际分配的行为，是执行行为<br>一般来说现有资源调度，后有进程切换</p></blockquote><h3 id="5-进程控制原语的相同点"><a href="#5-进程控制原语的相同点" class="headerlink" title="5.进程控制原语的相同点"></a>5.进程控制原语的相同点</h3><p><img src="https://s2.loli.net/2022/06/22/4uw8vaP3RqcEdlZ.png" alt="image-20220622143703889"></p><ul><li>接下来我们就具体学习一下关于进程控制的五种原语，<code>进程的创建、终止、唤醒、阻塞、切换；</code></li></ul><h3 id="6-进程控制的五种原语"><a href="#6-进程控制的五种原语" class="headerlink" title="6.进程控制的五种原语"></a>6.进程控制的五种原语</h3><h4 id="（1）进程的创建原语"><a href="#（1）进程的创建原语" class="headerlink" title="（1）进程的创建原语"></a>（1）进程的创建原语</h4><p><img src="https://s2.loli.net/2022/06/22/MphgKYUD86EjIB9.png" alt="image-20220622143726497"></p><h4 id="（2）进程的终止原语"><a href="#（2）进程的终止原语" class="headerlink" title="（2）进程的终止原语"></a>（2）进程的终止原语</h4><p><img src="https://s2.loli.net/2022/06/22/WMQHckl3DmyKJ1I.png" alt="image-20220622143743932"></p><h4 id="（3）进程的唤醒和阻塞原语"><a href="#（3）进程的唤醒和阻塞原语" class="headerlink" title="（3）进程的唤醒和阻塞原语"></a>（3）进程的唤醒和阻塞原语</h4><ul><li>进程的阻塞和唤醒原语是<code>成对存在</code>的，必须<code>成对使用</code>。</li><li><code>阻塞原语</code>是由被阻塞进程自我调用实现的</li><li><code>唤醒原语</code>是由一个被唤醒进程合作或被其他相关的进程调用实现的</li></ul><p><img src="https://s2.loli.net/2022/06/22/SpRN4LfO1AHj9Jy.png" alt="image-20220622143809586"></p><h4 id="（4）进程的切换原语"><a href="#（4）进程的切换原语" class="headerlink" title="（4）进程的切换原语"></a>（4）进程的切换原语</h4><p><img src="https://s2.loli.net/2022/06/22/F76CtHiokWKvMrT.png" alt="image-20220622143826011"></p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.1.2 操作系统之进程的状态（运行、就绪、阻塞、创建、终止）及转换（就绪-&gt;运行、运行-&gt;就绪、运行-&gt;阻塞、阻塞-&gt;就绪）</title>
      <link href="/liangjunyi.github.io/2022/07/02/operating-system-2.1.2-cao-zuo-xi-tong-zhi-jin-cheng-de-zhuang-tai-yun-xing-jiu-xu-zu-sai-chuang-jian-zhong-zhi-ji-zhuan-huan-jiu-xu-yun-xing-yun-xing-jiu-xu-yun-xing-zu-sai-zu-sai-jiu-xu/"/>
      <url>/liangjunyi.github.io/2022/07/02/operating-system-2.1.2-cao-zuo-xi-tong-zhi-jin-cheng-de-zhuang-tai-yun-xing-jiu-xu-zu-sai-chuang-jian-zhong-zhi-ji-zhuan-huan-jiu-xu-yun-xing-yun-xing-jiu-xu-yun-xing-zu-sai-zu-sai-jiu-xu/</url>
      
        <content type="html"><![CDATA[<h3 id="1-思维导图总览"><a href="#1-思维导图总览" class="headerlink" title="1.思维导图总览"></a>1.思维导图总览</h3><p><img src="https://s2.loli.net/2022/06/21/iF9cG1HMpfyqlY3.png" alt="image-20220621121506558"></p><h3 id="2-进程的状态"><a href="#2-进程的状态" class="headerlink" title="2.进程的状态"></a>2.进程的状态</h3><h4 id="（1）三种基本状态（就绪、运行、阻塞）"><a href="#（1）三种基本状态（就绪、运行、阻塞）" class="headerlink" title="（1）三种基本状态（就绪、运行、阻塞）"></a>（1）三种基本状态（就绪、运行、阻塞）</h4><p><img src="https://s2.loli.net/2022/06/21/unsFP1k7xvB8ZCm.png" alt="image-20220621121534503"></p><h4 id="（2）创建态和结束态"><a href="#（2）创建态和结束态" class="headerlink" title="（2）创建态和结束态"></a>（2）创建态和结束态</h4><p><img src="https://s2.loli.net/2022/06/21/XvGnqm4lrizT5Lh.png" alt="image-20220621121547985"></p><ul><li>创建态</li></ul><p><img src="https://s2.loli.net/2022/06/21/7DqYTpGHnSvF432.png" alt="image-20220621121611883"></p><ul><li>结束态</li></ul><p><img src="https://s2.loli.net/2022/06/21/jAuPHLxkC7GEDMl.png" alt="image-20220621121629203"></p><h3 id="3-进程状态之间的转换"><a href="#3-进程状态之间的转换" class="headerlink" title="3.进程状态之间的转换"></a>3.进程状态之间的转换</h3><ul><li>进程一共有如下5种状态，那么他们之间如何实现切换呢？</li></ul><p><img src="https://s2.loli.net/2022/06/21/UEq9wr3puWislI5.png" alt="image-20220621121653484"></p><ul><li>咱们从一个进程的从无到有看起，来了解进程5种状态之间的转换</li></ul><p><img src="https://s2.loli.net/2022/06/21/aOvBM9ozEcuqQ4s.png" alt="image-20220621121712243"></p><ul><li>来一张形象生动的图片感受一下5种状态之间的切换</li></ul><p><img src="https://s2.loli.net/2022/06/21/Agh4ETjv8sUGcIi.png" alt="image-20220621121746010"></p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.1.1 操作系统之进程的定义、特征、组成、组织</title>
      <link href="/liangjunyi.github.io/2022/06/30/operating-system-2.1.1-cao-zuo-xi-tong-zhi-jin-cheng-de-ding-yi-te-zheng-zu-cheng-zu-zhi/"/>
      <url>/liangjunyi.github.io/2022/06/30/operating-system-2.1.1-cao-zuo-xi-tong-zhi-jin-cheng-de-ding-yi-te-zheng-zu-cheng-zu-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-进程的定义"><a href="#1-进程的定义" class="headerlink" title="1.进程的定义"></a>1.进程的定义</h2><h3 id="（1）程序的概念"><a href="#（1）程序的概念" class="headerlink" title="（1）程序的概念"></a>（1）程序的概念</h3><p><img src="https://s2.loli.net/2022/06/21/fFWQDqBr79hnATP.png" alt="image-20220621120418163"></p><h3 id="（2）进程的概念"><a href="#（2）进程的概念" class="headerlink" title="（2）进程的概念"></a>（2）进程的概念</h3><p><img src="https://s2.loli.net/2022/06/21/9Ezw5Cc2saHmfgP.png" alt="image-20220621120437538"></p><ul><li>进程和程序的区别和联系：</li></ul><blockquote><p>区别：<br>1)进程是动态的;程序是静态的。<br>(2)进程有独立性，能并发执行;程序不能并发执行。<br>(3)二者无一一对应关系。<br>(4)进程异步运行，会相互制约;程序不具备此特征。<br>但是，进程与程序又有密切的联系： 进程不能脱离具体程序而虚设， 程序规定了相应进程所要完成的动作。<br>(5)组成不同。进程包含PCB、程序段、数据段。程序包含数据和指令代码。<br>(6)程序是一个包含了所有指令和数据的静态实体。本身除占用磁盘的存储空间外，并不占用系统如CPU、内存等运行资源。<br>(7)进程由程序段、数据段和PCB构成,会占用系统如CPU、内存等运行资源。<br>(8)一个程序可以启动多个进程来共同完成。<br>联系：进程不能脱离具体程序而虚设， 程序规定了相应进程所要完成的动作。</p></blockquote><h3 id="（3）进程的定义"><a href="#（3）进程的定义" class="headerlink" title="（3）进程的定义"></a>（3）进程的定义</h3><p><img src="https://s2.loli.net/2022/06/21/RZAiP8cVoq1trKb.png" alt="image-20220621120516200"></p><h2 id="2-进程的特征"><a href="#2-进程的特征" class="headerlink" title="2.进程的特征"></a>2.进程的特征</h2><p><img src="https://s2.loli.net/2022/06/21/qNjsMg8Rp43VKzX.png" alt="image-20220621120530224"></p><h2 id="3-进程的组成"><a href="#3-进程的组成" class="headerlink" title="3.进程的组成"></a>3.进程的组成</h2><p><img src="https://s2.loli.net/2022/06/21/VLp9YSClThRtDub.png" alt="image-20220621120703870"></p><ul><li><p>而其中最重要的就是进程控制块PCB（Process Control Block）</p></li><li><p>PCB简介：<br>    PCB中记录了操作系统所需的，用于描述进程的当前情况以及控制进程运行的全部信息。<br>    PCB的作用是使一个在多道程序环境下不能独立运行的程序（含数据），成为一个能独立运行的基本单位，一个能与其他进程并发执行的进程。<br>    或者说，OS是根据PCB来对并发执行的进程进行控制和管理的。<br>    例如，当OS要调度某进程执行时，要从该进程的PCB中查处其现行状态及优先级；在调度到某进程后，要根据其PCB中所保存的处理机状态信息，设置该进程恢复运行的现场，并根据其PCB中的程序和数据的内存始址，找到其程序和数据；<br>    进程在执行过程中，当需要和与之合作的进程实现同步，通信或者访问文件时，也都需要访问PCB；<br>    当进程由于某种原因而暂停执行时，又须将器断点的处理机环境保存在PCB中。<br>    可见，在进程的整个生命期中，系统总是通过PCB对进程进行控制的，即系统是根据进程的PCB而不是任何别的什么而感知到该进程的存在的。<br>    所以说，PCB是进程存在的唯一标志。</p></li></ul><p>PCB通常包含的内容：</p><p><img src="https://s2.loli.net/2022/06/21/wnWbeYKhgID8HaC.png" alt="image-20220621120734699"></p><h2 id="4-进程的组织"><a href="#4-进程的组织" class="headerlink" title="4.进程的组织"></a>4.进程的组织</h2><p><img src="https://s2.loli.net/2022/06/21/OsniLAJhydcVNPI.png" alt="image-20220621120749872"></p><h3 id="（1）链接方式"><a href="#（1）链接方式" class="headerlink" title="（1）链接方式"></a>（1）链接方式</h3><p><img src="https://s2.loli.net/2022/06/21/6ihjYIPUgwEHy5o.png" alt="image-20220621120805609"></p><h3 id="（2）索引方式"><a href="#（2）索引方式" class="headerlink" title="（2）索引方式"></a>（2）索引方式</h3><p><img src="https://s2.loli.net/2022/06/21/oJiKyT72gE8nrtP.png" alt="image-20220621120832281"></p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.3.3 系统调用（执行过程、访管指令、库函数与系统调用）</title>
      <link href="/liangjunyi.github.io/2022/06/28/operating-system-1.3.3-xi-tong-diao-yong-zhi-xing-guo-cheng-fang-guan-zhi-ling-ku-han-shu-yu-xi-tong-diao-yong/"/>
      <url>/liangjunyi.github.io/2022/06/28/operating-system-1.3.3-xi-tong-diao-yong-zhi-xing-guo-cheng-fang-guan-zhi-ling-ku-han-shu-yu-xi-tong-diao-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="1-系统调用知识框架图"><a href="#1-系统调用知识框架图" class="headerlink" title="1.系统调用知识框架图"></a>1.系统调用知识框架图</h2><p><img src="https://s2.loli.net/2022/06/21/amivB2VeZwrg7DR.png" alt="image-20220621115442927"></p><h2 id="2-系统调用和库函数的区别"><a href="#2-系统调用和库函数的区别" class="headerlink" title="2.系统调用和库函数的区别"></a>2.系统调用和库函数的区别</h2><p><img src="https://s2.loli.net/2022/06/21/WKYB53JezNGUoDI.png" alt="image-20220621115502996"></p><h2 id="3-系统调用的执行过程"><a href="#3-系统调用的执行过程" class="headerlink" title="3.系统调用的执行过程"></a>3.系统调用的执行过程</h2><p><img src="https://s2.loli.net/2022/06/21/c7hPaNUw5xyZOVE.png" alt="image-20220621115522892"></p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.3.2 中断和异常（内中断和外中断、中断处理过程）</title>
      <link href="/liangjunyi.github.io/2022/06/24/operating-system-1.3.2-zhong-duan-he-yi-chang-nei-zhong-duan-he-wai-zhong-duan-zhong-duan-chu-li-guo-cheng/"/>
      <url>/liangjunyi.github.io/2022/06/24/operating-system-1.3.2-zhong-duan-he-yi-chang-nei-zhong-duan-he-wai-zhong-duan-zhong-duan-chu-li-guo-cheng/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/06/21/8yMbzUQ3WjKRuig.png" alt="20200223165736223"></p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.3.1 操作系统的运行机制和体系结构（大内核、小内核）</title>
      <link href="/liangjunyi.github.io/2022/06/22/operating-system-1.3.1-cao-zuo-xi-tong-de-yun-xing-ji-zhi-he-ti-xi-jie-gou-da-nei-he-xiao-nei-he/"/>
      <url>/liangjunyi.github.io/2022/06/22/operating-system-1.3.1-cao-zuo-xi-tong-de-yun-xing-ji-zhi-he-ti-xi-jie-gou-da-nei-he-xiao-nei-he/</url>
      
        <content type="html"><![CDATA[<h2 id="1-操作系统的运行机制和体系结构"><a href="#1-操作系统的运行机制和体系结构" class="headerlink" title="1.操作系统的运行机制和体系结构"></a>1.操作系统的运行机制和体系结构</h2><p><img src="https://s2.loli.net/2022/06/21/af43RsEHF51OpVU.png" alt="2020022223135066"></p><h2 id="2-操作系统内核在计算机系统中的层次结构"><a href="#2-操作系统内核在计算机系统中的层次结构" class="headerlink" title="2.操作系统内核在计算机系统中的层次结构"></a>2.操作系统内核在计算机系统中的层次结构</h2><p><img src="https://s2.loli.net/2022/06/21/aY3XqrSMJI4PHEo.png" alt="image-20220621114935951"></p><h2 id="3-操作系统体系结构类比"><a href="#3-操作系统体系结构类比" class="headerlink" title="3.操作系统体系结构类比"></a>3.操作系统体系结构类比</h2><p><img src="https://s2.loli.net/2022/06/21/trxOWNJYTZUHIXD.png" alt="image-20220621114951155"></p><h2 id="4-操作系统用户态和核心态的转换"><a href="#4-操作系统用户态和核心态的转换" class="headerlink" title="4.操作系统用户态和核心态的转换"></a>4.操作系统用户态和核心态的转换</h2><p><img src="https://s2.loli.net/2022/06/21/oz5CdDTejgR4qYs.png" alt="image-20220621115004064"></p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.2.1 操作系统的发展和分类（手工、单道/多道批处理、分时、实时、网络、分布式、嵌入式、个人计算机）</title>
      <link href="/liangjunyi.github.io/2022/06/21/operating-system-1.2.1-cao-zuo-xi-tong-de-fa-zhan-he-fen-lei-shou-gong-dan-dao-duo-dao-pi-chu-li-fen-shi-shi-shi-wang-luo-fen-bu-shi-qian-ru-shi-ge-ren-ji-suan-ji/"/>
      <url>/liangjunyi.github.io/2022/06/21/operating-system-1.2.1-cao-zuo-xi-tong-de-fa-zhan-he-fen-lei-shou-gong-dan-dao-duo-dao-pi-chu-li-fen-shi-shi-shi-wang-luo-fen-bu-shi-qian-ru-shi-ge-ren-ji-suan-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="1-操作系统的分类及其特征优劣"><a href="#1-操作系统的分类及其特征优劣" class="headerlink" title="1.操作系统的分类及其特征优劣"></a>1.操作系统的分类及其特征优劣</h2><p><img src="https://s2.loli.net/2022/06/21/aDr4fisVXPRdM3m.png" alt="20200222160313682"></p><h2 id="2-操作系统的发展历程"><a href="#2-操作系统的发展历程" class="headerlink" title="2.操作系统的发展历程"></a>2.操作系统的发展历程</h2><p><img src="https://s2.loli.net/2022/06/21/ixauOSP3HkJvEnT.png" alt="image-20220621114705924"></p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.2 操作系统的特征（并发、共享、虚拟、异步）</title>
      <link href="/liangjunyi.github.io/2022/06/20/operating-system-1.1.2-cao-zuo-xi-tong-de-te-zheng-bing-fa-gong-xiang-xu-ni-yi-bu/"/>
      <url>/liangjunyi.github.io/2022/06/20/operating-system-1.1.2-cao-zuo-xi-tong-de-te-zheng-bing-fa-gong-xiang-xu-ni-yi-bu/</url>
      
        <content type="html"><![CDATA[<ul><li>操作系统是一种系统软件，但与其它系统软件和应用软件有很大的不同，它有自己的特殊性，及基本特征。</li></ul><p><img src="https://s2.loli.net/2022/06/21/KtRHbCP3TlYwZVn.png" alt="image-20220621113917147"></p><h2 id="1-并发"><a href="#1-并发" class="headerlink" title="1.并发"></a>1.并发</h2><ul><li>并发：两个或多个事件在同一时间间隔内发生，这些事件在宏观上是同时发生的，在微观上是交替发生的， 操作系统的并发性指系统中同时存在着多个运行的程序</li><li>并行：两个或多个事件在同一时刻发生</li><li>一个单核(CPU)同一时刻只能执行一个程序，因此操作系统会协调多个程序使他们交替进行（这些程序在宏观上是同时发生的，在微观上是交替进行的）</li><li>操作系统是伴随着“多道程序技术出现的”，因此操作系统和并发是一同诞生的</li><li>在如今的计算机中，一般都是多核cpu的，即在同一时刻可以并行执行多个程序，比如我的计算机是8核的，我的计算机可以在同一时刻并行执行8个程序，但是事实上我们计算机执行的程序并不止8个，因此并发技术是必须存在的，并发性必不可少。</li></ul><p><img src="https://s2.loli.net/2022/06/21/WQnxvNmdAZ7Vjil.png" alt="image-20220621113943021"></p><h2 id="2-共享"><a href="#2-共享" class="headerlink" title="2.共享"></a>2.共享</h2><ul><li>资源共享即共享，是指系统中的资源可以<code>供内存中多个并发执行的进程</code>共同使用</li><li>共享分为两类：互斥共享和同时共享</li></ul><h3 id="（1）互斥共享"><a href="#（1）互斥共享" class="headerlink" title="（1）互斥共享"></a>（1）互斥共享</h3><ul><li>计算机中的某个资源在一段时间内只能允许一个进程访问，别的进程没有使用权</li><li>临界资源(独占资源)：在一段时间内只允许一个进程访问的资源，计算机中大多数物理设备及某些软件中的栈、变量和表格都属于临界资源，它们被要求互斥共享</li><li>举个例子：比如QQ和微信视频。同一段时间内摄像头只能分配给其中一个进程</li></ul><h3 id="（2）同时共享"><a href="#（2）同时共享" class="headerlink" title="（2）同时共享"></a>（2）同时共享</h3><ul><li>计算机中的某个资源在在一段时间内可以同时允许多个进程访问</li><li>同时共享通常要求一个请求分为几个时间片段间隔的完成，即交替进行，“分时共享”</li><li>这里的同时指在宏观上是同时的，在微观上是交替进行访问的，只是cpu处理速度很快，我们感觉不到，在宏观上感觉是在同时进行</li><li>举个例子：比如QQ在发送文件A，微信在发送文件B，宏观上两个进程A和B都在访问磁盘，在我们看来是同时进行的，但是在微观上两个进程A和B是交替进行访问磁盘的，只是时间太短，cpu处理速度太快，我们感觉不到。</li><li>注意：有时候多个进程可能真的是在同时进行资源访问，比如玩游戏时可以放音乐，游戏声音和音乐声音都能听见</li></ul><h3 id="（3）并发性和共享性互为存在条件"><a href="#（3）并发性和共享性互为存在条件" class="headerlink" title="（3）并发性和共享性互为存在条件"></a>（3）并发性和共享性互为存在条件</h3><p><img src="https://s2.loli.net/2022/06/21/MWNGaYUeVbE8rHz.png" alt="image-20220621114049741"></p><h2 id="3-虚拟"><a href="#3-虚拟" class="headerlink" title="3.虚拟"></a>3.虚拟</h2><blockquote><p>多道程序设计：是指在计算机内存中同时存放几道相互独立的程序，使它们在管理程序控制之下，相互穿插的运行。 两个或两个以上程序在计算机系统中同处于开始到结束之间的状态。这就称为多道程序设计。多道程序技术运行的特征：多道、宏观上并行、微观上串行。</p></blockquote><ul><li><p>虚拟是把一个物理上的实体变为若干逻辑上的对应物。</p></li><li><p>物理实体（前者）是实际存在的；而后者是虚的，是用户感觉上的事务</p></li><li><p>虚拟技术：用于实现虚拟的技术</p></li><li><p>虚拟处理器（CPU）：通过多道程序设计技术，采用让多道程序并发执行的方法，分时来使用一个CPU，实际物理上只有一个CPU，但是用户感觉到有多个CPU</p></li><li><p>虚拟存储器：从逻辑上扩充存储器容量，用户感觉到的但实际不存在的存储器</p></li><li><p>虚拟设备：将一台物理设备虚拟为逻辑上的多台设备，使多个用户在同一时间段内访问同一台设备，即同时共享，用户宏观上感觉是同时的，但实际上是微观交替访问同一台设备的</p></li><li><p>操作系统的虚拟技术科归纳为：</p><ul><li><p>时分复用技术：如处理器的分时共享</p></li><li><p>空间复用技术：如虚拟存储器</p></li></ul></li></ul><p><img src="https://s2.loli.net/2022/06/21/gbAPq1kBh9Q3uzj.png" alt="image-20220621114149683"></p><h2 id="4-异步"><a href="#4-异步" class="headerlink" title="4.异步"></a>4.异步</h2><ul><li>异步：多道程序环境允许多个程序并发执行，但由于资源有限，如cpu只有一个，进程的执行并不是一贯到底的，而是走走停停的，它以不可预知的速度向前推进。</li><li>比如A进程正在占用CPU计算，B进程这时也想占用CPU计算，B进程只有等，等A进程算完了，A进程去访问磁盘资源了，这时B进程再占用CPU进行计算，B进程还没计算完，A进程从磁盘取出资源了，A进程发现B这时在占用CPU，这时A进程就需要等待，等B算完后再继续到CPU中进行计算。由于每个进程占用资源的时间不固定，所以进程的执行以不可预知的速度前进</li></ul>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.1 操作系统的概念、功能和目标（系统资源的管理者、提供接口、作为扩充机器、虚拟机）</title>
      <link href="/liangjunyi.github.io/2022/06/20/operating-system-1.1.1-cao-zuo-xi-tong-de-gai-nian-gong-neng-he-mu-biao-xi-tong-zi-yuan-de-guan-li-zhe-ti-gong-jie-kou-zuo-wei-kuo-chong-ji-qi-xu-ni-ji/"/>
      <url>/liangjunyi.github.io/2022/06/20/operating-system-1.1.1-cao-zuo-xi-tong-de-gai-nian-gong-neng-he-mu-biao-xi-tong-zi-yuan-de-guan-li-zhe-ti-gong-jie-kou-zuo-wei-kuo-chong-ji-qi-xu-ni-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="1-熟悉的操作系统举例"><a href="#1-熟悉的操作系统举例" class="headerlink" title="1.熟悉的操作系统举例"></a>1.熟悉的操作系统举例</h2><p><img src="https://s2.loli.net/2022/06/21/k6HXmKLxBMzy4VR.png" alt="image-20220621111025642"></p><h2 id="2-操作系统的层次结构"><a href="#2-操作系统的层次结构" class="headerlink" title="2.操作系统的层次结构"></a>2.操作系统的层次结构</h2><p><img src="https://s2.loli.net/2022/06/21/mgKlxkNC8WE4y3s.png" alt="image-20220621111046027"></p><h2 id="3-操作系统的概念"><a href="#3-操作系统的概念" class="headerlink" title="3.操作系统的概念"></a>3.操作系统的概念</h2><ul><li>是系统最基本最核心的软件，属于系统软件</li><li>控制和管理整个计算机的硬件和软件资源</li><li>合理的组织、调度计算机的工作与资源的分配</li><li>为用户和其它软件提供方便的接口和环境</li></ul><p><img src="https://s2.loli.net/2022/06/21/E2AW5tQJvUo8OLq.png" alt="image-20220621111122182"></p><h2 id="4-操作系统的功能和目标"><a href="#4-操作系统的功能和目标" class="headerlink" title="4.操作系统的功能和目标"></a>4.操作系统的功能和目标</h2><ul><li>先放一张思维导图，大致知道操作系统的具体功能和目标，然后再一一展开叙述。</li></ul><p><img src="https://s2.loli.net/2022/06/21/GmkjeNg4HpYDy5B.png" alt="image-20220621111153388"></p><p>用一个直观的例子来理解上述图中操作系统的功能：</p><blockquote><ul><li>我们假设：用户是雇主，操作系统是工人（用来操作机器），计算机是机器（由处理机(CPU)、存储器、设备、文件几个部件构成）</li><li>工人有熟练的技能去控制和协调各个部件的工作，这就是操作系统对资源的管理</li><li>同时，工人必须接受雇主的命令，这就是“接口”</li><li>有了工人，机器就能发挥更大的作用，因此工人就成了“扩充机器”</li><li>工人操作机器、机器有了更大的作用比如GUI界面，于是工人便成了扩充机器，去扩充GUI界面等功能</li></ul></blockquote><h3 id="（1）作为计算机系统资源的管理者"><a href="#（1）作为计算机系统资源的管理者" class="headerlink" title="（1）作为计算机系统资源的管理者"></a>（1）作为计算机系统资源的管理者</h3><p>管理软硬件资源、合理的组织、调度计算机的工作与资源的分配</p><h4 id="1-处理器（CPU）管理"><a href="#1-处理器（CPU）管理" class="headerlink" title="1.处理器（CPU）管理"></a>1.处理器（CPU）管理</h4><ul><li>在多道程序环境下，cpu的分配和运行都以进程（或线程）为基本单位，因此对cpu的管理可理解为对进程的管理。进程管理的主要功能包括进程控制、进程同步、进程通信、死锁处理、处理机调度等。附上一张图理解对进程的管理。</li></ul><p><img src="https://s2.loli.net/2022/06/21/Ra2b85jhr34UcVx.png" alt="image-20220621111404154"></p><h4 id="2-存储器管理"><a href="#2-存储器管理" class="headerlink" title="2.存储器管理"></a>2.存储器管理</h4><ul><li>为多道程序的运行提供良好的环境，方便用户使用及提高内存的利用率，主要包括内存分配与回收、地址映射、内存保护与共享和内存扩充等功能。</li></ul><p><img src="https://s2.loli.net/2022/06/21/BsovC8NDUqzOb2E.png" alt="image-20220621111427133"></p><h4 id="3-文件管理"><a href="#3-文件管理" class="headerlink" title="3.文件管理"></a>3.文件管理</h4><ul><li>计算机中所有的信息都是以文件的形式存在的，操作系统中负责文件的管理的部分称为文件系统，文件管理包括文件存储空间的管理、目录管理及文件读写管理和保护等。</li></ul><p><img src="https://s2.loli.net/2022/06/21/dC2ORtiuVfNDsrT.png" alt="image-20220621111439925"></p><h4 id="4-设备管理"><a href="#4-设备管理" class="headerlink" title="4.设备管理"></a>4.设备管理</h4><ul><li>设备管理的主要任务是完成用户的I/O请求，方便用户使用各种设备，并提高设备的利用率，主要包括缓存管理、设备分配、设备处理和虚拟设备等功能。</li></ul><p><img src="https://s2.loli.net/2022/06/21/xk7hVPsGezfubWL.png" alt="image-20220621111526215"></p><ul><li>以上4种管理功能都由“工人”负责，“雇主”无序关注。</li></ul><h3 id="（2）作为用户与计算机硬件系统之间的接口"><a href="#（2）作为用户与计算机硬件系统之间的接口" class="headerlink" title="（2）作为用户与计算机硬件系统之间的接口"></a>（2）作为用户与计算机硬件系统之间的接口</h3><ul><li>为了让用户方便、快捷、可靠的操作计算机硬件并执行自己的程序，操作系统提供了用户接口</li><li>操作系统提供的接口分为两类：命令接口和程序接口</li><li>命令接口：用户可以直接使用的，利用这些操作命令来组织和控制作业的执行</li><li>程序接口：用户通过程序间接使用的，编程人员可以使用它们来请求操作系统服务</li></ul><h4 id="1-命令接口"><a href="#1-命令接口" class="headerlink" title="1.命令接口"></a>1.命令接口</h4><ul><li><p>命令接口分为两类：联机命令接口和脱机命令接口，用户可以直接调用</p></li><li><p>联机命令接口：又称交互式命令接口，适用于分时或实时系统的接口，由一组键盘操作命令组成。用户输入一条指令，操作系统就执行一条指令；</p></li><li><p>脱机命令接口：又称批处理接口，使用于批处理系统，由一组作业控制命令组成。用户输入一堆指令，操作系统运行一堆指令。在操作系统运行这些命令时用户不可干预。</p></li></ul><p><img src="https://s2.loli.net/2022/06/21/rOsjNlF3umJ4hUD.png" alt="image-20220621111904435"></p><p><img src="https://s2.loli.net/2022/06/21/icfoJnKVyNTHB8q.png" alt="image-20220621111929735"></p><blockquote><p>批处理(Batch)，也称为批处理脚本。顾名思义，批处理就是对某对象进行批量的处理，通常被认为是一种简化的脚本语言，它应用于DOS和Windows系统中。批处理文件的扩展名为bat 。</p></blockquote><h4 id="2-程序接口"><a href="#2-程序接口" class="headerlink" title="2.程序接口"></a>2.程序接口</h4><ul><li>程序接口：由一组系统调用（也称广义指令）组成</li><li>用户通过在程序中使用这些系统调用来请求操作系统为其提供服务，只能通过用户程序间接调用</li><li>如使用各种外部设备、申请分配和回收内存及其它各种要求</li></ul><p><img src="https://s2.loli.net/2022/06/21/OoERwuxm3lAS2Va.png" alt="image-20220621112058606"></p><blockquote><p>动态链接库英文为DLL，是Dynamic Link Library的缩写。DLL是一个包含可由多个程序，同时使用的代码和数据的库。</p></blockquote><ul><li>比如常见的图形用户界面程序接口GUI</li></ul><p><img src="https://s2.loli.net/2022/06/21/UPvF9cm52VhMNzl.png" alt="image-20220621112114837"></p><blockquote><p>系统调用 = 系统调用命令 = 广义指令</p></blockquote><h4 id="3-作为扩充机器（虚拟机）"><a href="#3-作为扩充机器（虚拟机）" class="headerlink" title="3.作为扩充机器（虚拟机）"></a>3.作为扩充机器（虚拟机）</h4><p><img src="https://s2.loli.net/2022/06/21/T5bj4pN2qlWm8Vf.png" alt="image-20220621112441938"></p><ul><li>没有任何软件支持的计算机称为裸机</li><li>覆盖了软件的机器称为扩充机器或虚拟机</li></ul><p><img src="https://s2.loli.net/2022/06/21/qg175Jh6d3TKYMb.png" alt="image-20220621112456450"></p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.0.0 第一章操作系统概述错题整理</title>
      <link href="/liangjunyi.github.io/2022/06/19/operating-system-1.0.0-di-yi-zhang-cao-zuo-xi-tong-gai-shu-cuo-ti-zheng-li/"/>
      <url>/liangjunyi.github.io/2022/06/19/operating-system-1.0.0-di-yi-zhang-cao-zuo-xi-tong-gai-shu-cuo-ti-zheng-li/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/06/21/ZcOxvUCng4PD8Tz.png" alt="20200307232926108"></p><p><strong>1.操作系统与用户通信接口通常不包括（D）</strong><br>A：shell<br>B：命令解释器<br>C：广义指令<br>D：缓存管理指令</p><blockquote><p>解析：广义指令是系统调用命令；命令解释器属于命令接口，shell是命令解释器，它属于命令接口；系统中的缓存全部由操作系统管理，对用户是透明的，操作系统不提供管理系统缓存的系统调用。</p></blockquote><p><strong>2.计算机开机后，操作系统最终被加载到（D）</strong><br>A：BIOS<br>B：ROM<br>C：EPROM<br>D：RAM</p><blockquote><p>解析：系统开机后，操作系统的程序会被自动加载到内存中的系统区，这段区域是RAM；涉及到组成原理的各类存储介质。</p></blockquote><p><strong>3.在分时操作系统中，时间片一定，（C）响应时间越长</strong><br>A：内存越多<br>B：内存越少<br>C：用户数越多<br>D：用户数越少</p><blockquote><p>解析：在分时操作系统中，时间片固定时，用户数越多，每个用户分到的时间片就越少，响应时间自然就变成。</p></blockquote><p><strong>4.设某计算机系统有一个CPU，一台输入设备，一台打印机。</strong><br>现有两个进程同时进入就绪态，且A进程先得到CPU的运行，进程B后运行。<br>进程A的运行轨迹：计算50ms,打印信息100ms，再计算50ms，打印信息100ms，结束；<br>进程B的运行轨迹：计算50ms，输入数据80ms，再计算100ms，结束。<br>画出他们的时序关系图，并说明：<br>(1) 开始运行后，cpu有无空闲等待？若有，在哪段时间内等待？计算CPU的利用率。<br>CPU在100~150ms时间段内空闲，利用率250/300=83.3%</p><p>(2) 进程A运行时有无等待现象？若有，在何时发生等待现象？<br>进程A无等待现象</p><p>(3) 进程B运行时有无等待现象？若有，在何时发生等待现象？<br>进程B有等待现象，0<del>50ms, 180</del>200ms</p><p><img src="https://s2.loli.net/2022/06/21/m7hPF1DcuKXlAwM.png" alt="image-20220621120022503"></p><p><strong>5.下列操作系统的各个功能组成部分中，（A）可不需要硬件的支持</strong><br>A：进程调度<br>B：时钟管理<br>C：地址映射<br>D：中断系统</p><blockquote><p>解析：中断系统和地址映射都需要硬件的支持，因为中断指令和地址映射中的重定位都是离不开硬件的支持的。而时钟管理，重置时钟等是由硬件直接完成的。进程调度由调度算法决定CPU使用权，由操作系统实现，无序硬件的支持。</p></blockquote><p><strong>6.下列选项中，在用户态执行的是（A）</strong><br>A：命令解释程序<br>B：缺页处理程序<br>C：进程调度程序<br>D：时钟中断处理程序</p><blockquote><p>解析：命令解释程序属于命令接口，用户可以直接调用；缺页处理程序、时钟中断处理程序都属于中断，在核心态执行；进程调度程序在核心态执行；</p></blockquote><p><strong>7.下列选项中，不可能在用户态发生的是（C）</strong><br>A：系统调用<br>B：外部中断<br>C：进程切换<br>D：缺页</p><blockquote><p>解析：系统调用是提供给用户的程序接口，在用户态发生，被调用程序在核心态下执行；外部中断使用户态到核心态的“门”，也发生在用户态，在核心态完成中断处理程序；进程切换属于系统调用执行过程中的事件，只能发生在核心态；缺页发生后，在用户态发生缺页中断，然后进入核心态执行缺页中断服务程序；</p></blockquote><p><strong>8.在操作系统中，只能在核心态执行的指令是（C）</strong><br>A：读时钟<br>B：取数<br>C：广义指令<br>D：寄存器清“0”</p><blockquote><p>解析：广义指令即系统调用命令，必然工作在核心态；注意区分“调用”和“执行”，广义指令的调用可以在用户态发生，调用广义指令的那条指令不一定是特权指令，但广义指令存在于核心态中，所以执行一点在核心态</p></blockquote><p><strong>9.下列选项中，必须在核心态下执行的指令是（D</strong>）<br>A：从内存中取数<br>B：将运算结果装入内存<br>C：算术运算<br>D：输入/输出</p><blockquote><p>解析：输入/输出指令涉及到中断操作，而中断操作是由系统内核负责的，工作在核心态。A、B、C选项均可通过汇编语言编程来实现，因此它们可在用户态下执行。<br>操作系统管理内存时，管理的是内存中的数据放在哪里，哪里可以放数据，哪里不可以放数据（内存保护），哪里空闲等问题，而内存中的数据是什么，怎么读和写，都不是核心态关心的。</p></blockquote><p><strong>10.为什么说直到出现中断和通道技术后，多道程序概念才变得有用？</strong></p><p><img src="https://s2.loli.net/2022/06/21/MCLhq8XRNGFYSxy.png" alt="image-20220621120149355"></p><p><strong>几个概念;</strong></p><ul><li>时钟中断：表示一个固定的时间片已到，让处理机执行计时、启动定时运行的任务等，主要任务是处理和时间相关的信息及决定是否执行调度程序；</li><li>外部中断处理过程中，PC值由中断隐指令自动保存，而通用寄存器内容由操作系统保存；</li></ul>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0.0.0 目录</title>
      <link href="/liangjunyi.github.io/2022/06/18/operating-system-0.0.0-mu-lu/"/>
      <url>/liangjunyi.github.io/2022/06/18/operating-system-0.0.0-mu-lu/</url>
      
        <content type="html"><![CDATA[<h4 id="第-1-章-计算机系统概述"><a href="#第-1-章-计算机系统概述" class="headerlink" title="第 1 章 计算机系统概述"></a>第 1 章 计算机系统概述</h4><h5 id="1-1-操作系统的基本概念"><a href="#1-1-操作系统的基本概念" class="headerlink" title="1.1 操作系统的基本概念"></a>1.1 操作系统的基本概念</h5><h6 id="1-1-1-操作系统的概念、功能和目标（系统资源的管理者、提供接口、作为扩充机器、虚拟机）"><a href="#1-1-1-操作系统的概念、功能和目标（系统资源的管理者、提供接口、作为扩充机器、虚拟机）" class="headerlink" title="1.1.1 操作系统的概念、功能和目标（系统资源的管理者、提供接口、作为扩充机器、虚拟机）"></a><a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/19/1.1.1-cao-zuo-xi-tong-de-gai-nian-gong-neng-he-mu-biao-xi-tong-zi-yuan-de-guan-li-zhe-ti-gong-jie-kou-zuo-wei-kuo-chong-ji-qi-xu-ni-ji/">1.1.1 操作系统的概念、功能和目标（系统资源的管理者、提供接口、作为扩充机器、虚拟机）</a></h6><h6 id="1-1-2-操作系统的特征（并发、共享、虚拟、异步）"><a href="#1-1-2-操作系统的特征（并发、共享、虚拟、异步）" class="headerlink" title="1.1.2 操作系统的特征（并发、共享、虚拟、异步）"></a><a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/19/1.1.2-cao-zuo-xi-tong-de-te-zheng-bing-fa-gong-xiang-xu-ni-yi-bu/">1.1.2 操作系统的特征（并发、共享、虚拟、异步）</a></h6><h5 id="1-2-操作系统的发展和分类"><a href="#1-2-操作系统的发展和分类" class="headerlink" title="1.2 操作系统的发展和分类"></a>1.2 操作系统的发展和分类</h5><h6 id="1-2-1-操作系统的发展和分类（手工、单道-多道批处理、分时、实时、网络、分布式、嵌入式、个人计算机）"><a href="#1-2-1-操作系统的发展和分类（手工、单道-多道批处理、分时、实时、网络、分布式、嵌入式、个人计算机）" class="headerlink" title="1.2.1 操作系统的发展和分类（手工、单道/多道批处理、分时、实时、网络、分布式、嵌入式、个人计算机）"></a><a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/19/1.2.1-cao-zuo-xi-tong-de-fa-zhan-he-fen-lei-shou-gong-dan-dao-duo-dao-pi-chu-li-fen-shi-shi-shi-wang-luo-fen-bu-shi-qian-ru-shi-ge-ren-ji-suan-ji/">1.2.1 操作系统的发展和分类（手工、单道/多道批处理、分时、实时、网络、分布式、嵌入式、个人计算机）</a></h6><h5 id="1-3-操作系统的运行机制和体系结构"><a href="#1-3-操作系统的运行机制和体系结构" class="headerlink" title="1.3 操作系统的运行机制和体系结构"></a>1.3 操作系统的运行机制和体系结构</h5><h6 id="1-3-1-操作系统的运行机制和体系结构（大内核、小内核）"><a href="#1-3-1-操作系统的运行机制和体系结构（大内核、小内核）" class="headerlink" title="1.3.1 操作系统的运行机制和体系结构（大内核、小内核）"></a><a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/19/1.3.1-cao-zuo-xi-tong-de-yun-xing-ji-zhi-he-ti-xi-jie-gou-da-nei-he-xiao-nei-he/">1.3.1 操作系统的运行机制和体系结构（大内核、小内核）</a></h6><h6 id="1-3-2-中断和异常（内中断和外中断、中断处理过程）"><a href="#1-3-2-中断和异常（内中断和外中断、中断处理过程）" class="headerlink" title="1.3.2 中断和异常（内中断和外中断、中断处理过程）"></a><a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/19/1.3.2-zhong-duan-he-yi-chang-nei-zhong-duan-he-wai-zhong-duan-zhong-duan-chu-li-guo-cheng/">1.3.2 中断和异常（内中断和外中断、中断处理过程）</a></h6><h6 id="1-3-3-系统调用（执行过程、访管指令、库函数与系统调用）"><a href="#1-3-3-系统调用（执行过程、访管指令、库函数与系统调用）" class="headerlink" title="1.3.3 系统调用（执行过程、访管指令、库函数与系统调用）"></a><a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/19/1.3.3-xi-tong-diao-yong-zhi-xing-guo-cheng-fang-guan-zhi-ling-ku-han-shu-yu-xi-tong-diao-yong/">1.3.3 系统调用（执行过程、访管指令、库函数与系统调用）</a></h6><h5 id="1-0-0-第一章操作系统概述错题整理"><a href="#1-0-0-第一章操作系统概述错题整理" class="headerlink" title="1.0.0 第一章操作系统概述错题整理"></a><a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/19/1.0.0-di-yi-zhang-cao-zuo-xi-tong-gai-shu-cuo-ti-zheng-li/">1.0.0 第一章操作系统概述错题整理</a></h5><h3 id="第-2-章-进程管理"><a href="#第-2-章-进程管理" class="headerlink" title="第 2 章 进程管理"></a>第 2 章 进程管理</h3><h4 id="2-1-进程与线程"><a href="#2-1-进程与线程" class="headerlink" title="2.1 进程与线程"></a>2.1 进程与线程</h4><h6 id="2-1-1-进程的定义、特征、组成、组织"><a href="#2-1-1-进程的定义、特征、组成、组织" class="headerlink" title="2.1.1 进程的定义、特征、组成、组织"></a><a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/21/2.1.1-cao-zuo-xi-tong-zhi-jin-cheng-de-ding-yi-te-zheng-zu-cheng-zu-zhi/">2.1.1 进程的定义、特征、组成、组织</a></h6><h6 id="2-1-2-进程的状态（运行、就绪、阻塞、创建、终止）及转换（就绪-运行、运行-就绪、运行-阻塞、阻塞-就绪）"><a href="#2-1-2-进程的状态（运行、就绪、阻塞、创建、终止）及转换（就绪-运行、运行-就绪、运行-阻塞、阻塞-就绪）" class="headerlink" title="2.1.2 进程的状态（运行、就绪、阻塞、创建、终止）及转换（就绪->运行、运行->就绪、运行->阻塞、阻塞->就绪）"></a><a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/21/2.1.2-cao-zuo-xi-tong-zhi-jin-cheng-de-zhuang-tai-yun-xing-jiu-xu-zu-sai-chuang-jian-zhong-zhi-ji-zhuan-huan-jiu-xu-yun-xing-yun-xing-jiu-xu-yun-xing-zu-sai-zu-sai-jiu-xu/">2.1.2 进程的状态（运行、就绪、阻塞、创建、终止）及转换（就绪-&gt;运行、运行-&gt;就绪、运行-&gt;阻塞、阻塞-&gt;就绪）</a></h6><h6 id="2-1-3-原语实现对进程的控制"><a href="#2-1-3-原语实现对进程的控制" class="headerlink" title="2.1.3 原语实现对进程的控制"></a><a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/22/2.1.3-cao-zuo-xi-tong-zhi-yuan-yu-shi-xian-dui-jin-cheng-de-kong-zhi/">2.1.3 原语实现对进程的控制</a></h6><h6 id="2-1-4-进程之间的通信（共享通信、消息传递、管道通信）"><a href="#2-1-4-进程之间的通信（共享通信、消息传递、管道通信）" class="headerlink" title="2.1.4 进程之间的通信（共享通信、消息传递、管道通信）"></a><a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/22/2.1.4-jin-cheng-zhi-jian-de-tong-xin-gong-xiang-tong-xin-xiao-xi-chuan-di-guan-dao-tong-xin/">2.1.4 进程之间的通信（共享通信、消息传递、管道通信）</a></h6><h6 id="2-1-5-线程概念与多线程模型"><a href="#2-1-5-线程概念与多线程模型" class="headerlink" title="2.1.5 线程概念与多线程模型"></a><a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/22/2.1.5-cao-zuo-xi-tong-zhi-xian-cheng-gai-nian-yu-duo-xian-cheng-mo-xing/">2.1.5 线程概念与多线程模型</a></h6><h4 id="2-2-处理机的调度"><a href="#2-2-处理机的调度" class="headerlink" title="2.2 处理机的调度"></a>2.2 处理机的调度</h4><h6 id="2-2-1-处理机调度的概念及层次"><a href="#2-2-1-处理机调度的概念及层次" class="headerlink" title="2.2.1 处理机调度的概念及层次"></a><a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/22/2.2.1-cao-zuo-xi-tong-zhi-chu-li-ji-diao-du-de-gai-nian-ji-ceng-ci/">2.2.1 处理机调度的概念及层次</a></h6><h6 id="2-2-2-进程调度的时机（主动放弃与被动放弃）、切换与过程（广义与狭义）、方式（非剥夺与剥夺）"><a href="#2-2-2-进程调度的时机（主动放弃与被动放弃）、切换与过程（广义与狭义）、方式（非剥夺与剥夺）" class="headerlink" title="2.2.2 进程调度的时机（主动放弃与被动放弃）、切换与过程（广义与狭义）、方式（非剥夺与剥夺）"></a><a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/22/2.2.2-cao-zuo-xi-tong-zhi-jin-cheng-diao-du-de-shi-ji-zhu-dong-fang-qi-yu-bei-dong-fang-qi-qie-huan-yu-guo-cheng-guang-yi-yu-xia-yi-fang-shi-fei-bo-duo-yu-bo-duo/">2.2.2 进程调度的时机（主动放弃与被动放弃）、切换与过程（广义与狭义）、方式（非剥夺与剥夺）</a></h6><h6 id="2-2-3-度算法的评价指标（cpu利用率、系统吞吐量、周转时间、等待时间、响应时间）"><a href="#2-2-3-度算法的评价指标（cpu利用率、系统吞吐量、周转时间、等待时间、响应时间）" class="headerlink" title="2.2.3 度算法的评价指标（cpu利用率、系统吞吐量、周转时间、等待时间、响应时间）"></a><a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/22/2.2.3-cao-zuo-xi-tong-zhi-diao-du-suan-fa-de-ping-jie-zhi-biao-cpu-li-yong-lu-xi-tong-tun-tu-liang-zhou-zhuan-shi-jian-deng-dai-shi-jian-xiang-ying-shi-jian/">2.2.3 度算法的评价指标（cpu利用率、系统吞吐量、周转时间、等待时间、响应时间）</a></h6><h6 id="2-2-4-作业-进程调度算法（FCFS先来先服务、SJF短作业优先、HRRN高响应比优先）"><a href="#2-2-4-作业-进程调度算法（FCFS先来先服务、SJF短作业优先、HRRN高响应比优先）" class="headerlink" title="2.2.4 作业/进程调度算法（FCFS先来先服务、SJF短作业优先、HRRN高响应比优先）"></a><a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/22/2.2.4-cao-zuo-xi-tong-zhi-zuo-ye-jin-cheng-diao-du-suan-fa-fcfs-xian-lai-xian-fu-wu-sjf-duan-zuo-ye-you-xian-hrrn-gao-xiang-ying-bi-you-xian/">2.2.4 作业/进程调度算法（FCFS先来先服务、SJF短作业优先、HRRN高响应比优先）</a></h6><h6 id="2-2-5-作业-进程调度算法（时间片轮转调度算法、优先级调度算法、多级反馈队列调度算法）"><a href="#2-2-5-作业-进程调度算法（时间片轮转调度算法、优先级调度算法、多级反馈队列调度算法）" class="headerlink" title="2.2.5 作业/进程调度算法（时间片轮转调度算法、优先级调度算法、多级反馈队列调度算法）"></a><a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/22/2.2.5-cao-zuo-xi-tong-zhi-diao-du-suan-fa-shi-jian-pian-lun-zhuan-diao-du-suan-fa-you-xian-ji-diao-du-suan-fa-duo-ji-fan-kui-dui-lie-diao-du-suan-fa/">2.2.5 作业/进程调度算法（时间片轮转调度算法、优先级调度算法、多级反馈队列调度算法）</a></h6><h4 id="2-3-进程的同步与互斥"><a href="#2-3-进程的同步与互斥" class="headerlink" title="2.3 进程的同步与互斥"></a>2.3 进程的同步与互斥</h4><h6 id="2-3-1-进程的同步与互斥"><a href="#2-3-1-进程的同步与互斥" class="headerlink" title="2.3.1 进程的同步与互斥"></a><a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/22/2.3.1-jin-cheng-de-tong-bu-yu-hu-chi/">2.3.1 进程的同步与互斥</a></h6><h6 id="2-3-2-实现临界区进程互斥的软件实现方法"><a href="#2-3-2-实现临界区进程互斥的软件实现方法" class="headerlink" title="2.3.2 实现临界区进程互斥的软件实现方法"></a><a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/22/2.3.2-cao-zuo-xi-tong-zhi-shi-xian-lin-jie-qu-jin-cheng-hu-chi-de-ruan-jian-shi-xian-fang-fa/">2.3.2 实现临界区进程互斥的软件实现方法</a></h6><h6 id="2-3-3-实现临界区进程互斥的硬件实现方法"><a href="#2-3-3-实现临界区进程互斥的硬件实现方法" class="headerlink" title="2.3.3 实现临界区进程互斥的硬件实现方法"></a><a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/22/2.3.3-cao-zuo-xi-tong-zhi-shi-xian-lin-jie-qu-jin-cheng-hu-chi-de-ying-jian-shi-xian-fang-fa/">2.3.3 实现临界区进程互斥的硬件实现方法</a></h6><h6 id="2-3-4-信号量机制（整型信号量、记录型信号量P、V）"><a href="#2-3-4-信号量机制（整型信号量、记录型信号量P、V）" class="headerlink" title="2.3.4 信号量机制（整型信号量、记录型信号量P、V）"></a><a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/22/2.3.4-cao-zuo-xi-tong-zhi-xin-hao-liang-ji-zhi-zheng-xing-xin-hao-liang-ji-lu-xing-xin-hao-liang-p-v/">2.3.4 信号量机制（整型信号量、记录型信号量P、V）</a></h6><h6 id="2-3-5-信号量机制实现进程的互斥、同步与前驱关系"><a href="#2-3-5-信号量机制实现进程的互斥、同步与前驱关系" class="headerlink" title="2.3.5 信号量机制实现进程的互斥、同步与前驱关系"></a><a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/22/2.3.5-cao-zuo-xi-tong-zhi-xin-hao-liang-ji-zhi-shi-xian-jin-cheng-de-hu-chi-tong-bu-yu-qian-qu-guan-xi/">2.3.5 信号量机制实现进程的互斥、同步与前驱关系</a></h6><h6 id="2-3-6-进程同步与互斥经典问题（生产者-消费者问题、多生产者-多消费者问题、吸烟者问题、读者-写者问题、哲学家进餐问题）"><a href="#2-3-6-进程同步与互斥经典问题（生产者-消费者问题、多生产者-多消费者问题、吸烟者问题、读者-写者问题、哲学家进餐问题）" class="headerlink" title="2.3.6 进程同步与互斥经典问题（生产者-消费者问题、多生产者-多消费者问题、吸烟者问题、读者-写者问题、哲学家进餐问题）"></a><a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/22/2.3.6-cao-zuo-xi-tong-zhi-jin-cheng-tong-bu-yu-hu-chi-jing-dian-wen-ti-sheng-chan-zhe-xiao-fei-zhe-wen-ti-duo-sheng-chan-zhe-duo-xiao-fei-zhe-wen-ti-xi-yan-zhe-wen-ti-du-zhe-xie-zhe-wen-ti-zhe-xue-jia-jin-can-wen-ti/">2.3.6 进程同步与互斥经典问题（生产者-消费者问题、多生产者-多消费者问题、吸烟者问题、读者-写者问题、哲学家进餐问题）</a></h6><h6 id="2-3-7-管程和java中实现管程的机制"><a href="#2-3-7-管程和java中实现管程的机制" class="headerlink" title="2.3.7 管程和java中实现管程的机制"></a><a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/22/2.3.7-cao-zuo-xi-tong-zhi-guan-cheng-he-java-zhong-shi-xian-guan-cheng-de-ji-zhi/">2.3.7 管程和java中实现管程的机制</a></h6><h4 id="2-4-死锁"><a href="#2-4-死锁" class="headerlink" title="2.4 死锁"></a>2.4 死锁</h4><h6 id="2-4-1-死锁详解-预防、避免、检测、解除"><a href="#2-4-1-死锁详解-预防、避免、检测、解除" class="headerlink" title="2.4.1 死锁详解(预防、避免、检测、解除)"></a><a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/22/2.4.1-cao-zuo-xi-tong-zhi-si-suo-xiang-jie-yu-fang-bi-mian-jian-ce-jie-chu-si-wei-dao-tu/">2.4.1 死锁详解(预防、避免、检测、解除)</a></h6><h3 id="第-3-章-内存管理"><a href="#第-3-章-内存管理" class="headerlink" title="第 3 章 内存管理"></a>第 3 章 内存管理</h3><h4 id="3-1-内存管理的概念"><a href="#3-1-内存管理的概念" class="headerlink" title="3.1 内存管理的概念"></a>3.1 内存管理的概念</h4><h6 id="3-1-1-什么是内存？进程的基本原理，深入指令理解其过程"><a href="#3-1-1-什么是内存？进程的基本原理，深入指令理解其过程" class="headerlink" title="3.1.1 什么是内存？进程的基本原理，深入指令理解其过程"></a><a href="https://liangjunyi-010.github.io/liangjunyi.github.io/2022/06/22/3.1.1-shi-me-shi-nei-cun-jin-cheng-de-ji-ben-yuan-li-shen-ru-zhi-ling-li-jie-qi-guo-cheng/">3.1.1 什么是内存？进程的基本原理，深入指令理解其过程</a></h6><h6 id="3-1-2-内存管理管些什么？"><a href="#3-1-2-内存管理管些什么？" class="headerlink" title="3.1.2 内存管理管些什么？"></a>3.1.2 内存管理管些什么？</h6><h6 id="3-1-3-覆盖技术与交换技术的思想"><a href="#3-1-3-覆盖技术与交换技术的思想" class="headerlink" title="3.1.3 覆盖技术与交换技术的思想"></a>3.1.3 覆盖技术与交换技术的思想</h6><h6 id="3-1-4-内存的分配与回收"><a href="#3-1-4-内存的分配与回收" class="headerlink" title="3.1.4 内存的分配与回收"></a>3.1.4 内存的分配与回收</h6><h6 id="3-1-5-动态分区分配的四种算法（首次适应算法、最佳适应算法、最坏适应算法、临近适应算法）"><a href="#3-1-5-动态分区分配的四种算法（首次适应算法、最佳适应算法、最坏适应算法、临近适应算法）" class="headerlink" title="3.1.5 动态分区分配的四种算法（首次适应算法、最佳适应算法、最坏适应算法、临近适应算法）"></a>3.1.5 动态分区分配的四种算法（首次适应算法、最佳适应算法、最坏适应算法、临近适应算法）</h6><h6 id="3-1-6-分页存储（页号、页偏移量等）"><a href="#3-1-6-分页存储（页号、页偏移量等）" class="headerlink" title="3.1.6 分页存储（页号、页偏移量等）"></a>3.1.6 分页存储（页号、页偏移量等）</h6><h6 id="3-1-7-分页存储管理的基本地址变换结构"><a href="#3-1-7-分页存储管理的基本地址变换结构" class="headerlink" title="3.1.7 分页存储管理的基本地址变换结构"></a>3.1.7 分页存储管理的基本地址变换结构</h6><h6 id="3-1-8-快表的地址变换结构"><a href="#3-1-8-快表的地址变换结构" class="headerlink" title="3.1.8 快表的地址变换结构"></a>3.1.8 快表的地址变换结构</h6><h6 id="3-1-9-二级页表的原理和地址结构"><a href="#3-1-9-二级页表的原理和地址结构" class="headerlink" title="3.1.9 二级页表的原理和地址结构"></a>3.1.9 二级页表的原理和地址结构</h6><h6 id="3-1-10-基本分段存储管理（段表、地址变换、信息共享）"><a href="#3-1-10-基本分段存储管理（段表、地址变换、信息共享）" class="headerlink" title="3.1.10 基本分段存储管理（段表、地址变换、信息共享）"></a>3.1.10 基本分段存储管理（段表、地址变换、信息共享）</h6><h6 id="3-1-11-段页式存储管理（段表、页表、地址转换）"><a href="#3-1-11-段页式存储管理（段表、页表、地址转换）" class="headerlink" title="3.1.11 段页式存储管理（段表、页表、地址转换）"></a>3.1.11 段页式存储管理（段表、页表、地址转换）</h6><h4 id="3-2-虚拟内存管理"><a href="#3-2-虚拟内存管理" class="headerlink" title="3.2 虚拟内存管理"></a>3.2 虚拟内存管理</h4><h6 id="3-2-1-虚拟内存的基本概念（局部性原理、高速缓存、虚拟内存的实现）"><a href="#3-2-1-虚拟内存的基本概念（局部性原理、高速缓存、虚拟内存的实现）" class="headerlink" title="3.2.1 虚拟内存的基本概念（局部性原理、高速缓存、虚拟内存的实现）"></a>3.2.1 虚拟内存的基本概念（局部性原理、高速缓存、虚拟内存的实现）</h6><h6 id="3-2-2-请求分页管理方式（请求页表、缺页中断机构、地址变换机构）"><a href="#3-2-2-请求分页管理方式（请求页表、缺页中断机构、地址变换机构）" class="headerlink" title="3.2.2 请求分页管理方式（请求页表、缺页中断机构、地址变换机构）"></a>3.2.2 请求分页管理方式（请求页表、缺页中断机构、地址变换机构）</h6><h6 id="3-2-3-页面置换算法（最佳置换算法、先进先出置换算法、最近最久未使用置换算法、普通时钟置换算法、改造型时钟置换算法）"><a href="#3-2-3-页面置换算法（最佳置换算法、先进先出置换算法、最近最久未使用置换算法、普通时钟置换算法、改造型时钟置换算法）" class="headerlink" title="3.2.3 页面置换算法（最佳置换算法、先进先出置换算法、最近最久未使用置换算法、普通时钟置换算法、改造型时钟置换算法）"></a>3.2.3 页面置换算法（最佳置换算法、先进先出置换算法、最近最久未使用置换算法、普通时钟置换算法、改造型时钟置换算法）</h6><h6 id="3-2-4-页面分配策略（驻留集、页面分配、置换策略、抖动现象、工作集）"><a href="#3-2-4-页面分配策略（驻留集、页面分配、置换策略、抖动现象、工作集）" class="headerlink" title="3.2.4 页面分配策略（驻留集、页面分配、置换策略、抖动现象、工作集）"></a>3.2.4 页面分配策略（驻留集、页面分配、置换策略、抖动现象、工作集）</h6><h3 id="第-4-章-文件管理"><a href="#第-4-章-文件管理" class="headerlink" title="第 4 章 文件管理"></a>第 4 章 文件管理</h3><h4 id="4-1-文件系统"><a href="#4-1-文件系统" class="headerlink" title="4.1 文件系统"></a>4.1 文件系统</h4><h6 id="4-1-1-初识文件管理概念和功能"><a href="#4-1-1-初识文件管理概念和功能" class="headerlink" title="4.1.1 初识文件管理概念和功能"></a>4.1.1 初识文件管理概念和功能</h6><h6 id="4-1-2-文件逻辑结构（顺序文件、索引文件、索引顺序文件、多级索引顺序文件）关于数据库的索引如聚簇索引可以看一下索引文件例题的解析，感觉还是可以收获到东西的"><a href="#4-1-2-文件逻辑结构（顺序文件、索引文件、索引顺序文件、多级索引顺序文件）关于数据库的索引如聚簇索引可以看一下索引文件例题的解析，感觉还是可以收获到东西的" class="headerlink" title="4.1.2 文件逻辑结构（顺序文件、索引文件、索引顺序文件、多级索引顺序文件）关于数据库的索引如聚簇索引可以看一下索引文件例题的解析，感觉还是可以收获到东西的"></a>4.1.2 文件逻辑结构（顺序文件、索引文件、索引顺序文件、多级索引顺序文件）关于数据库的索引如聚簇索引可以看一下索引文件例题的解析，感觉还是可以收获到东西的</h6><h6 id="4-1-3-文件目录结构（单级-两级-多级-无环图）、索引节点FCB瘦身"><a href="#4-1-3-文件目录结构（单级-两级-多级-无环图）、索引节点FCB瘦身" class="headerlink" title="4.1.3 文件目录结构（单级-两级-多级-无环图）、索引节点FCB瘦身"></a>4.1.3 文件目录结构（单级-两级-多级-无环图）、索引节点FCB瘦身</h6><h6 id="4-1-4-文件的物理结构-连续分配、链接分配-隐式-显式-、索引分配-链接方案-多层索引-混合索引"><a href="#4-1-4-文件的物理结构-连续分配、链接分配-隐式-显式-、索引分配-链接方案-多层索引-混合索引" class="headerlink" title="4.1.4 文件的物理结构(连续分配、链接分配[隐式-显式]、索引分配[链接方案-多层索引-混合索引])"></a>4.1.4 文件的物理结构(连续分配、链接分配[隐式-显式]、索引分配[链接方案-多层索引-混合索引])</h6><h6 id="4-1-5-文件管理空闲磁盘块的几种算法-空闲表法、空闲链表法、位示图法、成组链接法"><a href="#4-1-5-文件管理空闲磁盘块的几种算法-空闲表法、空闲链表法、位示图法、成组链接法" class="headerlink" title="4.1.5 文件管理空闲磁盘块的几种算法(空闲表法、空闲链表法、位示图法、成组链接法)"></a>4.1.5 文件管理空闲磁盘块的几种算法(空闲表法、空闲链表法、位示图法、成组链接法)</h6><h6 id="4-1-6-文件的基本操作原理-创建、删除、打开、关闭、读-写"><a href="#4-1-6-文件的基本操作原理-创建、删除、打开、关闭、读-写" class="headerlink" title="4.1.6 文件的基本操作原理(创建、删除、打开、关闭、读-写)"></a>4.1.6 文件的基本操作原理(创建、删除、打开、关闭、读-写)</h6><h6 id="4-1-7-文件共享（索引节点-硬链接、符号链接-软链接）"><a href="#4-1-7-文件共享（索引节点-硬链接、符号链接-软链接）" class="headerlink" title="4.1.7 文件共享（索引节点-硬链接、符号链接-软链接）"></a>4.1.7 文件共享（索引节点-硬链接、符号链接-软链接）</h6><h6 id="4-1-8-文件保护（口令保护、加密保护、访问控制）"><a href="#4-1-8-文件保护（口令保护、加密保护、访问控制）" class="headerlink" title="4.1.8 文件保护（口令保护、加密保护、访问控制）"></a>4.1.8 文件保护（口令保护、加密保护、访问控制）</h6><h6 id="4-1-9-文件系统的层次结构"><a href="#4-1-9-文件系统的层次结构" class="headerlink" title="4.1.9 文件系统的层次结构"></a>4.1.9 文件系统的层次结构</h6><h4 id="4-2-磁盘组织与管理"><a href="#4-2-磁盘组织与管理" class="headerlink" title="4.2 磁盘组织与管理"></a>4.2 磁盘组织与管理</h4><h6 id="4-2-1-磁盘的结构（磁盘、磁道、扇区、盘面、柱面、磁头）"><a href="#4-2-1-磁盘的结构（磁盘、磁道、扇区、盘面、柱面、磁头）" class="headerlink" title="4.2.1 磁盘的结构（磁盘、磁道、扇区、盘面、柱面、磁头）"></a>4.2.1 磁盘的结构（磁盘、磁道、扇区、盘面、柱面、磁头）</h6><h6 id="4-2-2-磁盘调度算法（FCFS、SSTF、SCAN、LOOK、S-SCAN、C-LOOK）"><a href="#4-2-2-磁盘调度算法（FCFS、SSTF、SCAN、LOOK、S-SCAN、C-LOOK）" class="headerlink" title="4.2.2 磁盘调度算法（FCFS、SSTF、SCAN、LOOK、S-SCAN、C-LOOK）"></a>4.2.2 磁盘调度算法（FCFS、SSTF、SCAN、LOOK、S-SCAN、C-LOOK）</h6><h6 id="4-2-3-减少磁盘延迟时间的方法（交替编号、错位命名）"><a href="#4-2-3-减少磁盘延迟时间的方法（交替编号、错位命名）" class="headerlink" title="4.2.3 减少磁盘延迟时间的方法（交替编号、错位命名）"></a>4.2.3 减少磁盘延迟时间的方法（交替编号、错位命名）</h6><h6 id="4-2-4-磁盘管理（磁盘初始化、引导块、坏块的管理）"><a href="#4-2-4-磁盘管理（磁盘初始化、引导块、坏块的管理）" class="headerlink" title="4.2.4 磁盘管理（磁盘初始化、引导块、坏块的管理）"></a>4.2.4 磁盘管理（磁盘初始化、引导块、坏块的管理）</h6><h3 id="第-5-章-I-O管理"><a href="#第-5-章-I-O管理" class="headerlink" title="第 5 章 I/O管理"></a>第 5 章 I/O管理</h3><h4 id="5-1-I-O管理概述"><a href="#5-1-I-O管理概述" class="headerlink" title="5.1 I/O管理概述"></a>5.1 I/O管理概述</h4><h6 id="5-1-1-什么是I-O设备？有几类I-O设备？"><a href="#5-1-1-什么是I-O设备？有几类I-O设备？" class="headerlink" title="5.1.1 什么是I/O设备？有几类I/O设备？"></a>5.1.1 什么是I/O设备？有几类I/O设备？</h6><h6 id="5-1-2-控制I-O设备的I-O控制器"><a href="#5-1-2-控制I-O设备的I-O控制器" class="headerlink" title="5.1.2 控制I/O设备的I/O控制器"></a>5.1.2 控制I/O设备的I/O控制器</h6><h6 id="5-1-3-控制I-O设备的几种方式？-程序直接控制方式、中断驱动方式、DMA、通道控制"><a href="#5-1-3-控制I-O设备的几种方式？-程序直接控制方式、中断驱动方式、DMA、通道控制" class="headerlink" title="5.1.3 控制I/O设备的几种方式？(程序直接控制方式、中断驱动方式、DMA、通道控制)"></a>5.1.3 控制I/O设备的几种方式？(程序直接控制方式、中断驱动方式、DMA、通道控制)</h6><h6 id="5-1-4-I-O软件的层次结构（用户层软件-设备独立性软件-设备驱动程序-中断处理程序）"><a href="#5-1-4-I-O软件的层次结构（用户层软件-设备独立性软件-设备驱动程序-中断处理程序）" class="headerlink" title="5.1.4 I/O软件的层次结构（用户层软件-设备独立性软件-设备驱动程序-中断处理程序）"></a>5.1.4 I/O软件的层次结构（用户层软件-设备独立性软件-设备驱动程序-中断处理程序）</h6><h4 id="5-2-I-O核心子系统"><a href="#5-2-I-O核心子系统" class="headerlink" title="5.2 I/O核心子系统"></a>5.2 I/O核心子系统</h4><h6 id="5-2-1-内核的I-O核心子系统及功能"><a href="#5-2-1-内核的I-O核心子系统及功能" class="headerlink" title="5.2.1 内核的I/O核心子系统及功能"></a>5.2.1 内核的I/O核心子系统及功能</h6><h6 id="5-2-2-I-O设备假脱机技术-SPOOLing"><a href="#5-2-2-I-O设备假脱机技术-SPOOLing" class="headerlink" title="5.2.2 I/O设备假脱机技术(SPOOLing)"></a>5.2.2 I/O设备假脱机技术(SPOOLing)</h6><h6 id="5-2-3-I-O设备的分配与回收（DCT-COCT-CHCT-SDT）"><a href="#5-2-3-I-O设备的分配与回收（DCT-COCT-CHCT-SDT）" class="headerlink" title="5.2.3 I/O设备的分配与回收（DCT-COCT-CHCT-SDT）"></a>5.2.3 I/O设备的分配与回收（DCT-COCT-CHCT-SDT）</h6><h6 id="5-2-4-缓冲区管理（单缓冲-双缓冲-循环缓冲-缓冲池）"><a href="#5-2-4-缓冲区管理（单缓冲-双缓冲-循环缓冲-缓冲池）" class="headerlink" title="5.2.4 缓冲区管理（单缓冲-双缓冲-循环缓冲-缓冲池）"></a>5.2.4 缓冲区管理（单缓冲-双缓冲-循环缓冲-缓冲池）</h6>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Exception and Debug</title>
      <link href="/liangjunyi.github.io/2022/06/18/python-exception-and-debug/"/>
      <url>/liangjunyi.github.io/2022/06/18/python-exception-and-debug/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-Exception-and-Debug"><a href="#Python-Exception-and-Debug" class="headerlink" title="Python Exception and Debug"></a>Python Exception and Debug</h1><h2 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h2><p>处理一些不可预料的情况，比如文件不存在，空间满了，通讯超时等等。</p><p>遇到这些问题了程序该如何执行？</p><p>这就是异常处理的价值和我们处理异常的目的。</p><h2 id="Python常见的异常"><a href="#Python常见的异常" class="headerlink" title="Python常见的异常"></a>Python常见的异常</h2><ul><li>ZeroDivisionError</li><li>NameError</li><li>TypeError</li></ul><h3 id="Eg"><a href="#Eg" class="headerlink" title="Eg:"></a>Eg:</h3><h4 id="ZeroDivisionError"><a href="#ZeroDivisionError" class="headerlink" title="ZeroDivisionError"></a>ZeroDivisionError</h4><p><img src="https://s2.loli.net/2022/06/18/ds5BLRupw9Xn4YF.png" alt="image-20220618180916517"></p><ul><li>这么写，没有任何的语法错误，IDE不会报错</li></ul><p><img src="https://s2.loli.net/2022/06/18/uh9NHbsnZYCQ8Wy.png" alt="image-20220618181014653"></p><ul><li>但是一运行起来就发现了错误</li></ul><h4 id="NameError"><a href="#NameError" class="headerlink" title="NameError"></a>NameError</h4><p><img src="https://s2.loli.net/2022/06/18/Z1mzoOG9N7iL3aD.png" alt="image-20220618181230216"></p><ul><li>之前没有定义过b，但是这里用到了</li></ul><h4 id="TypeError"><a href="#TypeError" class="headerlink" title="TypeError"></a>TypeError</h4><p><img src="https://s2.loli.net/2022/06/18/DK9Zi4vhFsSlWzN.png" alt="image-20220618181313133"></p><ul><li>两个不同类型的数强制进行运算</li></ul><h2 id="Python-的异常处理语法"><a href="#Python-的异常处理语法" class="headerlink" title="Python 的异常处理语法"></a>Python 的异常处理语法</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">程序执行语句块</span><br><span class="line"><span class="keyword">except</span> ExceptionName <span class="keyword">as</span> alias:</span><br><span class="line">    异常处理语句块</span><br><span class="line"><span class="keyword">except</span> ExceptionName <span class="keyword">as</span> alias:</span><br><span class="line">    异常处理语句块</span><br><span class="line"><span class="keyword">except</span> ExceptionName <span class="keyword">as</span> alias:</span><br><span class="line">    异常处理语句块</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    无异常时处理语句块</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    必须处理语句块</span><br></pre></td></tr></tbody></table></figure><ul><li>Exception 类型有很多，可以层层分析，对应着处理。最后可以加上处理 Exception 的语句，因为 Exception是父类，能捕获所有的异常。</li><li>Exception</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="example-1-简单例子"><a href="#example-1-简单例子" class="headerlink" title="example 1 - 简单例子"></a>example 1 - 简单例子</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">10</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'-------------End of the process-------------'</span>)</span><br></pre></td></tr></tbody></table></figure><p>结果</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="string">'ZeroDivisionError'</span>&gt;</span><br><span class="line">division by zero</span><br><span class="line">-------------End of the process-------------</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><ul><li>10/0 ， ZeroDivisionError 的异常被成功 catch</li></ul><h3 id="example-2-合并两个-except"><a href="#example-2-合并两个-except" class="headerlink" title="example 2 - 合并两个 except"></a>example 2 - 合并两个 except</h3><ul><li>从上面的例子可以看到，我们的程序对于两个不同异常的处理手段是一样的，那么可以合并</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">10</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> (NameError, ZeroDivisionError) <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'-------------End of the process-------------'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="string">'ZeroDivisionError'</span>&gt;</span><br><span class="line">division by zero</span><br><span class="line">-------------End of the process-------------</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><ul><li>依然成功执行了</li></ul><h3 id="example-3-Exception"><a href="#example-3-Exception" class="headerlink" title="example 3 - Exception"></a>example 3 - Exception</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'2'</span>+<span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span> (NameError, ZeroDivisionError) <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'-------------End of the process-------------'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="string">'TypeError'</span>&gt;</span><br><span class="line">can only concatenate <span class="built_in">str</span> (<span class="keyword">not</span> <span class="string">"int"</span>) to <span class="built_in">str</span></span><br><span class="line">-------------End of the process-------------</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>我们可以在最后抓住Exception，这样不管任何类型的异常，无论考虑到的还是没考虑到的，都能抓住。</p></li><li><p>我们没有针对TypeError 进行捕获，但依然catch了。</p></li></ul><h3 id="example-4-else"><a href="#example-4-else" class="headerlink" title="example 4 - else"></a>example 4 - else</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="number">1</span>+<span class="number">1</span></span><br><span class="line"><span class="keyword">except</span> (NameError, ZeroDivisionError) <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'else'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'-------------End of the process-------------'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">-------------End of the process-------------</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><ul><li>语句中没有任何错误，所以程序执行else语句</li><li>当任一一个错误被捕获，else语句都不会被执行</li></ul><h3 id="example-5-finally"><a href="#example-5-finally" class="headerlink" title="example 5 - finally"></a>example 5 - finally</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">10</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> (NameError, ZeroDivisionError) <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'else'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'finally'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'-------------End of the process-------------'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="string">'ZeroDivisionError'</span>&gt;</span><br><span class="line">division by zero</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">-------------End of the process-------------</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><ul><li>finally 语句一定会执行</li><li>就算程序没错误，执行了else，也会执行finally</li></ul><h2 id="Python-内置异常类型"><a href="#Python-内置异常类型" class="headerlink" title="Python 内置异常类型"></a>Python 内置异常类型</h2><p><img src="https://s2.loli.net/2022/06/18/rIg2QXnFwE74hsA.png" alt="image-20220618214423110"></p><h2 id="主动抛出异常-raise"><a href="#主动抛出异常-raise" class="headerlink" title="主动抛出异常 - raise"></a>主动抛出异常 - raise</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Exception </tag>
            
            <tag> Debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Exception and Debug</title>
      <link href="/liangjunyi.github.io/2022/06/18/python-python-test-1/"/>
      <url>/liangjunyi.github.io/2022/06/18/python-python-test-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-Exception-and-Debug"><a href="#Python-Exception-and-Debug" class="headerlink" title="Python Exception and Debug"></a>Python Exception and Debug</h1><h2 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h2><p>处理一些不可预料的情况，比如文件不存在，空间满了，通讯超时等等。</p><p>遇到这些问题了程序该如何执行？</p><p>这就是异常处理的价值和我们处理异常的目的。</p><h3 id="Python常见的异常"><a href="#Python常见的异常" class="headerlink" title="Python常见的异常"></a>Python常见的异常</h3><ul><li><p>ZeroDivisionError</p></li><li><p>NameError</p></li><li><p>TypeError</p></li></ul><h3 id="Eg"><a href="#Eg" class="headerlink" title="Eg:"></a>Eg:</h3><h4 id="ZeroDivisionError"><a href="#ZeroDivisionError" class="headerlink" title="ZeroDivisionError"></a>ZeroDivisionError</h4><p><img src="https://s2.loli.net/2022/06/18/ds5BLRupw9Xn4YF.png" alt="image-20220618180916517"></p><ul><li>这么写，没有任何的语法错误，IDE不会报错</li></ul><p><img src="https://s2.loli.net/2022/06/18/uh9NHbsnZYCQ8Wy.png" alt="image-20220618181014653"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```NameError</span><br><span class="line"></span><br><span class="line">![image-20220618181230216](https://s2.loli.net/2022/06/18/Z1mzoOG9N7iL3aD.png)</span><br><span class="line"></span><br><span class="line">- 之前没有定义过b，但是这里用到了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### TypeError</span><br><span class="line"></span><br><span class="line">![image-20220618181313133](https://s2.loli.net/2022/06/18/DK9Zi4vhFsSlWzN.png)</span><br><span class="line"></span><br><span class="line">- 两个不同类型的数强制进行运算</span><br><span class="line"></span><br><span class="line">## Python 的异常处理语法</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">try:</span><br><span class="line">    程序执行语句块</span><br><span class="line">except ExceptionName as alias:</span><br><span class="line"> &nbsp; &nbsp;异常处理语句块</span><br><span class="line">except ExceptionName as alias:</span><br><span class="line"> &nbsp; &nbsp;异常处理语句块</span><br><span class="line">except ExceptionName as alias:</span><br><span class="line"> &nbsp; &nbsp;异常处理语句块</span><br><span class="line">...</span><br><span class="line">else:</span><br><span class="line"> &nbsp; &nbsp;无异常时处理语句块</span><br><span class="line">finally:</span><br><span class="line"> &nbsp; &nbsp;必须处理语句块</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><figcaption><span>类型有很多，可以层层分析，对应着处理。最后可以加上处理 Exception 的语句，因为 Exception是父类，能捕获所有的异常。</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```{0}Exception </span><br><span class="line"></span><br><span class="line">## 例子</span><br><span class="line"></span><br><span class="line">### example 1 - 简单例子</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">try:</span><br><span class="line"> &nbsp; &nbsp;print(10/0)</span><br><span class="line">except NameError as e:</span><br><span class="line"> &nbsp; &nbsp;print(type(e))</span><br><span class="line"> &nbsp; &nbsp;print(e)</span><br><span class="line">except ZeroDivisionError as e:</span><br><span class="line"> &nbsp; &nbsp;print(type(e))</span><br><span class="line"> &nbsp; &nbsp;print(e)</span><br><span class="line">​</span><br><span class="line">print('-------------End of the process-------------')</span><br></pre></td></tr></tbody></table></figure><p>结果</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="string">'ZeroDivisionError'</span>&gt;</span><br><span class="line">division by zero</span><br><span class="line">-------------End of the process-------------</span><br><span class="line">​</span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><ul><li>10/0 ， ZeroDivisionError 的异常被成功 catch</li></ul><h3 id="example-2-合并两个-except"><a href="#example-2-合并两个-except" class="headerlink" title="example 2 - 合并两个 except"></a>example 2 - 合并两个 except</h3><ul><li>从上面的例子可以看到，我们的程序对于两个不同异常的处理手段是一样的，那么可以合并</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line"> &nbsp; &nbsp;<span class="built_in">print</span>(<span class="number">10</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> (NameError, ZeroDivisionError) <span class="keyword">as</span> e:</span><br><span class="line"> &nbsp; &nbsp;<span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line"> &nbsp; &nbsp;<span class="built_in">print</span>(e)</span><br><span class="line">​</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'-------------End of the process-------------'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="string">'ZeroDivisionError'</span>&gt;</span><br><span class="line">division by zero</span><br><span class="line">-------------End of the process-------------</span><br><span class="line">​</span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><ul><li>依然成功执行了</li></ul><h3 id="example-3-Exception"><a href="#example-3-Exception" class="headerlink" title="example 3 - Exception"></a>example 3 - Exception</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line"> &nbsp; &nbsp;<span class="built_in">print</span>(<span class="string">'2'</span>+<span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span> (NameError, ZeroDivisionError) <span class="keyword">as</span> e:</span><br><span class="line"> &nbsp; &nbsp;<span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line"> &nbsp; &nbsp;<span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"> &nbsp; &nbsp;<span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line"> &nbsp; &nbsp;<span class="built_in">print</span>(e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'-------------End of the process-------------'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="string">'TypeError'</span>&gt;</span><br><span class="line">can only concatenate <span class="built_in">str</span> (<span class="keyword">not</span> <span class="string">"int"</span>) to <span class="built_in">str</span></span><br><span class="line">-------------End of the process-------------</span><br><span class="line">​</span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><ul><li>我们可以在最后抓住Exception，这样不管任何类型的异常，无论考虑到的还是没考虑到的，都能抓住。</li><li>我们没有针对TypeError 进行捕获，但依然catch了。</li></ul><h3 id="example-4-else"><a href="#example-4-else" class="headerlink" title="example 4 - else"></a>example 4 - else</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line"> &nbsp; &nbsp;a = <span class="number">1</span>+<span class="number">1</span></span><br><span class="line"><span class="keyword">except</span> (NameError, ZeroDivisionError) <span class="keyword">as</span> e:</span><br><span class="line"> &nbsp; &nbsp;<span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line"> &nbsp; &nbsp;<span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"> &nbsp; &nbsp;<span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line"> &nbsp; &nbsp;<span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"> &nbsp; &nbsp;<span class="built_in">print</span>(<span class="string">'else'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'-------------End of the process-------------'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">-------------End of the process-------------</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><ul><li>语句中没有任何错误，所以程序执行else语句</li><li>当任一一个错误被捕获，else语句都不会被执行</li></ul><h3 id="example-5-finally"><a href="#example-5-finally" class="headerlink" title="example 5 - finally"></a>example 5 - finally</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">10</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> (NameError, ZeroDivisionError) <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'else'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'finally'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'-------------End of the process-------------'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="string">'ZeroDivisionError'</span>&gt;</span><br><span class="line">division by zero</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">-------------End of the process-------------</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><ul><li>finally 语句一定会执行</li><li>就算程序没错误，执行了else，也会执行finally</li></ul><h2 id="Python-内置异常类型"><a href="#Python-内置异常类型" class="headerlink" title="Python 内置异常类型"></a>Python 内置异常类型</h2><p><img src="https://s2.loli.net/2022/06/18/rIg2QXnFwE74hsA.png" alt="image-20220618214423110"></p><pre><code class="xxxxxxxxxx"></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Exception </tag>
            
            <tag> Debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript提高之面向对象(六)</title>
      <link href="/liangjunyi.github.io/2022/06/13/web-learning-javascript-6/"/>
      <url>/liangjunyi.github.io/2022/06/13/web-learning-javascript-6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript提高之面向对象(六)</title>
      <link href="/liangjunyi.github.io/2022/06/13/web-learning-javascript-7/"/>
      <url>/liangjunyi.github.io/2022/06/13/web-learning-javascript-7/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript进阶之BOM技术(五)</title>
      <link href="/liangjunyi.github.io/2022/06/13/web-learning-javascript-5/"/>
      <url>/liangjunyi.github.io/2022/06/13/web-learning-javascript-5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript进阶之DOM技术(四)</title>
      <link href="/liangjunyi.github.io/2022/06/13/web-learning-javascript-4/"/>
      <url>/liangjunyi.github.io/2022/06/13/web-learning-javascript-4/</url>
      
        <content type="html"><![CDATA[<h1 id="目录总览"><a href="#目录总览" class="headerlink" title="目录总览"></a>目录总览</h1><p><img src="https://img-blog.csdnimg.cn/f073657f05c248ffa8056bf437e66edb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><h1 id="1、DOM简介"><a href="#1、DOM简介" class="headerlink" title="1、DOM简介"></a>1、DOM简介</h1><h2 id="1-1、什么是DOM"><a href="#1-1、什么是DOM" class="headerlink" title="1.1、什么是DOM"></a>1.1、什么是DOM</h2><p>文档对象模型（Document Object Model，简称 DOM），是 W3C 组织推荐的处理可扩展标记语言（HTML或者XML）的标准编程接口</p><p>W3C 已经定义了一系列的 DOM 接口，通过这些 DOM 接口可以改变网页的内容、结构和样式。</p><p><img src="https://s2.loli.net/2022/06/13/jIwaBZrqJz3cKXP.png" alt="image-20220613170848302"></p><ul><li>文档：一个页面就是一个文档，DOM中使用doucument来表示</li><li>元素：页面中的所有标签都是元素，DOM中使用 element 表示</li><li>节点：网页中的所有内容都是节点（标签，属性，文本，注释等），DOM中使用node表示</li></ul><p>DOM 把以上内容都看做是对象</p><h1 id="2、获取元素"><a href="#2、获取元素" class="headerlink" title="2、获取元素"></a>2、获取元素</h1><h2 id="2-1、如何获取页面元素"><a href="#2-1、如何获取页面元素" class="headerlink" title="2.1、如何获取页面元素"></a>2.1、如何获取页面元素</h2><p>DOM在我们实际开发中主要用来操作元素。</p><p>我们如何来获取页面中的元素呢?</p><p>获取页面中的元素可以使用以下几种方式:</p><ul><li>根据 ID 获取</li><li>根据标签名获取</li><li>通过 HTML5 新增的方法获取</li><li>特殊元素获取</li></ul><h2 id="2-2、根据ID获取"><a href="#2-2、根据ID获取" class="headerlink" title="2.2、根据ID获取"></a>2.2、根据ID获取</h2><p>使用 getElementByld() 方法可以获取带ID的元素对象</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doucument.<span class="title function_">getElementByld</span>(<span class="string">'id名'</span>)</span><br></pre></td></tr></tbody></table></figure><p>使用 <code>console.dir()</code> 可以打印我们获取的元素对象，更好的查看对象里面的属性和方法。</p><p><strong>示例</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"time"</span>&gt;<span class="number">2019</span>-<span class="number">9</span>-<span class="number">9</span>&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1.因为我们文档页面从上往下加载，所以得先有标签，所以script写在标签下面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2.get 获得 element 元素 by 通过 驼峰命名法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 3.参数 id是大小写敏感的字符串</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 4.返回的是一个元素对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> timer = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'time'</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(timer);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 5. console.dir 打印我们的元素对象，更好的查看里面的属性和方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">dir</span>(timer);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-3、根据标签名获取"><a href="#2-3、根据标签名获取" class="headerlink" title="2.3、根据标签名获取"></a>2.3、根据标签名获取</h2><p>根据<strong>标签名</strong>获取，使用 <code>getElementByTagName()</code> 方法可以返回带有指定标签名的<strong>对象的集合</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doucument.<span class="title function_">getElementsByTagName</span>(<span class="string">'标签名'</span>);</span><br></pre></td></tr></tbody></table></figure><ul><li>因为得到的是一个对象的集合，所以我们想要操作里面的元素就需要遍历</li><li>得到元素对象是动态的</li><li>返回的是获取过来元素对象的集合，以伪数组的形式存储</li><li>如果获取不到元素，则返回为空的伪数组(因为获取不到对象)</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应是等你好久<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应是等你好久<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应是等你好久<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应是等你好久<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应是等你好久<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1.返回的是获取过来元素对象的集合 以伪数组的形式存储</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">'li'</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(lis);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[<span class="number">0</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2.依次打印,遍历</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[i]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 3.如果页面中只有 1 个 li，返回的还是伪数组的形式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 4.如果页面中没有这个元素，返回的是空伪数组</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-4、根据标签名获取"><a href="#2-4、根据标签名获取" class="headerlink" title="2.4、根据标签名获取"></a>2.4、根据标签名获取</h2><p>还可以根据标签名获取某个元素（父元素）内部所有指定标签名的子元素,获取的时候不包括父元素自己</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">getElementsByTagName</span>(<span class="string">'标签名'</span>)</span><br><span class="line"></span><br><span class="line">ol.<span class="title function_">getElementsByTagName</span>(<span class="string">'li'</span>);</span><br></pre></td></tr></tbody></table></figure><p>注意：父元素必须是单个对象(必须指明是哪一个元素对象)，获取的时候不包括父元素自己</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">//element.getElementsByTagName('标签名'); 父元素必须是指定的单个元素</span></span><br><span class="line">    <span class="keyword">var</span> ol = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'ol'</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="title function_">getElementsByTagName</span>(<span class="string">'li'</span>));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="2-5、通过H5新增方法获取"><a href="#2-5、通过H5新增方法获取" class="headerlink" title="2.5、通过H5新增方法获取"></a>2.5、通过H5新增方法获取</h2><h3 id="①getElementsByClassName"><a href="#①getElementsByClassName" class="headerlink" title="①getElementsByClassName"></a>①getElementsByClassName</h3><p>根据类名返回元素对象合集</p><ul><li><code>document.getElementsByClassName('类名')</code></li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">'类名'</span>); </span><br></pre></td></tr></tbody></table></figure><h3 id="②document-querySelector"><a href="#②document-querySelector" class="headerlink" title="②document.querySelector"></a>②document.querySelector</h3><p>根据指定选择器返回第一个元素对象</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">'选择器'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切记里面的选择器需要加符号 </span></span><br><span class="line"><span class="comment">// 类选择器.box </span></span><br><span class="line"><span class="comment">// id选择器 #nav</span></span><br><span class="line"><span class="keyword">var</span> firstBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">'.box'</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="③document-querySelectorAll"><a href="#③document-querySelectorAll" class="headerlink" title="③document.querySelectorAll"></a>③document.querySelectorAll</h3><p>根据指定选择器返回所有元素对象</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">'选择器'</span>);</span><br></pre></td></tr></tbody></table></figure><p>注意：</p><p>querySelector 和 querySelectorAll 里面的选择器需要加符号,比如: document.querySelector(‘#nav’);</p><h3 id="④例子"><a href="#④例子" class="headerlink" title="④例子"></a>④例子</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1. getElementsByClassName 根据类名获得某些元素集合</span></span><br><span class="line">    <span class="keyword">var</span> boxs = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">'box'</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(boxs);</span><br><span class="line">    <span class="comment">// 2. querySelector 返回指定选择器的第一个元素对象  切记 里面的选择器需要加符号 .box  #nav</span></span><br><span class="line">    <span class="keyword">var</span> firstBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">'.box'</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(firstBox);</span><br><span class="line">    <span class="keyword">var</span> nav = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">'#nav'</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(nav);</span><br><span class="line">    <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">'li'</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(li);</span><br><span class="line">    <span class="comment">// 3. querySelectorAll()返回指定选择器的所有元素对象集合</span></span><br><span class="line">    <span class="keyword">var</span> allBox = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">'.box'</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(allBox);</span><br><span class="line">    <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">'li'</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(lis);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="2-6、获取特殊元素"><a href="#2-6、获取特殊元素" class="headerlink" title="2.6、获取特殊元素"></a>2.6、获取特殊元素</h2><h5 id="①获取body元素"><a href="#①获取body元素" class="headerlink" title="①获取body元素"></a>①获取body元素</h5><p>返回body元素对象</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>;</span><br></pre></td></tr></tbody></table></figure><h5 id="②获取html元素"><a href="#②获取html元素" class="headerlink" title="②获取html元素"></a>②获取html元素</h5><p>返回html元素对象</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br></pre></td></tr></tbody></table></figure><h1 id="3、事件基础"><a href="#3、事件基础" class="headerlink" title="3、事件基础"></a>3、事件基础</h1><h3 id="3-1、事件概述"><a href="#3-1、事件概述" class="headerlink" title="3.1、事件概述"></a>3.1、事件概述</h3><p>JavaScript 使我们有能力创建动态页面，而事件是可以被 JavaScript 侦测到的行为。</p><p>简单理解： 触发— 响应机制。</p><p>网页中的每个元素都可以产生某些可以触发 JavaScript 的事件，例如，我们可以在用户点击某按钮时产生一个事件，然后去执行某些操作。</p><h3 id="3-2、事件三要素"><a href="#3-2、事件三要素" class="headerlink" title="3.2、事件三要素"></a>3.2、事件三要素</h3><ol><li>事件源(谁)</li><li>事件类型(什么事件)</li><li>事件处理程序(做啥)</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 点击一个按钮，弹出对话框</span></span><br><span class="line">    <span class="comment">// 1. 事件是有三部分组成  事件源  事件类型  事件处理程序   我们也称为事件三要素</span></span><br><span class="line">    <span class="comment">//(1) 事件源 事件被触发的对象   谁  按钮</span></span><br><span class="line">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'btn'</span>);</span><br><span class="line">    <span class="comment">//(2) 事件类型  如何触发 什么事件 比如鼠标点击(onclick) 还是鼠标经过 还是键盘按下</span></span><br><span class="line">    <span class="comment">//(3) 事件处理程序  通过一个函数赋值的方式 完成</span></span><br><span class="line">    btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">'点秋香'</span>);</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="3-3、执行事件的步骤"><a href="#3-3、执行事件的步骤" class="headerlink" title="3.3、执行事件的步骤"></a>3.3、执行事件的步骤</h3><ol><li>获取事件源</li><li>注册事件(绑定事件)</li><li>添加事件处理程序(采取函数赋值形式)</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 执行事件步骤</span></span><br><span class="line">    <span class="comment">// 点击div 控制台输出 我被选中了</span></span><br><span class="line">    <span class="comment">// 1. 获取事件源</span></span><br><span class="line">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">'div'</span>);</span><br><span class="line">    <span class="comment">// 2.绑定事件 注册事件</span></span><br><span class="line">    <span class="comment">// div.onclick </span></span><br><span class="line">    <span class="comment">// 3.添加事件处理程序 </span></span><br><span class="line">    div.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'我被选中了'</span>);</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="3-4、鼠标事件"><a href="#3-4、鼠标事件" class="headerlink" title="3.4、鼠标事件"></a>3.4、鼠标事件</h3><table><thead><tr><th>鼠标事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过触发</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获得鼠标焦点触发</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table><h1 id="4、操作元素"><a href="#4、操作元素" class="headerlink" title="4、操作元素"></a>4、操作元素</h1><p>JavaScript 的 DOM 操作可以改变网页内容、结构和样式，我们可以利用 DOM 操作元素来改变元素里面的内容 、属性等。注意以下都是属性</p><h2 id="4-1、改变元素内容"><a href="#4-1、改变元素内容" class="headerlink" title="4.1、改变元素内容"></a>4.1、改变元素内容</h2><p>从起始位置到终止位置的内容，但它去除html标签，同时空格和换行也会去掉。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="property">innerText</span></span><br></pre></td></tr></tbody></table></figure><p>起始位置到终止位置的全部内容，包括HTML标签，同时保留空格和换行</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="property">innerHTML</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        我是文字</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// innerText 和 innerHTML的区别 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. innerText 不识别html标签,去除空格和换行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">'div'</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        div.<span class="property">innerText</span> = <span class="string">'&lt;strong&gt;今天是：&lt;/strong&gt; 2019'</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. innerHTML 识别html标签 保留空格和换行的</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        div.<span class="property">innerHTML</span> = <span class="string">'&lt;strong&gt;今天是：&lt;/strong&gt; 2019'</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 这两个属性是可读写的  可以获取元素里面的内容</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">'p'</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">innerText</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">innerHTML</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/13/QXYHIfzU3GoL1tO.png" alt="image-20220613172131307"></p><h2 id="4-2、改变元素属性"><a href="#4-2、改变元素属性" class="headerlink" title="4.2、改变元素属性"></a>4.2、改变元素属性</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// img.属性</span></span><br><span class="line">img.<span class="property">src</span> = <span class="string">"xxx"</span>;</span><br><span class="line"></span><br><span class="line">input.<span class="property">value</span> = <span class="string">"xxx"</span>;</span><br><span class="line">input.<span class="property">type</span> = <span class="string">"xxx"</span>;</span><br><span class="line">input.<span class="property">checked</span> = <span class="string">"xxx"</span>;</span><br><span class="line">input.<span class="property">selected</span> = <span class="literal">true</span> / <span class="literal">false</span>;</span><br><span class="line">input.<span class="property">disabled</span> = <span class="literal">true</span> / <span class="literal">false</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="4-3、改变样式属性"><a href="#4-3、改变样式属性" class="headerlink" title="4.3、改变样式属性"></a>4.3、改变样式属性</h2><p>我们可以通过 JS 修改元素的大小、颜色、位置等样式。</p><ul><li>行内样式操作</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// element.style</span></span><br><span class="line">div.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">'pink'</span>;</span><br><span class="line">div.<span class="property">style</span>.<span class="property">width</span> = <span class="string">'250px'</span>;</span><br></pre></td></tr></tbody></table></figure><ul><li>类名样式操作</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// element.className</span></span><br></pre></td></tr></tbody></table></figure><p>注意：</p><ol><li>JS里面的样式采取驼峰命名法，比如 fontSize ，backgroundColor</li><li>JS 修改 style 样式操作 ，产生的是行内样式，CSS权重比较高</li><li>如果样式修改较多，可以采取操作类名方式更改元素样式</li><li>class 因为是个保留字，因此使用className来操作元素类名属性</li><li>className 会直接更改元素的类名，会覆盖原先的类名</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"first"</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 使用 element.style 获得修改元素样式  如果样式比较少 或者 功能简单的情况下使用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> test = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">'div'</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        test.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// this.style.backgroundColor = 'purple';</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// this.style.color = '#fff';</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// this.style.fontSize = '25px';</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// this.style.marginTop = '100px';</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 让我们当前元素的类名改为了 change</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 2. 我们可以通过 修改元素的className更改元素的样式 适合于样式较多或者功能复杂的情况</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 3. 如果想要保留原先的类名，我们可以这么做 多类名选择器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// this.className = 'change';</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">'first change'</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="4-4、总结"><a href="#4-4、总结" class="headerlink" title="4.4、总结"></a>4.4、总结</h2><p><img src="https://s2.loli.net/2022/06/13/KEOg24ubzeWqYpM.png" alt="image-20220613172342677"></p><h2 id="4-5、排他思想"><a href="#4-5、排他思想" class="headerlink" title="4.5、排他思想"></a>4.5、排他思想</h2><p>如果有同一组元素，我们相要某一个元素实现某种样式，需要用到循环的排他思想算法：</p><ol><li>所有元素全部清除样式（干掉其他人）</li><li>给当前元素设置样式 （留下我自己）</li><li>注意顺序不能颠倒，首先干掉其他人，再设置自己</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 获取所有按钮元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">'button'</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// btns得到的是伪数组  里面的每一个元素 btns[i]</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            btns[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// (1) 我们先把所有的按钮背景颜色去掉  干掉所有人</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    btns[i].<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">''</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// (2) 然后才让当前的元素背景颜色为pink 留下我自己</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">'pink'</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//2. 首先先排除其他人，然后才设置自己的样式 这种排除其他人的思想我们成为排他思想</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></tbody></table></figure><p><img src="https://img-blog.csdnimg.cn/c4ab0beac7444b208441727a380b437e.gif#pic_center" alt="在这里插入图片描述"></p><h2 id="4-6、自定义属性"><a href="#4-6、自定义属性" class="headerlink" title="4.6、自定义属性"></a>4.6、自定义属性</h2><h3 id="4-6-1、获取属性值"><a href="#4-6-1、获取属性值" class="headerlink" title="4.6.1、获取属性值"></a>4.6.1、获取属性值</h3><ul><li>获取内置属性值(元素本身自带的属性)</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.属性;</span><br></pre></td></tr></tbody></table></figure><ul><li>获取自定义的属性</li></ul><h3 id="4-6-2、设置属性值"><a href="#4-6-2、设置属性值" class="headerlink" title="4.6.2、设置属性值"></a>4.6.2、设置属性值</h3><ul><li>设置内置属性值</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.属性 = <span class="string">'值'</span>;</span><br></pre></td></tr></tbody></table></figure><ul><li>主要设置自定义的属性</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">setAttribute</span>(<span class="string">'属性'</span>,<span class="string">'值'</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="4-6-3、移除属性"><a href="#4-6-3、移除属性" class="headerlink" title="4.6.3、移除属性"></a>4.6.3、移除属性</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">removeAttribute</span>(<span class="string">'属性'</span>);</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础之对象与内置对象(三)</title>
      <link href="/liangjunyi.github.io/2022/06/13/web-learning-javascript-3/"/>
      <url>/liangjunyi.github.io/2022/06/13/web-learning-javascript-3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础之函数与作用域(二)</title>
      <link href="/liangjunyi.github.io/2022/06/13/web-learning-javascript-2/"/>
      <url>/liangjunyi.github.io/2022/06/13/web-learning-javascript-2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础大总结(一)</title>
      <link href="/liangjunyi.github.io/2022/06/13/web-learning-javascript-1/"/>
      <url>/liangjunyi.github.io/2022/06/13/web-learning-javascript-1/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="JavaScript介绍"><a href="#JavaScript介绍" class="headerlink" title="JavaScript介绍"></a>JavaScript介绍</h2><ul><li>JavaScript 是世界上最流行的语言之一，是一种运行在客户端的脚本语言 （Script 是脚本的意思）</li><li>脚本语言：不需要编译，运行过程中由 js 解释器( js 引擎）逐行来进行解释并执行</li><li>现在也可以基于 Node.js 技术进行服务器端编程</li></ul><p><img src="https://s2.loli.net/2022/06/13/3AeNcqfsm89wTBM.png" alt="image-20220613130913213"></p><h3 id="浏览器执行JS简介"><a href="#浏览器执行JS简介" class="headerlink" title="浏览器执行JS简介"></a>浏览器执行JS简介</h3><p>览器分成两部分：渲染引擎和 JS 引擎</p><ul><li>渲染引擎：用来解析HTML与CSS，俗称内核，比如 chrome 浏览器的 blink ，老版本的 webkit</li><li>JS 引擎：也称为 JS 解释器。 用来读取网页中的JavaScript代码，对其处理后运行，比如 chrome 浏览器的 V8</li></ul><p>浏览器本身并不会执行JS代码，而是通过内置 JavaScript 引擎(解释器) 来执行 JS 代码 。JS 引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行，所以 JavaScript 语言归为脚本语言，会逐行解释执行。</p><p><img src="https://s2.loli.net/2022/06/13/M5hJrdeRHXKibaQ.png" alt="image-20220613131015416"></p><h3 id="JS的组成"><a href="#JS的组成" class="headerlink" title="JS的组成"></a>JS的组成</h3><p>JavaScript 包括 ECMAScript、DOM、BOM</p><p><img src="https://s2.loli.net/2022/06/13/Zv4CgnJX8khxaUN.png" alt="image-20220613131058669"></p><h4 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h4><p><strong>ECMAScript</strong> 是由ECMA 国际（ 原欧洲计算机制造商协会）进行标准化的一门编程语言，这种语言在万维网上应用广泛，它往往被称为 JavaScript 或 JScript，但实际上后两者是 ECMAScript 语言的实现和扩展。</p><p><img src="https://s2.loli.net/2022/06/13/PCDeGFZol8IKtQb.png" alt="image-20220613131135413"></p><p>ECMAScript：ECMAScript 规定了JS的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套JS语法工业标准。</p><h4 id="DOM文档对象模型"><a href="#DOM文档对象模型" class="headerlink" title="DOM文档对象模型"></a>DOM文档对象模型</h4><p><strong>文档对象模型</strong>（Document Object Model，简称DOM），是W3C组织推荐的处理可扩展标记语言的标准编程接口。通过 DOM 提供的接口可以对页面上的各种元素进行操作（大小、位置、颜色等）。</p><h4 id="BOM浏览器对象模型"><a href="#BOM浏览器对象模型" class="headerlink" title="BOM浏览器对象模型"></a>BOM浏览器对象模型</h4><p><strong>BOM</strong> (Browser Object Model，简称BOM) 是指浏览器对象模型，它提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。通过BOM可以操作浏览器窗口，比如弹出框、控制浏览器跳转、获取分辨率等。</p><h2 id="1、JS初体验"><a href="#1、JS初体验" class="headerlink" title="1、JS初体验"></a>1、JS初体验</h2><h3 id="1-1、行内式JS"><a href="#1-1、行内式JS" class="headerlink" title="1.1、行内式JS"></a>1.1、行内式JS</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"button"</span> value=<span class="string">"点我试试"</span> onclink=<span class="string">"javascript:alert('Hello World')"</span> /&gt;</span><br></pre></td></tr></tbody></table></figure><ol><li>可以将单行或少量JS代码写在HTML标签的事件属性中(以on开头的属性)，如： onclink</li><li>注意单双引号的使用：在HTML中我们推荐使用<strong>双引号</strong>，JS中我们推荐使用<strong>单引号</strong></li><li>可读性差，在 HTML 中编入 JS 大量代码时，不方便阅读</li><li>特殊情况下使用</li></ol><h3 id="1-2、内嵌式JS"><a href="#1-2、内嵌式JS" class="headerlink" title="1.2、内嵌式JS"></a>1.2、内嵌式JS</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="title function_">alert</span>(<span class="string">'Hello World!'</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><ul><li>可以将多行JS代码写到<code>&lt;script&gt;</code>标签中</li><li>内嵌 JS 是学习时常用的方式</li></ul><h3 id="1-3、外部JS"><a href="#1-3、外部JS" class="headerlink" title="1.3、外部JS"></a>1.3、外部JS</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"my.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><ol><li>利于HTML页面代码结构化，把单独JS代码独立到HTML页面之外，既美观，又方便</li><li>引用外部JS文件的script标签中间不可以写代码</li><li>适合于JS代码量比较大的情况</li></ol><h2 id="2、JS基本语法"><a href="#2、JS基本语法" class="headerlink" title="2、JS基本语法"></a>2、JS基本语法</h2><h3 id="2-1、注释"><a href="#2-1、注释" class="headerlink" title="2.1、注释"></a>2.1、注释</h3><h4 id="2-1-1、单行注释"><a href="#2-1-1、单行注释" class="headerlink" title="2.1.1、单行注释"></a>2.1.1、单行注释</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  单行注释</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2-1-2、多行注释"><a href="#2-1-2、多行注释" class="headerlink" title="2.1.2、多行注释"></a>2.1.2、多行注释</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span>    </span><br></pre></td></tr></tbody></table></figure><ul><li>快捷键 <code>shift + alt + a</code></li><li>vscode中修改快捷键方式：vscode➡ 首选项按钮➡ 键盘快捷方式 ➡ 查找原来的快捷键➡ 修改为新的快捷键➡ 回车确认</li></ul><h3 id="2-2、输入输出语句"><a href="#2-2、输入输出语句" class="headerlink" title="2.2、输入输出语句"></a>2.2、输入输出语句</h3><table><thead><tr><th>方法</th><th>说明</th><th>归属</th></tr></thead><tbody><tr><td>alert(msg);</td><td>浏览器弹出警示框</td><td>浏览器</td></tr><tr><td>console.log(msg);</td><td>浏览器控制台打印输出信息</td><td>浏览器</td></tr><tr><td>prompt(info);</td><td>浏览看弹出输入框，用户可以输入</td><td>浏览器</td></tr></tbody></table><ul><li><code>alert()</code> 主要用来显示消息给用户</li><li><code>console.log()</code> 用来给程序员看自己运行时的消息</li></ul><h3 id="2-3、变量"><a href="#2-3、变量" class="headerlink" title="2.3、变量"></a>2.3、变量</h3><ul><li>变量是用于存放数据的<strong>容器</strong>，我们通过<strong>变量名</strong>获取数据，甚至数据可以修改</li><li><strong>本质：变量是程序在内存</strong>中申请的一块用来存放数据的空间</li></ul><h4 id="2-3-1、变量初始化"><a href="#2-3-1、变量初始化" class="headerlink" title="2.3.1、变量初始化"></a>2.3.1、变量初始化</h4><ol><li>var是一个JS关键字，用来声明变量(variable变量的意思)。使用该关键字声明变量后，计算机会自动为变量分配内存空间。</li><li>age 是程序员定义的变量名，我们要通过变量名来访问内存中分配的空间</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明变量同时赋值为18</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>; </span><br><span class="line"><span class="comment">//同时声明多个变量时，只需要写一个 var， 多个变量名之间使用英文逗号隔开。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>, address =<span class="string">'火影村'</span>,salary = <span class="number">15000</span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="2-3-2、声明变量特殊情况"><a href="#2-3-2、声明变量特殊情况" class="headerlink" title="2.3.2、声明变量特殊情况"></a>2.3.2、声明变量特殊情况</h4><table><thead><tr><th>情况</th><th>说明</th><th>结果</th></tr></thead><tbody><tr><td>var age; console.log(age);</td><td>只声明，不赋值</td><td>undefined</td></tr><tr><td>console.log(age)</td><td>不声明 不赋值 直接使用</td><td>报错</td></tr><tr><td>age = 10;console.log(age);</td><td>不声明 只赋值</td><td>10</td></tr></tbody></table><h4 id="2-3-3、变量的命名规范"><a href="#2-3-3、变量的命名规范" class="headerlink" title="2.3.3、变量的命名规范"></a>2.3.3、变量的命名规范</h4><ol><li><p>由字母(A-Z,a-z)，数字(0-9)，下划线(_)，美元符号($)组成，如:usrAge,num01,__name</p></li><li><p>严格区分大小写。 var app; 和 var App; 是两个变量</p></li><li><p>不能以数字开头。</p></li><li><p>不能是关键字，保留字。例如：var,for,while</p></li><li><p>遵循驼峰命名法。首字母小写，后面单词的首字母需要大写。myFirstName</p></li></ol><h3 id="2-4、数据类型"><a href="#2-4、数据类型" class="headerlink" title="2.4、数据类型"></a>2.4、数据类型</h3><p><strong>JavaScript</strong> <strong>是一种弱类型或者说动态语言。</strong>这意味着不用提前声明变量的类型，在程序运行过程中，类型会被自动确定。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;  <span class="comment">//这是一个数字型</span></span><br><span class="line"><span class="keyword">var</span> areYouOk = <span class="string">'使得'</span>;<span class="comment">//这是一个字符串</span></span><br></pre></td></tr></tbody></table></figure><ul><li>在代码运行时，变量的数据类型是由 JS引擎 根据 = 右边变量值的数据类型来判断 的，运行完毕之后， 变量就确定了数据类型。</li><li>JavaScript 拥有动态类型，同时也意味着相同的变量可用作不同的类型</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">6</span>;<span class="comment">//x为数字</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">"Bill"</span>;<span class="comment">//x为字符串</span></span><br></pre></td></tr></tbody></table></figure><p>JS 把数据类型分为两类：</p><ul><li>基本数据类型(Number,String,Boolean,Undefined,Null)</li><li>复杂数据类型(Object)</li></ul><h4 id="2-4-1、基本数据类型"><a href="#2-4-1、基本数据类型" class="headerlink" title="2.4.1、基本数据类型"></a>2.4.1、基本数据类型</h4><table><thead><tr><th>简单数据类型</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>Number</td><td>数字型，包含整型值和浮点型值，如21，0.21</td><td>0</td></tr><tr><td>Boolean</td><td>布尔值类型，如true，false ，等价于1和0</td><td>false</td></tr><tr><td>Undefined</td><td>var a; 声明了变量a但是没有赋值，此时a=undefined</td><td>undefined（未定义的）</td></tr><tr><td>string</td><td>字符串类型，如“张三”</td><td>“”</td></tr><tr><td>Null</td><td>var a = null;声明了变量a为空值</td><td>null</td></tr></tbody></table><h4 id="2-4-2、数字型Number"><a href="#2-4-2、数字型Number" class="headerlink" title="2.4.2、数字型Number"></a>2.4.2、数字型Number</h4><p>JavaScript 数字类型既可以用来保存整数值，也可以保存小数(浮点数）。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">12</span>;<span class="comment">//整数</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Age</span> = <span class="number">21.3747</span>;<span class="comment">//小数</span></span><br></pre></td></tr></tbody></table></figure><p>最常见的进制有二进制、八进制、十进制、十六进制。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.八进制数字序列范围：0~7</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">07</span>; <span class="comment">//对应十进制的7</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Num2</span> = <span class="number">019</span>;<span class="comment">//对应十进制的19</span></span><br><span class="line"><span class="keyword">var</span> num3 = <span class="number">08</span>;<span class="comment">//对应十进制的8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.十六进制数字序列范围：0~9以及A~F</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0xA</span>;</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>在JS中八进制前面加0，十六进制前面加 0x</strong></li></ul><h5 id="①数字型范围"><a href="#①数字型范围" class="headerlink" title="①数字型范围"></a>①数字型范围</h5><ul><li>JS中数值的最大值：<code>Number.MAX_VALUE</code></li><li>JS中数值的最小值：<code>Number.MIN_VALUE</code></li></ul><h5 id="②数字型的三个特殊值"><a href="#②数字型的三个特殊值" class="headerlink" title="②数字型的三个特殊值"></a>②数字型的三个特殊值</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="title class_">Infinity</span>); <span class="comment">//Infinity(无穷大)</span></span><br><span class="line"><span class="title function_">alert</span>(-<span class="title class_">Infinity</span>); <span class="comment">//-Infinity(无穷小)</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">NaN</span>);       <span class="comment">//NaN - Not a Number ,代表任何一个非数值</span></span><br></pre></td></tr></tbody></table></figure><ul><li>Infinity ，代表无穷大，大于任何数值</li><li>-Infinity ，代表无穷小，小于任何数值</li><li>Nan ，Not a Number，代表一个非数值</li></ul><h5 id="③isNaN"><a href="#③isNaN" class="headerlink" title="③isNaN"></a>③isNaN</h5><p>这个方法用来判断非数字，并且返回一个值，如果是数字返回的是false，如果不是数字返回的是true</p><p><img src="https://s2.loli.net/2022/06/13/f9pq4yndEbV7oP5.png" alt="image-20220613133052884"></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userAge = <span class="number">21</span>;</span><br><span class="line"><span class="keyword">var</span> isOk = <span class="title function_">isNan</span>(userAge);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(isOk);<span class="comment">//false,21不是一个非数字</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> userName = <span class="string">"andy"</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isNan</span>(userName));<span class="comment">//true,"andy"是一个非数字</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2-4-3、字符串型String"><a href="#2-4-3、字符串型String" class="headerlink" title="2.4.3、字符串型String"></a>2.4.3、字符串型String</h4><p>字符串型可以是引号中的任意文本，其语法为 “<strong>双引号</strong>” 和 “<strong>单引号</strong>’’</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strMsg = <span class="string">"我爱北京天安门~"</span>;<span class="comment">//使用双引号表示字符串</span></span><br><span class="line"><span class="keyword">var</span> strMsg = <span class="string">'我爱北京'</span>;  <span class="comment">//使用单引号表示字符串</span></span><br></pre></td></tr></tbody></table></figure><p>因为 HTML 标签里面的属性使用的是双引号，JS 这里我们更推荐<strong>使用单引号</strong>。</p><h5 id="①字符串引号嵌套"><a href="#①字符串引号嵌套" class="headerlink" title="①字符串引号嵌套"></a>①字符串引号嵌套</h5><p>JS可以用 <strong>单引号嵌套双引号</strong>，或者用 <strong>双引号嵌套单引号</strong>（<strong>外双内单，外单内双</strong>）</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strMsg =<span class="string">'我是一个“高富帅”'</span> <span class="comment">//可以用 ' ' 包含 " "</span></span><br><span class="line"><span class="keyword">var</span> strMsg2 =<span class="string">"我是'高富帅'"</span> <span class="comment">//可以用" "  包含  ''</span></span><br></pre></td></tr></tbody></table></figure><h5 id="②字符串转义符"><a href="#②字符串转义符" class="headerlink" title="②字符串转义符"></a>②字符串转义符</h5><p>类似HTML里面的特殊字符，字符串中也有特殊字符，我们称之为转义符。</p><p>转义符都是 \ 开头的，常用的转义符及其说明如下：</p><table><thead><tr><th>转义符</th><th>解释说明</th></tr></thead><tbody><tr><td>\n</td><td>换行符，n是newline</td></tr><tr><td>\ \</td><td>斜杠\</td></tr><tr><td>\ ’</td><td>’ 单引号</td></tr><tr><td>\ ‘’</td><td>‘’ 双引号</td></tr><tr><td>\ t</td><td>tab 缩进</td></tr><tr><td>\ b</td><td>空格，b是blank的意思</td></tr></tbody></table><h5 id="③字符串长度"><a href="#③字符串长度" class="headerlink" title="③字符串长度"></a>③字符串长度</h5><p>字符串是由若干字符组成的，这些字符的数量就是字符串的长度。通过字符串的 length 属性可以获取整个字符串的长度。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过字符串的length属性可以获取整个字符串的长度</span></span><br><span class="line"><span class="keyword">var</span> strMsg = <span class="string">"我是高富帅！"</span>;</span><br><span class="line"><span class="title function_">alert</span>(strMsg.<span class="property">length</span>);     <span class="comment">//显示6</span></span><br></pre></td></tr></tbody></table></figure><h5 id="④字符串的拼接"><a href="#④字符串的拼接" class="headerlink" title="④字符串的拼接"></a>④字符串的拼接</h5><ul><li>多个字符串之间可以使用 + 进行拼接，其拼接方式为 <strong>字符串 + 任何类型 = 拼接之后的新字符串</strong></li><li>拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串</li></ul><p><strong>注意</strong>：字符串 + 任何类型 =拼接之后的新字符串</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1 字符串相加</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">'hello'</span> + <span class="string">' '</span> + <span class="string">'World'</span>);  <span class="comment">//hello World</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2 数值字符串相加</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">'100'</span> + <span class="string">'100'</span>); <span class="comment">//100100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3 数值字符串+数值</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">'12'</span>+<span class="number">12</span>); <span class="comment">//1212</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4 数值+数值</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="number">12</span>+<span class="number">12</span>); <span class="comment">//24</span></span><br></pre></td></tr></tbody></table></figure><ul><li><code>+</code> 号总结口诀：数值相加，字符相连</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  age = <span class="number">18</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'我今年'</span>+age+<span class="string">'岁'</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'我今年'</span>+age+<span class="string">'岁'</span>);  <span class="comment">//引引加加，最终也是上面的形式</span></span><br></pre></td></tr></tbody></table></figure><h5 id="⑤字符串拼接加强"><a href="#⑤字符串拼接加强" class="headerlink" title="⑤字符串拼接加强"></a>⑤字符串拼接加强</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'Pink老师'</span> + <span class="number">18</span>);<span class="comment">//只要有字符就会相连</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="comment">// console.log('Pink老师age岁了');//这样不行,会输出 "Pink老师age岁了"</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'Pink老师'</span> + age); <span class="comment">// Pink老师18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'Pink老师'</span> + age + <span class="string">'岁啦'</span>);<span class="comment">// Pink老师18岁啦</span></span><br></pre></td></tr></tbody></table></figure><ul><li>我们经常会将字符串和变量来拼接，因为变量可以很方便地修改里面的值</li><li>变量是不能添加引号的，因为加引号的变量会变成字符串</li><li>如果变量两侧都有字符串拼接，口诀==“引引加加 ”，删掉数字==变量写加中间</li></ul><h4 id="2-4-4、布尔型Boolean"><a href="#2-4-4、布尔型Boolean" class="headerlink" title="2.4.4、布尔型Boolean"></a>2.4.4、布尔型Boolean</h4><ul><li>布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。</li><li>布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag + <span class="number">1</span>); <span class="comment">// 2 true当加法来看当1来看，flase当0来看</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2-4-5、undefined未定义"><a href="#2-4-5、undefined未定义" class="headerlink" title="2.4.5、undefined未定义"></a>2.4.5、undefined未定义</h4><ul><li>一个<strong>声明后没有被赋值</strong>的变量会有一个默认值 undefined ( 如果进行相连或者相加时，注意结果）</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果一个变量声明未赋值，就是undefined 未定义数据类型</span></span><br><span class="line"><span class="keyword">var</span> str;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);<span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> variable = <span class="literal">undefined</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(variable + <span class="string">'Pink'</span>); <span class="comment">//undefinedPink</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(variable + <span class="number">18</span>); <span class="comment">//NaN </span></span><br></pre></td></tr></tbody></table></figure><ol><li>undefined 和 字符串 相加，会拼接字符串</li><li>undefined 和 数字相加，最后结果是<strong>NaN</strong></li></ol><h4 id="2-4-6、空值null"><a href="#2-4-6、空值null" class="headerlink" title="2.4.6、空值null"></a>2.4.6、空值null</h4><ul><li>一个声明变量给 null 值，里面存的值为空</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> space = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(space + <span class="string">'pink'</span>); <span class="comment">//nullpink</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">llog</span>(space + <span class="number">1</span>); <span class="comment">// 1 </span></span><br></pre></td></tr></tbody></table></figure><h4 id="2-4-7、typeof"><a href="#2-4-7、typeof" class="headerlink" title="2.4.7、typeof"></a>2.4.7、typeof</h4><ul><li>typeof 可用来获取检测变量的数据类型</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">18</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num) <span class="comment">// 结果 number  </span></span><br></pre></td></tr></tbody></table></figure><p>不同类型的返回值</p><table><thead><tr><th>类型</th><th>例</th><th>结果</th></tr></thead><tbody><tr><td>string</td><td>typeof “小白”</td><td>“string”</td></tr><tr><td>number</td><td>typeof 18</td><td>“number”</td></tr><tr><td>boolean</td><td>typeof true</td><td>“boolean”</td></tr><tr><td>undefined</td><td>typeof undefined</td><td>“undefined”</td></tr><tr><td>null</td><td>typeof null</td><td>“object”</td></tr></tbody></table><h4 id="2-4-8、字面量"><a href="#2-4-8、字面量" class="headerlink" title="2.4.8、字面量"></a>2.4.8、字面量</h4><p>字面量是在源代码中一个固定值的表示法，通俗来说，就是字面量表示如何表达这个值。</p><ul><li>数字字面量：8，9，10</li><li>字符串字面量：‘大前端’，‘后端’</li><li>布尔字面量：true、false</li></ul><p>通过控制台的颜色判断属于哪种数据类型</p><table><thead><tr><th>黑色</th><th>字符串</th></tr></thead><tbody><tr><td>蓝色</td><td>数值</td></tr><tr><td>灰色</td><td>undefined 和 null</td></tr></tbody></table><h3 id="2-5、数据类型转换"><a href="#2-5、数据类型转换" class="headerlink" title="2.5、数据类型转换"></a>2.5、数据类型转换</h3><p>使用表单、prompt 获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算，而需要转换变量的数据类型。通俗来说，<strong>就是把一种数据类型的变量转换成另外一种数据类型</strong>。</p><p>我们通常会实现3种方式的转换：</p><ul><li>转换为字符串类型</li><li>转换为数字型</li><li>转换为布尔型</li></ul><h5 id="①转换为字符串型"><a href="#①转换为字符串型" class="headerlink" title="①转换为字符串型"></a>①转换为字符串型</h5><table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>toString()</td><td>转成字符串</td><td>var num = 1; alert(num.toString());</td></tr><tr><td>String()强制转换</td><td>转成字符串</td><td>var num = 1; alert(String(num));</td></tr><tr><td><strong>加号拼接字符串</strong></td><td>和字符串拼接的结果都是字符串</td><td>var num =1; alert(num+“我是字符串”);</td></tr></tbody></table><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.把数字型转换为字符串型 toString()  变量.toString()</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> str = num.<span class="title function_">toString</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.强制转换</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(num));</span><br></pre></td></tr></tbody></table></figure><ul><li>toString() 和 String() 使用方式不一样</li><li>三种转换方式，我们更喜欢用第三种加号拼接字符串转换方式，这一方式也称为隐士转换</li></ul><h5 id="②转换为数字型"><a href="#②转换为数字型" class="headerlink" title="②转换为数字型"></a>②转换为数字型</h5><table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td><strong>parselnt(string)函数</strong></td><td>将string类型转成整数数值型</td><td>parselnt(‘78’)</td></tr><tr><td><strong>parseFloat(string)函数</strong></td><td>将string类型转成浮点数数值型</td><td>parseFloat(‘78.21’)</td></tr><tr><td>Number()强制转换函数</td><td>将string类型转换为数值型</td><td>Number(‘12’)</td></tr><tr><td>js 隐式转换(- * /)</td><td>利用算术运算隐式转换为数值型</td><td>‘12’-0</td></tr></tbody></table><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.parseInt()</span></span><br><span class="line"><span class="keyword">var</span> age =<span class="title function_">prompt</span>(<span class="string">'请输入您的年龄'</span>);</span><br><span class="line">consolo.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(age));  <span class="comment">//数字型18</span></span><br><span class="line">consolo.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">'3.14'</span>));  <span class="comment">//3取整</span></span><br><span class="line">consolo.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">'3.94'</span>));  <span class="comment">//3,不会四舍五入</span></span><br><span class="line">consolo.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">'120px'</span>));  <span class="comment">//120,会去掉单位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.parseFloat()</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">'3.14'</span>));  <span class="comment">//3.14</span></span><br><span class="line">consolo.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">'120px'</span>));  <span class="comment">//120,会去掉单位</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.利用Number(变量)</span></span><br><span class="line"><span class="keyword">var</span> str =<span class="string">'123'</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(str));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="string">'12'</span>));   </span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.利用了算术运算 - * /   隐式转换</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'12'</span>-<span class="number">0</span>);  <span class="comment">// 12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'123'</span> - <span class="string">'120'</span>);  <span class="comment">//3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'123'</span> * <span class="number">1</span>);  <span class="comment">// 123</span></span><br></pre></td></tr></tbody></table></figure><ol><li>注意 parseInt 和 parseFloat ，这两个是重点</li><li>隐式转换是我们在进行算数运算的时候，JS自动转换了数据类型</li></ol><h5 id="③转换为布尔型"><a href="#③转换为布尔型" class="headerlink" title="③转换为布尔型"></a>③转换为布尔型</h5><table><thead><tr><th>方法</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>Boolean()函数</td><td>其他类型转成布尔值</td><td>Boolean(‘true’);</td></tr></tbody></table><ul><li>代表空，否定的值会被转换为false，如 ’ ’ , 0, NaN , null , undefined</li><li>其余的值都会被被转换为true</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="string">''</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="number">0</span>));  <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="title class_">NaN</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="literal">null</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="literal">undefined</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="string">'小白'</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="number">12</span>));   <span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-6、运算符"><a href="#2-6、运算符" class="headerlink" title="2.6、运算符"></a>2.6、运算符</h3><p>运算符（operator）也被称为<strong>操作符</strong>，是用于实现赋值、比较和执行算数运算等功能的符号</p><p>JavaScript 中常用的运算符有：</p><ul><li>算数运算符</li><li>递增和递减运算符</li><li>比较运算符</li><li>逻辑运算符</li><li>赋值运算符</li></ul><h4 id="2-6-1、算术运算符"><a href="#2-6-1、算术运算符" class="headerlink" title="2.6.1、算术运算符"></a>2.6.1、算术运算符</h4><p>概念：算术运算使用的符号，用于执行两个变量或值的算术运算。</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>10 + 20 =30</td></tr><tr><td>-</td><td>减</td><td>10 - 20 =-10</td></tr><tr><td>*</td><td>乘</td><td>10 * 20 =200</td></tr><tr><td>/</td><td>除</td><td>10 / 20 =0.5</td></tr><tr><td>%</td><td>取余数（取模）</td><td>返回出发的余数 9 % 2 =1</td></tr></tbody></table><h4 id="2-6-2、浮点数的精度问题"><a href="#2-6-2、浮点数的精度问题" class="headerlink" title="2.6.2、浮点数的精度问题"></a>2.6.2、浮点数的精度问题</h4><p>浮点数值的最高精度是17位小数，但在进行算数计算时其精确度远远不如整数</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">0.1</span> +<span class="number">0.2</span>; <span class="comment">//结果不是0.3，0.30000000000000004</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.07</span> * <span class="number">100</span>); <span class="comment">//结果不是7，而是7.000000000000001</span></span><br></pre></td></tr></tbody></table></figure><p><strong>所以不要直接判断两个浮点数是否相等</strong></p><h4 id="2-6-3、递增和递减运算符"><a href="#2-6-3、递增和递减运算符" class="headerlink" title="2.6.3、递增和递减运算符"></a>2.6.3、递增和递减运算符</h4><p>递增（++）</p><p>递减（- -）</p><p>放在变量前面时，我们称为前置递增(递减)运算符</p><p>放在变量后面时，我们称为后置递增(递减)运算符</p><p>注意：递增和递减运算符必须和变量配合使用。</p><h5 id="①前置递增运算符"><a href="#①前置递增运算符" class="headerlink" title="①前置递增运算符"></a>①前置递增运算符</h5><p>++num num = num + 1</p><p>使用口诀:先自加，后返回值</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">alert</span> (++num + <span class="number">10</span>); <span class="comment">// 21</span></span><br></pre></td></tr></tbody></table></figure><p>先自加 10+1=11，返回11，此时num=11</p><h5 id="②后置递增运算符"><a href="#②后置递增运算符" class="headerlink" title="②后置递增运算符"></a>②后置递增运算符</h5><p>num ++ num = num +1</p><p>使用口诀:<strong>先返回原值，后自加</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="number">10</span> + num++); <span class="comment">// 20</span></span><br></pre></td></tr></tbody></table></figure><h5 id="③小结"><a href="#③小结" class="headerlink" title="③小结"></a>③小结</h5><ul><li>前置递增和后置递增运算符可以简化代码的编写，让变量的值 + 1 比以前写法更简单</li><li>单独使用时，运行结果相同，与其他代码联用时，执行结果会不同</li><li>开发时，大多使用后置递增/减，并且代码独占一行</li></ul><h4 id="2-6-4、比较-关系-运算符"><a href="#2-6-4、比较-关系-运算符" class="headerlink" title="2.6.4、比较(关系)运算符"></a>2.6.4、比较(关系)运算符</h4><p>比较运算符是<strong>两个数据进行比较时所使用的运算符</strong>，比较运算后，会<strong>返回一个布尔值</strong>(true / false)作为比较运算的结果。</p><table><thead><tr><th>运算符名称</th><th>说明</th><th>案例</th><th>结果</th></tr></thead><tbody><tr><td>&lt;</td><td>小于号</td><td>1 &lt; 2</td><td>true</td></tr><tr><td>&gt;</td><td>大于号</td><td>1 &gt; 2</td><td>false</td></tr><tr><td>&gt;=</td><td>大于等于号(大于或者等于)</td><td>2 &gt;= 2</td><td>true</td></tr><tr><td>&lt;=</td><td>小于等于号(小于或者等于)</td><td>3 &lt;= 2</td><td>false</td></tr><tr><td>==</td><td>判等号(会转型)</td><td>37 == 37</td><td>true</td></tr><tr><td>!=</td><td>不等号</td><td>37 != 37</td><td>false</td></tr><tr><td>=== !==</td><td>全等 要求值和数据类型都一致</td><td>37 === ‘37’</td><td>false</td></tr></tbody></table><h5 id="①-小结"><a href="#①-小结" class="headerlink" title="①===== 小结"></a>①===== 小结</h5><table><thead><tr><th>符号</th><th>作用</th><th>用法</th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>把右边给左边</td></tr><tr><td>==</td><td>判断</td><td>判断两边值是否相等(注意此时有隐士转换)</td></tr><tr><td>===</td><td>全等</td><td>判断两边的值和数据类型是否完全相同</td></tr></tbody></table><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">18</span> == <span class="string">'18'</span>);<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">18</span> === <span class="string">'18'</span>);<span class="comment">//false</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2-6-5、逻辑运算符"><a href="#2-6-5、逻辑运算符" class="headerlink" title="2.6.5、逻辑运算符"></a>2.6.5、逻辑运算符</h4><p>逻辑运算符是用来进行布尔值运算的运算符，其返回值也是布尔值</p><table><thead><tr><th>逻辑运算符</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>“逻辑与”，简称”与” and</td><td>true &amp;&amp; false</td></tr><tr><td>||</td><td>“逻辑或”，简称”或” or</td><td>true || false</td></tr><tr><td>！</td><td>“逻辑非”，简称”非” not</td><td>！true</td></tr></tbody></table><p>逻辑与：两边都是 true才返回 true，否则返回 false</p><p><img src="https://s2.loli.net/2022/06/13/kCX65HgWAY1NVv2.png" alt="image-20220613134730358"></p><p>逻辑或：两边都为 false 才返回 false，否则都为true</p><p><img src="https://s2.loli.net/2022/06/13/GfuwikcNqB4TUxE.png" alt="image-20220613134741800"></p><p>逻辑非：逻辑非（!）也叫作取反符，用来取一个布尔值相反的值，如 true 的相反值是 false</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isOk = !<span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(isOk);  <span class="comment">// false</span></span><br><span class="line"><span class="comment">//逻辑非（!）也叫作取反符，用来取一个布尔值相反的值，如 true 的相反值是 false</span></span><br></pre></td></tr></tbody></table></figure><h5 id="2-6-5-1、短路运算-逻辑中断"><a href="#2-6-5-1、短路运算-逻辑中断" class="headerlink" title="2.6.5.1、短路运算(逻辑中断)"></a>2.6.5.1、短路运算(逻辑中断)</h5><p>短路运算的原理：当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值</p><p><strong>①逻辑与</strong></p><ul><li><p>语法：表达式1 &amp;&amp; 表达式2</p></li><li><p>如果第一个表达式的值为真，则返回表达式2</p></li><li><p>如果第一个表达式的值为假，则返回表达式1</p></li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> &amp;&amp; <span class="number">456</span>);   <span class="comment">//456</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> &amp;&amp; <span class="number">456</span>);     <span class="comment">//0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> &amp;&amp; <span class="number">456</span> &amp;&amp; <span class="number">789</span>);  <span class="comment">//789</span></span><br></pre></td></tr></tbody></table></figure><p><strong>②逻辑或</strong></p><ul><li>语法：表达式1 || 表达式2</li><li>如果第一个表达式的值为真，则返回表达式1</li><li>如果第一个表达式的值为假，则返回表达式2</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> || <span class="number">456</span>); <span class="comment">//123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> || <span class="number">456</span>);   <span class="comment">//456</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> || <span class="number">456</span> || <span class="number">789</span>);  <span class="comment">//123</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> || num++);</span><br><span class="line"><span class="comment">// 先返回在加，相当于 (123 || 0)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);    <span class="comment">// 123</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2-6-6、赋值运算符"><a href="#2-6-6、赋值运算符" class="headerlink" title="2.6.6、赋值运算符"></a>2.6.6、赋值运算符</h4><p>概念：用来把数据赋值给变量的运算符。</p><table><thead><tr><th>赋值运算符</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>=</td><td>直接赋值</td><td>var usrName = ‘我是值’</td></tr><tr><td>+= ，-=</td><td>加，减一个数后再赋值</td><td>var age = 10； age+=5；//15</td></tr><tr><td>*=，/=，%=</td><td>成，除，取模后再赋值</td><td>var age = 2; age*=5; //10</td></tr></tbody></table><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line">age += <span class="number">5</span>;  <span class="comment">// 相当于 age = age + 5;</span></span><br><span class="line">age -= <span class="number">5</span>;  <span class="comment">// 相当于 age = age - 5;</span></span><br><span class="line">age *= <span class="number">10</span>; <span class="comment">// 相当于 age = age * 10;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2-6-7、运算符优先级"><a href="#2-6-7、运算符优先级" class="headerlink" title="2.6.7、运算符优先级"></a>2.6.7、运算符优先级</h4><table><thead><tr><th>优先级</th><th>运算符</th><th>顺序</th></tr></thead><tbody><tr><td>1</td><td>小括号</td><td>()</td></tr><tr><td>2</td><td>一元运算符</td><td>++ – ！</td></tr><tr><td>3</td><td>算数运算符</td><td><strong>先 * / 后 + -</strong></td></tr><tr><td>4</td><td>关系运算符</td><td><strong>&gt;, &gt;= , &lt; , &lt;=</strong>,</td></tr><tr><td>5</td><td>相等运算符</td><td>，！=，=，！==</td></tr><tr><td>6</td><td>逻辑运算符</td><td><strong>先 &amp;&amp; 后 ||（先与后或）</strong></td></tr><tr><td>7</td><td>赋值运算符</td><td>=</td></tr><tr><td>8</td><td>逗号运算符</td><td>，</td></tr></tbody></table><ol><li>一元运算符里面的<strong>逻辑非</strong>优先级很高</li><li><strong>逻辑与</strong> 比 <strong>逻辑或</strong> 优先级高</li></ol><h3 id="2-7、流程控制"><a href="#2-7、流程控制" class="headerlink" title="2.7、流程控制"></a>2.7、流程控制</h3><p>流程控制主要有三种结构，分别是顺序结构、分支结构和循环结构，这三种结构代表三种代码执行的顺序</p><h4 id="2-7-1、分支结构"><a href="#2-7-1、分支结构" class="headerlink" title="2.7.1、分支结构"></a>2.7.1、分支结构</h4><p>JS 语言提供了两种分支结构语句：<strong>JS 语句</strong> <strong>switch语句</strong></p><h5 id="①if语句"><a href="#①if语句" class="headerlink" title="①if语句"></a>①if语句</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件成立执行代码，否则什么也不做</span></span><br><span class="line"><span class="keyword">if</span> (条件表达式) {</span><br><span class="line">    <span class="comment">//条件成立执行的代码语句</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>案例：进入网吧</p><p>弹出一个输入框，要求用户输入年龄，如果年龄大于等于 18 岁，允许进网吧</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> usrAge = <span class="title function_">prompt</span>(<span class="string">'请输入您的年龄:'</span>);</span><br><span class="line"><span class="keyword">if</span>(usrAge &gt;= <span class="number">18</span>)</span><br><span class="line">{</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">'您的年龄合法，欢迎来到老子网吧享受学习的乐趣！'</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="②if-else-语句"><a href="#②if-else-语句" class="headerlink" title="②if else 语句"></a>②if else 语句</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件成立，执行if里面代码，否则执行else里面的代码</span></span><br><span class="line"><span class="keyword">if</span>(条件表达式)</span><br><span class="line">{</span><br><span class="line">    <span class="comment">//[如果]条件成立执行的代码</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//[否则]执行的代码</span></span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h5 id="③if-else-if-语句"><a href="#③if-else-if-语句" class="headerlink" title="③if else if 语句"></a>③if else if 语句</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">  语句<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(条件表达式<span class="number">2</span>)</span><br><span class="line">{</span><br><span class="line">   语句<span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(条件表达式<span class="number">3</span>)</span><br><span class="line">{</span><br><span class="line">  语句<span class="number">3</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">   <span class="comment">//上述条件都不成立执行此处代码</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="2-7-2、三元表达式"><a href="#2-7-2、三元表达式" class="headerlink" title="2.7.2、三元表达式"></a>2.7.2、三元表达式</h4><ul><li>语法结构 : 表达式1 ? 表达式2 : 表达式3</li><li>执行思路</li></ul><p>如果表达式1为true，则返回表达式2的值,如果表达式1为false，则返回表达式3的值</p><p>如果表达式1为true，则返回表达式2的值,如果表达式1为false，则返回表达式3的值</p><p><strong>案例：数字补0</strong></p><p>用户输入数字，如果数字小于10，则在前面补0，比如01，09，</p><p>如果数字大于10，则不需要补，比如20</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> figuer = <span class="title function_">prompt</span>(<span class="string">'请输入0~59之间的一个数字'</span>);</span><br><span class="line">        <span class="keyword">var</span> result = figuer &lt; <span class="number">10</span> ? <span class="string">'0'</span> + figuer : figue</span><br><span class="line">        <span class="title function_">alert</span>(result);</span><br></pre></td></tr></tbody></table></figure><h4 id="2-7-3、switch"><a href="#2-7-3、switch" class="headerlink" title="2.7.3、switch"></a>2.7.3、switch</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式){</span><br><span class="line">  <span class="keyword">case</span> <span class="attr">value1</span>:</span><br><span class="line">     <span class="comment">//表达式等于 value1 时要执行的代码</span></span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="attr">value2</span>:</span><br><span class="line">     <span class="comment">//表达式等于value2 时要执行的代码</span></span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">     <span class="comment">//表达式不等于任何一个value时要执行的代码</span></span><br><span class="line">        </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>switch ：开关 转换 ， case ：小例子 选项</li><li>关键字 switch 后面括号内可以是表达式或值， 通常是一个变量</li><li>关键字 case , 后跟一个选项的表达式或值，后面跟一个冒号</li><li>switch 表达式的值会与结构中的 case 的值做比较</li><li>如果存在匹配全等(===) ，则与该 case 关联的代码块会被执行，并在遇到 break 时停止，整个 switch 语句代码执行结束</li><li>如果所有的 case 的值都和表达式的值不匹配，则执行 default 里的代码</li><li>执行case 里面的语句时，如果没有break，则继续执行下一个case里面的语句</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户在弹出框里面输入一个水果，如果有就弹出该水果的价格， 如果没有该水果就弹出“没有此水果”</span></span><br><span class="line">        <span class="keyword">var</span> fruit = <span class="title function_">prompt</span>(<span class="string">'请您输入查询的苹果'</span>);</span><br><span class="line">        <span class="keyword">switch</span> (fruit) {</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'苹果'</span>:</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">'苹果的价格为3.5元/千克'</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'香蕉'</span>:</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">'香蕉的价格为3元/千克'</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">'没有这种水果'</span>);</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><h2 id="3、断点调试"><a href="#3、断点调试" class="headerlink" title="3、断点调试"></a>3、断点调试</h2><ol><li><p>浏览器中按 F12–&gt; sources –&gt;找到需要调试的文件–&gt;在程序的某一行设置断点(在行数点一下)</p></li><li><p>刷新浏览器</p></li><li><p>Watch: 监视，通过watch可以监视变量的值的变化，非常的常用</p></li><li><p>F11: 程序单步执行，让程序一行一行的执行，这个时候，观察watch中变量的值的变化</p></li></ol><h2 id="4、循环"><a href="#4、循环" class="headerlink" title="4、循环"></a>4、循环</h2><h3 id="4-1、for循环"><a href="#4-1、for循环" class="headerlink" title="4.1、for循环"></a>4.1、for循环</h3><p>在程序中，一组被重复执行的语句被称之为<strong>循环体</strong>，能否继续重复执行，取决于循环的<strong>终止条件</strong>。由循环体及循环的终止条件组成的语句，被称之为<strong>循环语句</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化变量;条件表达式;操作表达式)</span><br><span class="line">{</span><br><span class="line">   <span class="comment">//循环体</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>1.输入10句晚安</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本写法</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i&lt;=<span class="number">10</span>; i++  )</span><br><span class="line">    {</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'娘子晚安哈'</span>);</span><br><span class="line">    }</span><br><span class="line"><span class="comment">// 用户输入次数</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="title function_">prompt</span>(<span class="string">'请输入次数:'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i&lt;= num ;i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'娘子晚安哈'</span>);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p><strong>2.求1-100之间所有整数的累加和</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求1-100所以的整数和</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) {</span><br><span class="line">    <span class="keyword">var</span> sum = sum + i;</span><br><span class="line">}</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br></pre></td></tr></tbody></table></figure><h3 id="4-3、while循环"><a href="#4-3、while循环" class="headerlink" title="4.3、while循环"></a>4.3、while循环</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件表达式){</span><br><span class="line">  <span class="comment">//循环体代码</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>执行思路：</p><ul><li><p>先执行条件表达式，如果结果为 true，则执行循环体代码；如果为 false，则退出循环，执行后面代码</p></li><li><p>执行循环体代码</p></li><li><p>循环体代码执行完毕后，程序会继续判断执行条件表达式，如条件仍为true，则会继续执行循环体，直到循环条件为 false 时，整个循环过程才会结束</p></li></ul><p><strong>注意</strong>：</p><ul><li>使用 while 循环时一定要注意，它必须要有退出条件，否则会称为死循环</li><li>while 循环和 for 循环的不同之处在于 while 循环可以做较为复杂的条件判断，比如判断用户名和密码</li></ul><p><strong>1.打印人的一生</strong></p><p>从1岁到99岁</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (age &lt;= <span class="number">100</span>) {</span><br><span class="line">    age++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'您今年'</span> + age + <span class="string">'岁了'</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>2.计算 1 ~ 100 之间所有整数的和</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> figure = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (figure &lt;= <span class="number">100</span>) {</span><br><span class="line">            sum += figure;</span><br><span class="line">            figure++;</span><br><span class="line">        }</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'1-100的整数和为'</span> + sum);</span><br></pre></td></tr></tbody></table></figure><h3 id="4-4、do-while循环"><a href="#4-4、do-while循环" class="headerlink" title="4.4、do while循环"></a>4.4、do while循环</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> {</span><br><span class="line">  <span class="comment">//循环体代码-条件表达式为true的时候重复执行循环一代码</span></span><br><span class="line">}<span class="keyword">while</span>(条件表达式);</span><br></pre></td></tr></tbody></table></figure><p>执行思路：</p><ol><li><p>先执行一次循环体代码</p></li><li><p>再执行表达式，如果结果为true，则继续执行循环体代码，如果为false，则退出循环，继续执行后面的代码</p></li><li><p>先执行再判断循环体，所以dowhile循环语句至少会执行一次循环体代码</p></li></ol><p>需求：弹出一个提示框， 你爱我吗？ 如果输入我爱你，就提示结束，否则，一直询问</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> {</span><br><span class="line"><span class="keyword">var</span> love = <span class="title function_">prompt</span>(<span class="string">'你爱我吗？'</span>);</span><br><span class="line">} <span class="keyword">while</span> (love != <span class="string">'我爱你'</span>);</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">'登录成功'</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="4-5、continue-关键字"><a href="#4-5、continue-关键字" class="headerlink" title="4.5、continue 关键字"></a>4.5、continue 关键字</h3><p>continue 关键字用于<strong>立即跳出本次循环，继续下一次循环</strong>（本次循环体中 continue 之后的代码就会少执行一次）。</p><h3 id="4-6、break-关键字"><a href="#4-6、break-关键字" class="headerlink" title="4.6、break 关键字"></a>4.6、break 关键字</h3><p>break 关键字用于<strong>立即跳出整个循环</strong></p><h2 id="5、数组"><a href="#5、数组" class="headerlink" title="5、数组"></a>5、数组</h2><p>数组(Array)是指一组数据的集合，其中的每个数据被称作元素，在数组中可以存放任意类型的元素。数组是一种将一组数据存储在单个变量名下的优雅方式。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通变量一次只能存储一个值</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//数组一次可以存储多个值</span></span><br><span class="line"><span class="keyword">var</span> arr =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br></pre></td></tr></tbody></table></figure><h3 id="5-1、创建数组"><a href="#5-1、创建数组" class="headerlink" title="5.1、创建数组"></a>5.1、创建数组</h3><p>JavaScript 中创建数组有两种方式：</p><ul><li>利用 new 创建数组</li><li>利用数组字面量创建数组</li></ul><h5 id="①利用-new-创建数组"><a href="#①利用-new-创建数组" class="headerlink" title="①利用 new 创建数组"></a>①利用 new 创建数组</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 数组名 = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(); <span class="comment">//创建一个新的空数组</span></span><br></pre></td></tr></tbody></table></figure><ul><li>这种方式暂且了解，等学完对象再看</li><li>注意 <code>Array()</code>，A要大写</li></ul><h5 id="②利用数组字面量创建数组"><a href="#②利用数组字面量创建数组" class="headerlink" title="②利用数组字面量创建数组"></a>②利用数组字面量创建数组</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.利用数组字面量方式创建空的数组 </span></span><br><span class="line"><span class="keyword">var</span> 数组名 =[];</span><br><span class="line"><span class="comment">// 2.使用数组字面量方式创建带初始值的数组</span></span><br><span class="line"><span class="keyword">var</span> 数组名 =[<span class="string">'小白'</span>,<span class="string">'小黑'</span>,<span class="string">'小黄'</span>,<span class="string">'瑞奇'</span>];</span><br><span class="line"><span class="comment">// 3.数组中可以存放任意类型的数据，例如字符串，数字，布尔值等</span></span><br><span class="line"><span class="keyword">var</span> arrStus =[<span class="string">'小白'</span>，<span class="number">12</span>,<span class="literal">true</span>,<span class="number">28.9</span>];</span><br></pre></td></tr></tbody></table></figure><ul><li>数组的字面量是方括号 <code>[]</code></li><li>声明数组并赋值称为数组的初始化</li><li>这种字面量方式也是我们以后最多使用的方式</li></ul><h3 id="5-2、数组的索引（下标）"><a href="#5-2、数组的索引（下标）" class="headerlink" title="5.2、数组的索引（下标）"></a>5.2、数组的索引（下标）</h3><p>索引 (下标) ：用来访问数组元素的序号（数组下标从 0 开始）</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义数组</span></span><br><span class="line"><span class="keyword">var</span> arrStus = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">//获取数组中的第2个元素</span></span><br><span class="line"><span class="title function_">alert</span>(arrStus[<span class="number">1</span>]);</span><br></pre></td></tr></tbody></table></figure><h3 id="5-3遍历数组"><a href="#5-3遍历数组" class="headerlink" title="5.3遍历数组"></a>5.3遍历数组</h3><p>我们可以通过 for 循环索引遍历数组中的每一项</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组索引访问数组中的元素</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'red'</span>,<span class="string">'green'</span>, <span class="string">'blue'</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>]) <span class="comment">// red</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">1</span>]) <span class="comment">// green</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">2</span>]) <span class="comment">// blue</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for循环遍历数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'red'</span>,<span class="string">'green'</span>, <span class="string">'blue'</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++){</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arrStus[i]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5-4、数组的长度"><a href="#5-4、数组的长度" class="headerlink" title="5.4、数组的长度"></a>5.4、数组的长度</h3><p>使用“数组名.length”可以访问数组元素的数量（数组长度）</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrStus = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="title function_">alert</span>(arrStus.<span class="property">length</span>);  <span class="comment">// 3</span></span><br></pre></td></tr></tbody></table></figure><p><strong>注意</strong>：</p><ul><li>此处数组的长度是<strong>数组元素的个数</strong> ，不要和<strong>数组的索引号</strong>混淆</li><li>当我们数组里面的元素个数发生了变化，这个 length 属性跟着一起变化</li></ul><h4 id="5-5、案例"><a href="#5-5、案例" class="headerlink" title="5.5、案例"></a>5.5、案例</h4><p><strong>1.请将 [“关羽”,“张飞”,“马超”,“赵云”,“黄忠”,“刘备”,“姜维”]; 数组里的元素依次打印到控制台</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"关羽"</span>,<span class="string">"张飞"</span>,<span class="string">"马超"</span>,<span class="string">"赵云"</span>,<span class="string">"黄忠"</span>,<span class="string">"刘备"</span>,<span class="string">"姜维"</span>]; </span><br><span class="line"><span class="comment">// 遍历  从第一个到最后一个</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++ )  { </span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>( arr[i] );</span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure><h3 id="5-6、数组中新增元素"><a href="#5-6、数组中新增元素" class="headerlink" title="5.6、数组中新增元素"></a>5.6、数组中新增元素</h3><h5 id="①通过修改-length-长度新增数组元素"><a href="#①通过修改-length-长度新增数组元素" class="headerlink" title="①通过修改 length 长度新增数组元素"></a>①通过修改 length 长度新增数组元素</h5><ul><li>可以通过修改 length 长度来实现数组扩容的目的</li><li>length 属性是可读写的</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>, <span class="string">'pink'</span>];</span><br><span class="line">arr.<span class="property">length</span> = <span class="number">7</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">4</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">5</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">6</span>]);</span><br></pre></td></tr></tbody></table></figure><p>其中索引号是 4，5，6 的空间没有给值，就是声明变量未给值，默认值就是 <strong>undefined</strong></p><h5 id="②通过修改数组索引新增数组元素"><a href="#②通过修改数组索引新增数组元素" class="headerlink" title="②通过修改数组索引新增数组元素"></a>②通过修改数组索引新增数组元素</h5><ul><li>可以通过修改数组索引的方式追加数组元素</li><li>不能直接给数组名赋值，否则会覆盖掉以前的数据</li><li>这种方式也是我们最常用的一种方式</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>, <span class="string">'pink'</span>];</span><br><span class="line">arr[<span class="number">4</span>] = <span class="string">'hotpink'</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></tbody></table></figure><h3 id="5-7、数组中新增元素"><a href="#5-7、数组中新增元素" class="headerlink" title="5.7、数组中新增元素"></a>5.7、数组中新增元素</h3><p><strong>1.新建一个数组，里面存放10个整数（ 1~10）， 要求使用循环追加的方式输出： [1,2,3,4,5,6,7,8,9,10]</strong></p><ol><li>使用循环来追加数组。</li><li>声明一个空数组 arr。</li><li>循环中的计数器 i 可以作为数组元素存入。</li></ol><p>由于数组的索引号是从0开始的， 因此计数器从 0 开始更合适，存入的数组元素要+1。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++){</span><br><span class="line">    arr[i] = i + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></tbody></table></figure><p><strong>2.将数组 [2, 0, 6, 1, 77, 0, 52, 0, 25, 7] 中大于等于 10 的元素选出来，放入新数组</strong></p><ol><li>声明一个新的数组用于存放新数据。</li><li>遍历原来的数组，找出大于等于 10 的元素。</li><li>依次追加给新数组 newArr。</li></ol><p>实现代码1：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">77</span>, <span class="number">0</span>, <span class="number">52</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="comment">// 定义一个变量 用来计算 新数组的索引号</span></span><br><span class="line"><span class="keyword">var</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) {</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt;= <span class="number">10</span>) {</span><br><span class="line">        <span class="comment">// 给新数组</span></span><br><span class="line">        newArr[j] = arr[i];</span><br><span class="line">        <span class="comment">// 索引号 不断自加</span></span><br><span class="line">        j++;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span><br></pre></td></tr></tbody></table></figure><p>实现代码2：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">77</span>, <span class="number">0</span>, <span class="number">52</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) {</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt;= <span class="number">10</span>) {</span><br><span class="line">        <span class="comment">// 给新数组</span></span><br><span class="line">        newArr[newArr.<span class="property">length</span>] = arr[i];</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span><br></pre></td></tr></tbody></table></figure><h3 id="5-8、删除指定数组元素"><a href="#5-8、删除指定数组元素" class="headerlink" title="5.8、删除指定数组元素"></a>5.8、删除指定数组元素</h3><p><strong>将数组[2, 0, 6, 1, 77, 0, 52, 0, 25, 7]中的 0 去掉后，形成一个不包含 0 的新数组。</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">77</span>, <span class="number">0</span>, <span class="number">52</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];   <span class="comment">// 空数组的默认的长度为 0 </span></span><br><span class="line"><span class="comment">// 定义一个变量 i 用来计算新数组的索引号</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) {</span><br><span class="line">    <span class="comment">// 找出大于 10 的数</span></span><br><span class="line">    <span class="keyword">if</span> (arr[i] != <span class="number">0</span>) {</span><br><span class="line">        <span class="comment">// 给新数组</span></span><br><span class="line">        <span class="comment">// 每次存入一个值，newArr长度都会 +1  </span></span><br><span class="line">        newArr[newArr.<span class="property">length</span>] = arr[i];</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span><br></pre></td></tr></tbody></table></figure><h3 id="5-9、翻转数组"><a href="#5-9、翻转数组" class="headerlink" title="5.9、翻转数组"></a>5.9、翻转数组</h3><p><strong>将数组 [‘red’, ‘green’, ‘blue’, ‘pink’, ‘purple’] 的内容反过来存放</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把旧数组索引号的第4个取过来(arr.length - 1),给新数组索引号第0个元素(newArr.length)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'blue'</span>,<span class="string">'pink'</span>,<span class="string">'purple'</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = arr.<span class="property">length</span> -<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--){</span><br><span class="line">    newArr[newArr.<span class="property">length</span>] = arr[i];</span><br><span class="line">}</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span><br></pre></td></tr></tbody></table></figure><h3 id="5-10、数组排序"><a href="#5-10、数组排序" class="headerlink" title="5.10、数组排序"></a>5.10、数组排序</h3><p>冒泡排序</p><p>将数组 [5, 4, 3, 2, 1]中的元素按照从小到大的顺序排序，输出： 1，2，3，4，5</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>-<span class="number">1</span>; i++){ <span class="comment">//外层循环管趟数，5个数共交换4躺</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt;= arr.<span class="property">length</span> - i - <span class="number">1</span>; j++){</span><br><span class="line">        <span class="comment">//里层循环管每一趟交换的次数</span></span><br><span class="line">        <span class="comment">//前一个和后面一个数组元素相比较</span></span><br><span class="line">        <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>]){</span><br><span class="line">            <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">            arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">            arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">        }  </span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selenium IDE</title>
      <link href="/liangjunyi.github.io/2022/06/09/python-selenium-ide/"/>
      <url>/liangjunyi.github.io/2022/06/09/python-selenium-ide/</url>
      
        <content type="html"><![CDATA[<h1 id="Selenium-IDE"><a href="#Selenium-IDE" class="headerlink" title="Selenium IDE"></a>Selenium IDE</h1><h2 id="1-Video"><a href="#1-Video" class="headerlink" title="1. Video"></a>1. Video</h2><p><img src="https://s2.loli.net/2022/06/10/v2bTi7tPIOFBNLW.gif" alt="1.auto_test"></p><h2 id="2-Description"><a href="#2-Description" class="headerlink" title="2. Description"></a>2. Description</h2><ul><li>Using a localhost web project as testing target, this project implement by Django frame.</li><li>This web request user write a table and submit.</li><li>This project connect to the local MySQL database to store the info.</li><li>Using Selenium IDE to do the auto testing.<ul><li>Login test<ul><li>positive</li><li>negative<ul><li>not give username</li></ul></li></ul></li><li>Write table test<ul><li>positive</li><li>negative<ul><li>not give order name</li></ul></li></ul></li></ul></li></ul><blockquote><p>Because for auto testing, temporarily close the verify-code part.  </p></blockquote><h2 id="3-Selenium-IDE"><a href="#3-Selenium-IDE" class="headerlink" title="3. Selenium IDE"></a>3. Selenium IDE</h2><p><img src="https://s2.loli.net/2022/06/10/TlL6Dbj7hWKG9Qv.png" alt="image-20220610141405101"></p><p><img src="https://s2.loli.net/2022/06/10/1YNlpySdxAavne9.png" alt="image-20220610141415639"></p><h2 id="4-Python-code"><a href="#4-Python-code" class="headerlink" title="4. Python code"></a>4. Python code</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Generated by Selenium IDE</span></span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.desired_capabilities <span class="keyword">import</span> DesiredCapabilities</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestTableFillpositive</span>():</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">setup_method</span>(<span class="params">self, method</span>):</span><br><span class="line">    <span class="variable language_">self</span>.driver = webdriver.Firefox()</span><br><span class="line">    <span class="variable language_">self</span>.<span class="built_in">vars</span> = {}</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">teardown_method</span>(<span class="params">self, method</span>):</span><br><span class="line">    <span class="variable language_">self</span>.driver.quit()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">test_tableFillpositive</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="variable language_">self</span>.driver.get(<span class="string">"http://127.0.0.1:8001/login/"</span>)</span><br><span class="line">    <span class="variable language_">self</span>.driver.find_element(By.ID, <span class="string">"LAY-user-login-username"</span>).click()</span><br><span class="line">    <span class="variable language_">self</span>.driver.find_element(By.ID, <span class="string">"LAY-user-login-username"</span>).send_keys(<span class="string">"admin"</span>)</span><br><span class="line">    <span class="variable language_">self</span>.driver.find_element(By.ID, <span class="string">"LAY-user-login-password"</span>).click()</span><br><span class="line">    <span class="variable language_">self</span>.driver.find_element(By.ID, <span class="string">"LAY-user-login-password"</span>).send_keys(<span class="string">"123456"</span>)</span><br><span class="line">    <span class="variable language_">self</span>.driver.find_element(By.ID, <span class="string">"LAY-user-login-vercode"</span>).click()</span><br><span class="line">    <span class="variable language_">self</span>.driver.find_element(By.ID, <span class="string">"LAY-user-login-vercode"</span>).send_keys(<span class="string">"0644"</span>)</span><br><span class="line">    <span class="variable language_">self</span>.driver.find_element(By.ID, <span class="string">"loginButton"</span>).click()</span><br><span class="line">    WebDriverWait(<span class="variable language_">self</span>.driver, <span class="number">30</span>).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, <span class="string">".layui-logo"</span>)))</span><br><span class="line">    <span class="variable language_">self</span>.driver.find_element(By.LINK_TEXT, <span class="string">"需求管理"</span>).click()</span><br><span class="line">    <span class="variable language_">self</span>.driver.find_element(By.LINK_TEXT, <span class="string">"需求申请"</span>).click()</span><br><span class="line">    <span class="variable language_">self</span>.driver.switch_to.frame(<span class="number">0</span>)</span><br><span class="line">    <span class="variable language_">self</span>.driver.find_element(By.CSS_SELECTOR, <span class="string">".layui-select-title &gt; .layui-input"</span>).click()</span><br><span class="line">    <span class="variable language_">self</span>.driver.find_element(By.CSS_SELECTOR, <span class="string">"dd:nth-child(2)"</span>).click()</span><br><span class="line">    <span class="variable language_">self</span>.driver.find_element(By.ID, <span class="string">"order_date"</span>).click()</span><br><span class="line">    <span class="variable language_">self</span>.driver.find_element(By.CSS_SELECTOR, <span class="string">"tr:nth-child(2) &gt; td:nth-child(7)"</span>).click()</span><br><span class="line">    <span class="variable language_">self</span>.driver.find_element(By.ID, <span class="string">"order_name"</span>).click()</span><br><span class="line">    <span class="variable language_">self</span>.driver.find_element(By.ID, <span class="string">"order_name"</span>).send_keys(<span class="string">"name"</span>)</span><br><span class="line">    <span class="variable language_">self</span>.driver.find_element(By.ID, <span class="string">"order_sys"</span>).click()</span><br><span class="line">    <span class="variable language_">self</span>.driver.find_element(By.ID, <span class="string">"order_sys"</span>).send_keys(<span class="string">"system"</span>)</span><br><span class="line">    <span class="variable language_">self</span>.driver.find_element(By.CSS_SELECTOR, <span class="string">".layui-unselect:nth-child(4) &gt; .layui-anim"</span>).click()</span><br><span class="line">    <span class="variable language_">self</span>.driver.find_element(By.ID, <span class="string">"order_desc"</span>).click()</span><br><span class="line">    <span class="variable language_">self</span>.driver.find_element(By.ID, <span class="string">"order_desc"</span>).send_keys(<span class="string">"request"</span>)</span><br><span class="line">    <span class="variable language_">self</span>.driver.find_element(By.ID, <span class="string">"submitBtn"</span>).click()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Selenium </tag>
            
            <tag> Python test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2 SAT Problem</title>
      <link href="/liangjunyi.github.io/2022/06/07/project-2-sat-problem/"/>
      <url>/liangjunyi.github.io/2022/06/07/project-2-sat-problem/</url>
      
        <content type="html"><![CDATA[<h1 id="2-SAT-Problem"><a href="#2-SAT-Problem" class="headerlink" title="2 SAT Problem"></a>2 SAT Problem</h1><h2 id="1-What-is-SAT-Problem"><a href="#1-What-is-SAT-Problem" class="headerlink" title="1. What is SAT Problem"></a>1. What is SAT Problem</h2><p>Boolean Satisfiability or simply <strong>SAT</strong> is the problem of determining if a Boolean formula is satisfiable or unsatisfiable. </p><ul><li><strong>Satisfiable :</strong> If the Boolean variables can be assigned values such that the formula turns out to be TRUE, then we say that the formula is satisfiable.</li><li><strong>Unsatisfiable :</strong> If it is not possible to assign such values, then we say that the formula is unsatisfiable.</li></ul><p>Examples:</p><ul><li>$F=A\land \bar{B}$  is satisfiable, because A = TRUE and B = FALSE makes F = TRUE.</li><li>$F = A \land \bar{A}$ is unsatisfiable, because <ul><li>if A = True, $\bar{A}$ = False,  they and together, F = False</li><li>if A = False, $\bar{A}$ = True,  they and together, F = False</li></ul></li></ul><p>Symbol explanation: </p><ul><li>A is one term, it can be True or False</li><li>$\bar{A}$ is not A, it is opposite to A’s Boolean value</li><li>$\land$ is and gate</li><li>$\lor$ is or gate</li></ul><h2 id="2-What-is-Conjunctive-Normal-Form-CNF"><a href="#2-What-is-Conjunctive-Normal-Form-CNF" class="headerlink" title="2. What is Conjunctive Normal Form (CNF)"></a>2. What is Conjunctive Normal Form (CNF)</h2><p>To understand Problem of 2-Satisfiability better, first let us see what is Conjunctive Normal Form (CNF) </p><p><strong>CNF :</strong> CNF is a conjunction (AND) of clauses, where every clause is a disjunction (OR).</p><p>Example:<br>$$<br>F= (A_1 \lor B_1 \lor C_1 \lor …) \land (A_2 \lor B_2\lor C_2 \lor …) \land (A_3 \lor B_3\lor C_3 \lor …) \land …… \land (A_m \lor B_m\lor C_m \lor …)<br>$$</p><h2 id="3-What-is-2-SAT-problem"><a href="#3-What-is-2-SAT-problem" class="headerlink" title="3. What is 2-SAT problem"></a>3. What is 2-SAT problem</h2><p>Thus, Problem of 2-Satisfiability can be stated as:<br><strong>Given CNF with each clause having only 2 terms, is it possible to assign such values to the variables so that the CNF is TRUE?</strong></p><p>Example:</p><ul><li><p>$$<br>F= (x_1 \lor x_2 ) \land (x_2 \lor \bar{x}_1) \land (\bar{x}_1 \lor \bar{x}_2)<br>$$</p><p>The given expression is satisfiable. </p><p>for x1 = FALSE, x2 = TRUE</p></li><li><p>$$<br>F= (x_1 \lor x_2 ) \land (x_2 \lor \bar{x}_1)\land (x_1 \lor \bar{x}_2) \land (\bar{x}_1 \lor \bar{x}_2)<br>$$</p><p>The given expression is unsatisfiable.</p><p>for all possible combinations of x1 and x2</p></li></ul><h2 id="4-How-to-solve-the-2-SAT-problem4"><a href="#4-How-to-solve-the-2-SAT-problem4" class="headerlink" title="4. How to solve the 2-SAT problem4"></a>4. How to solve the 2-SAT problem4</h2><h3 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare:"></a>Prepare:</h3><p>For the CNF value to come TRUE, value of every clause should be TRUE.</p><p>Let one of the clause be ($A\lor B$) = True</p><ul><li>if A=0, B must be 1, ($\bar{A} \Rightarrow B  $)</li><li>if B=0, A must be 1, ($\bar{B} \Rightarrow A  $)</li></ul><p>Then we create an Implication Graph which has 2 edges for every clause of the CNF.</p><p>($A\lor B$) expressed in Graph as $edge(\bar{A} \Rightarrow B  )$ , $edge(\bar{B} \Rightarrow A  )$</p><p>So for a Boolean formula with <code>m</code> clauses, we have 2 edges for every clause in Graph. So <code>2m</code> edges in total.</p><h3 id="Case"><a href="#Case" class="headerlink" title="Case:"></a>Case:</h3><blockquote><p>Case 1: If $edge(X\rightarrow \bar{X})$ exists in the graph</p><p>It means if X=True, $\bar{X}$ = True</p><p>But if X = False, can not decide $\bar{X}$</p></blockquote><blockquote><p>Case 2: If $edge(\bar{X}\rightarrow X)$ exists in the graph</p><p>It means if $\bar{X}$ =True, X = True</p><p>But if $\bar{X}$ = False, can not decide X</p></blockquote><blockquote><p>Case 3: If $edge(\bar{X}\rightarrow X) \space and \space edge(X\rightarrow \bar{X})$ exists in the graph at same time</p><p>One edge requires X to be TRUE and the other one requires X to be FALSE.</p><p>Thus, there is no possible assignment in such a case.</p></blockquote><p><strong>CONCLUSION:</strong> If any two variables $X$ and $\bar{X}$ are on a cycle i.e. $edge(\bar{X}\rightarrow X) \space and \space edge(X\rightarrow \bar{X})$  both exists, then the CNF is unsatisfiable. Otherwise, there is a possible assignment and the CNF is satisfiable. </p><p><strong>CONCLUSION FROM IMPLEMENTATION POINT OF VIEW:</strong><br>If both $X$ and $\bar{X}$ lie in the same SCC (Strongly Connected Component), the CNF is unsatisfiable. </p><h3 id="Strongly-Connected-Component"><a href="#Strongly-Connected-Component" class="headerlink" title="Strongly Connected Component:"></a>Strongly Connected Component:</h3><p>A Strongly Connected Component of a directed graph has nodes such that every node can be reach from every another node in that SCC. </p><p>3 SCCs here</p><p><img src="https://s2.loli.net/2022/06/07/moijtTV9zuYg4fD.png" alt="image-20220607145236240"></p><h2 id="5-Code-for-solve-2-SAT-problem-implement-by-Python"><a href="#5-Code-for-solve-2-SAT-problem-implement-by-Python" class="headerlink" title="5. Code for solve 2-SAT problem implement by Python"></a>5. Code for solve 2-SAT problem implement by Python</h2><h3 id="Total-code"><a href="#Total-code" class="headerlink" title="Total code"></a>Total code</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">test_data = [ ]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'2satBIG.cnf'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        test_data.append(line.strip())  <span class="comment"># 把末尾的'\n'删掉</span></span><br><span class="line"></span><br><span class="line">A = []</span><br><span class="line">B = []</span><br><span class="line">n = <span class="number">0</span></span><br><span class="line">m = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> rec <span class="keyword">in</span> test_data:</span><br><span class="line">    rec=rec.strip()</span><br><span class="line">    junk_list = []</span><br><span class="line">    substrs = rec.split()</span><br><span class="line">    <span class="keyword">if</span> substrs[<span class="number">0</span>] == <span class="string">'p'</span> <span class="keyword">and</span>  substrs[<span class="number">1</span>] == <span class="string">'cnf'</span>:</span><br><span class="line">        n=<span class="built_in">int</span>(substrs[<span class="number">2</span>])</span><br><span class="line">        m=<span class="built_in">int</span>(substrs[<span class="number">3</span>])</span><br><span class="line">    <span class="comment">## record has to start with a number or a minus sign</span></span><br><span class="line">    <span class="keyword">if</span> (rec[<span class="number">0</span>].isdigit()) <span class="keyword">or</span> (rec[<span class="number">0</span>].startswith(<span class="string">"-"</span>)):</span><br><span class="line">        substrs = rec.split()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(substrs) == <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(substrs)):</span><br><span class="line">                    num_int = <span class="built_in">int</span>(substrs[num])</span><br><span class="line">                    <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">                        A.append(num_int)</span><br><span class="line">                    <span class="keyword">elif</span> num ==<span class="number">1</span>:</span><br><span class="line">                        B.append(num_int)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">len</span>(substrs) == <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(substrs)):</span><br><span class="line">                    num_int = <span class="built_in">int</span>(substrs[num])</span><br><span class="line">                    <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">                        A.append(num_int)</span><br><span class="line">                        B.append(num_int)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"error converting"</span>, rec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MAX = <span class="number">1000000</span></span><br><span class="line"></span><br><span class="line">adj = []</span><br><span class="line">adjInv = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, MAX + <span class="number">1</span>):</span><br><span class="line">    adj.append([])</span><br><span class="line">    adjInv.append([])</span><br><span class="line">visited = [<span class="literal">False</span>] * MAX</span><br><span class="line">visitedInv = [<span class="literal">False</span>] * MAX</span><br><span class="line">s = []</span><br><span class="line"></span><br><span class="line">scc = [<span class="number">0</span>] * MAX</span><br><span class="line"></span><br><span class="line">count = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_edge</span>(<span class="params">a, b</span>):</span><br><span class="line">    adj[a].append(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_edge_inv</span>(<span class="params">a, b</span>):</span><br><span class="line">    adjInv[b].append(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs_first</span>(<span class="params">u</span>):</span><br><span class="line">    <span class="keyword">if</span> visited[u]:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    visited[u] = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(adj[u])):</span><br><span class="line">        dfs_first(adj[u][i])</span><br><span class="line">    s.append(u)</span><br><span class="line">    <span class="comment"># print("stack: " + str(s))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs_second</span>(<span class="params">u</span>):</span><br><span class="line">    <span class="keyword">if</span> visitedInv[u]:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    visitedInv[u] = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(adjInv[u])):</span><br><span class="line">        dfs_second(adjInv[u][i])</span><br><span class="line">    scc[u] = count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_2_sat</span>(<span class="params">n, m, a, b</span>):</span><br><span class="line">    <span class="keyword">global</span> count</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, m):</span><br><span class="line">        <span class="keyword">if</span> a[i] &gt; <span class="number">0</span> <span class="keyword">and</span> b[i] &gt; <span class="number">0</span>:</span><br><span class="line">            add_edge(a[i] + n, b[i])</span><br><span class="line">            add_edge_inv(a[i] + n, b[i])</span><br><span class="line">            add_edge(b[i] + n, a[i])</span><br><span class="line">            add_edge_inv(b[i] + n, a[i])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> a[i] &gt; <span class="number">0</span> &gt; b[i]:</span><br><span class="line">            add_edge(a[i] + n, n - b[i])</span><br><span class="line">            add_edge_inv(a[i] + n, n - b[i])</span><br><span class="line">            add_edge(-b[i], a[i])</span><br><span class="line">            add_edge_inv(-b[i], a[i])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> a[i] &lt; <span class="number">0</span> &lt; b[i]:</span><br><span class="line">            add_edge(-a[i], b[i])</span><br><span class="line">            add_edge_inv(-a[i], b[i])</span><br><span class="line">            add_edge(b[i] + n, n - a[i])</span><br><span class="line">            add_edge_inv(b[i] + n, n - a[i])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            add_edge(-a[i], n - b[i])</span><br><span class="line">            add_edge_inv(-a[i], n - b[i])</span><br><span class="line">            add_edge(-b[i], n - a[i])</span><br><span class="line">            add_edge_inv(-b[i], n - a[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">2</span> * n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> visited[i]:</span><br><span class="line">            dfs_first(i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(s) != <span class="number">0</span>:</span><br><span class="line">        top = s.pop()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> visitedInv[top]:</span><br><span class="line">            dfs_second(top)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># print("scc: " + str(scc[0:20]))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> scc[i] == scc[i + n]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"The given expression is unsatisfiable"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"The given expression is satisfiable"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> scc[i] &gt; scc[i + n]:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">            <span class="comment"># print("x" + str(i) + ": True")</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">            <span class="comment"># print("x" + str(i) + ": False")</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="comment"># for i in range(100):</span></span><br><span class="line">    is_2_sat(n, m, A, B)</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(end-start)</span><br></pre></td></tr></tbody></table></figure><h3 id="Part-1-read-CNF-file"><a href="#Part-1-read-CNF-file" class="headerlink" title="Part 1, read CNF file"></a>Part 1, read CNF file</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">test_data = [ ]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'2satBIG.cnf'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        test_data.append(line.strip())  <span class="comment"># 把末尾的'\n'删掉</span></span><br><span class="line"></span><br><span class="line">A = []</span><br><span class="line">B = []</span><br><span class="line">n = <span class="number">0</span></span><br><span class="line">m = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> rec <span class="keyword">in</span> test_data:</span><br><span class="line">    rec=rec.strip()</span><br><span class="line">    junk_list = []</span><br><span class="line">    substrs = rec.split()</span><br><span class="line">    <span class="keyword">if</span> substrs[<span class="number">0</span>] == <span class="string">'p'</span> <span class="keyword">and</span>  substrs[<span class="number">1</span>] == <span class="string">'cnf'</span>:</span><br><span class="line">        n=<span class="built_in">int</span>(substrs[<span class="number">2</span>])</span><br><span class="line">        m=<span class="built_in">int</span>(substrs[<span class="number">3</span>])</span><br><span class="line">    <span class="comment">## record has to start with a number or a minus sign</span></span><br><span class="line">    <span class="keyword">if</span> (rec[<span class="number">0</span>].isdigit()) <span class="keyword">or</span> (rec[<span class="number">0</span>].startswith(<span class="string">"-"</span>)):</span><br><span class="line">        substrs = rec.split()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(substrs) == <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(substrs)):</span><br><span class="line">                    num_int = <span class="built_in">int</span>(substrs[num])</span><br><span class="line">                    <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">                        A.append(num_int)</span><br><span class="line">                    <span class="keyword">elif</span> num ==<span class="number">1</span>:</span><br><span class="line">                        B.append(num_int)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">len</span>(substrs) == <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(substrs)):</span><br><span class="line">                    num_int = <span class="built_in">int</span>(substrs[num])</span><br><span class="line">                    <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">                        A.append(num_int)</span><br><span class="line">                        B.append(num_int)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"error converting"</span>, rec)</span><br></pre></td></tr></tbody></table></figure><h3 id="Part-2-check-2-SAT-Problem"><a href="#Part-2-check-2-SAT-Problem" class="headerlink" title="Part 2, check 2 SAT-Problem"></a>Part 2, check 2 SAT-Problem</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">MAX = <span class="number">1000000</span></span><br><span class="line"></span><br><span class="line">adj = []</span><br><span class="line">adjInv = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, MAX + <span class="number">1</span>):</span><br><span class="line">    adj.append([])</span><br><span class="line">    adjInv.append([])</span><br><span class="line">visited = [<span class="literal">False</span>] * MAX</span><br><span class="line">visitedInv = [<span class="literal">False</span>] * MAX</span><br><span class="line">s = []</span><br><span class="line"></span><br><span class="line">scc = [<span class="number">0</span>] * MAX</span><br><span class="line"></span><br><span class="line">count = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_edge</span>(<span class="params">a, b</span>):</span><br><span class="line">    adj[a].append(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_edge_inv</span>(<span class="params">a, b</span>):</span><br><span class="line">    adjInv[b].append(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs_first</span>(<span class="params">u</span>):</span><br><span class="line">    <span class="keyword">if</span> visited[u]:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    visited[u] = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(adj[u])):</span><br><span class="line">        dfs_first(adj[u][i])</span><br><span class="line">    s.append(u)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs_second</span>(<span class="params">u</span>):</span><br><span class="line">    <span class="keyword">if</span> visitedInv[u]:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    visitedInv[u] = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(adjInv[u])):</span><br><span class="line">        dfs_second(adjInv[u][i])</span><br><span class="line">    scc[u] = count</span><br><span class="line"></span><br><span class="line"><span class="comment"># m number of clauses</span></span><br><span class="line"><span class="comment"># n number of terms</span></span><br><span class="line"><span class="comment"># A all terms in first position</span></span><br><span class="line"><span class="comment"># B all terms in second position</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_2_sat</span>(<span class="params">n, m, a, b</span>):</span><br><span class="line">    <span class="keyword">global</span> count</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, m):</span><br><span class="line">        <span class="keyword">if</span> a[i] &gt; <span class="number">0</span> <span class="keyword">and</span> b[i] &gt; <span class="number">0</span>:</span><br><span class="line">            add_edge(a[i] + n, b[i])</span><br><span class="line">            add_edge_inv(a[i] + n, b[i])</span><br><span class="line">            add_edge(b[i] + n, a[i])</span><br><span class="line">            add_edge_inv(b[i] + n, a[i])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> a[i] &gt; <span class="number">0</span> &gt; b[i]:</span><br><span class="line">            add_edge(a[i] + n, n - b[i])</span><br><span class="line">            add_edge_inv(a[i] + n, n - b[i])</span><br><span class="line">            add_edge(-b[i], a[i])</span><br><span class="line">            add_edge_inv(-b[i], a[i])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> a[i] &lt; <span class="number">0</span> &lt; b[i]:</span><br><span class="line">            add_edge(-a[i], b[i])</span><br><span class="line">            add_edge_inv(-a[i], b[i])</span><br><span class="line">            add_edge(b[i] + n, n - a[i])</span><br><span class="line">            add_edge_inv(b[i] + n, n - a[i])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            add_edge(-a[i], n - b[i])</span><br><span class="line">            add_edge_inv(-a[i], n - b[i])</span><br><span class="line">            add_edge(-b[i], n - a[i])</span><br><span class="line">            add_edge_inv(-b[i], n - a[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">2</span> * n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> visited[i]:</span><br><span class="line">            dfs_first(i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(s) != <span class="number">0</span>:</span><br><span class="line">        top = s.pop()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> visitedInv[top]:</span><br><span class="line">            dfs_second(top)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> scc[i] == scc[i + n]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"The given expression is unsatisfiable"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"The given expression is satisfiable"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="comment"># for i in range(100):</span></span><br><span class="line">    is_2_sat(n, m, A, B)</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(end-start)</span><br></pre></td></tr></tbody></table></figure><h2 id="6-Explanation-for-Algo"><a href="#6-Explanation-for-Algo" class="headerlink" title="6. Explanation for Algo"></a>6. Explanation for Algo</h2><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1:"></a>Step 1:</h3><p>The after reading the CNF file it will return us four parameters</p><ul><li>m number of clauses</li><li>n number of terms</li><li>A all terms in first position</li><li>B all terms in second position</li></ul><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2:"></a>Step 2:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scc = [<span class="number">0</span>] * MAX</span><br></pre></td></tr></tbody></table></figure><p>This is used for checking the SCC problem. </p><p>Store the count number in the corresponding position in SCC.</p><h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3:"></a>Step 3:</h3><p>Based on the  input terms’ sign, we will decide how we set up the edges.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, m):</span><br><span class="line">        <span class="keyword">if</span> a[i] &gt; <span class="number">0</span> <span class="keyword">and</span> b[i] &gt; <span class="number">0</span>:</span><br><span class="line">            add_edge(a[i] + n, b[i])</span><br><span class="line">            add_edge_inv(a[i] + n, b[i])</span><br><span class="line">            add_edge(b[i] + n, a[i])</span><br><span class="line">            add_edge_inv(b[i] + n, a[i])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> a[i] &gt; <span class="number">0</span> &gt; b[i]:</span><br><span class="line">            add_edge(a[i] + n, n - b[i])</span><br><span class="line">            add_edge_inv(a[i] + n, n - b[i])</span><br><span class="line">            add_edge(-b[i], a[i])</span><br><span class="line">            add_edge_inv(-b[i], a[i])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> a[i] &lt; <span class="number">0</span> &lt; b[i]:</span><br><span class="line">            add_edge(-a[i], b[i])</span><br><span class="line">            add_edge_inv(-a[i], b[i])</span><br><span class="line">            add_edge(b[i] + n, n - a[i])</span><br><span class="line">            add_edge_inv(b[i] + n, n - a[i])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            add_edge(-a[i], n - b[i])</span><br><span class="line">            add_edge_inv(-a[i], n - b[i])</span><br><span class="line">            add_edge(-b[i], n - a[i])</span><br><span class="line">            add_edge_inv(-b[i], n - a[i])</span><br></pre></td></tr></tbody></table></figure><h3 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4:"></a>Step 4:</h3><p>execute the DFS</p><p>changing the count number</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">2</span> * n + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> visited[i]:</span><br><span class="line">        dfs_first(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(s) != <span class="number">0</span>:</span><br><span class="line">    top = s.pop()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> visitedInv[top]:</span><br><span class="line">        dfs_second(top)</span><br><span class="line">        count += <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5:"></a>Step 5:</h3><p>Whether there is both $X$ and $\bar{X}$ lie in the same SCC condition. Return results.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> scc[i] == scc[i + n]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"The given expression is unsatisfiable"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"The given expression is satisfiable"</span>)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Python </tag>
            
            <tag> Kosaraju&#39;s Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sticky Navbar (ex2)</title>
      <link href="/liangjunyi.github.io/2022/06/05/web-learning-sticky-navbar/"/>
      <url>/liangjunyi.github.io/2022/06/05/web-learning-sticky-navbar/</url>
      
        <content type="html"><![CDATA[<h1 id="Sticky-Navbar"><a href="#Sticky-Navbar" class="headerlink" title="Sticky Navbar"></a>Sticky Navbar</h1><h2 id="1-Video"><a href="#1-Video" class="headerlink" title="1. Video"></a>1. Video</h2><p><a href="https://drive.google.com/file/d/1udxQCogiUYxmwONM1GPULOXHVp1ZxJbo/view?usp=sharing">https://drive.google.com/file/d/1udxQCogiUYxmwONM1GPULOXHVp1ZxJbo/view?usp=sharing</a></p><p><img src="https://s2.loli.net/2022/06/05/u1dnQNpDwZU5Fhc.gif" alt="2"></p><h2 id="2-HTML"><a href="#2-HTML" class="headerlink" title="2. HTML"></a>2. HTML</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sticky Navigation<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://liangjunyi-010.github.io/liangjunyi.github.io/"</span>&gt;</span>My Website<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"current"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Services<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hero"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome To My Website<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Maiores, consequuntur?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"container content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Content One<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Ratione dolorem voluptates eveniet tempora ut</span><br><span class="line">            cupiditate magnam, sapiente, hic quo in ipsum iste soluta eaque perferendis nihil recusandae dolore officia</span><br><span class="line">            aperiam corporis similique. Facilis quos tempore labore totam! Consectetur molestiae iusto ducimus error</span><br><span class="line">            reiciendis aspernatur dolor, modi dolorem sit architecto, voluptate magni sunt unde est quas? Voluptates a</span><br><span class="line">            dolorum voluptatum quo perferendis aut sit. Aspernatur libero laboriosam ab eligendi omnis delectus earum</span><br><span class="line">            labore, placeat officiis sint illum rem voluptas ipsum repellendus iste eius recusandae quae excepturi</span><br><span class="line">            facere, iure rerum sequi? Illum velit delectus dicta et iste dolorum obcaecati minus odio eligendi!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Content Two<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Pariatur provident nostrum possimus inventore nisi</span><br><span class="line">            laboriosam consequatur modi nulla eos, commodi, omnis distinctio! Maxime distinctio impedit provident,</span><br><span class="line">            voluptates illo odio nostrum minima beatae similique a sint sapiente voluptatum atque optio illum est!</span><br><span class="line">            Tenetur tempora doloremque quae iste aperiam hic cumque repellat?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"script.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="3-CSS"><a href="#3-CSS" class="headerlink" title="3. CSS"></a>3. CSS</h2><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">'https://fonts.googleapis.com/css?family=Open+Sans'</span>);</span><br><span class="line"></span><br><span class="line">* {</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> {</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Open Sans'</span>, sans-serif;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#222</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">50px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> {</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> {</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#222</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease-in-out;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-class">.container</span> {</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease-in-out;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">ul</span> {</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">list-style-type</span>: none;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">a</span> {</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">7px</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease-in-out;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span><span class="selector-class">.active</span> {</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span><span class="selector-class">.active</span> <span class="selector-tag">a</span> {</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span><span class="selector-class">.active</span> <span class="selector-class">.container</span> {</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">a</span><span class="selector-class">.current</span>,</span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> {</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#c0392b</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hero</span> {</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'https://images.pexels.com/photos/450035/pexels-photo-450035.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=2&amp;h=750&amp;w=1260'</span>);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">background-position</span>: bottom center;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hero</span><span class="selector-pseudo">::before</span> {</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hero</span> <span class="selector-tag">h1</span> {</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">46px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">20px</span> <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hero</span> <span class="selector-tag">p</span> {</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">1px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-tag">h3</span> {</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">150%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-tag">p</span> {</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">1.2px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="4-JavaScript"><a href="#4-JavaScript" class="headerlink" title="4. JavaScript"></a>4. JavaScript</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nav = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">'.nav'</span>)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">'scroll'</span>, fixNav)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fixNav</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">scrollY</span> &gt; nav.<span class="property">offsetHeight</span> + <span class="number">150</span>) {</span><br><span class="line">        nav.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">'active'</span>)</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        nav.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">'active'</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="5-src"><a href="#5-src" class="headerlink" title="5.src"></a>5.src</h2><p><img src="https://s2.loli.net/2022/06/05/foITOqg63HRSE2v.png" alt="image-20220605193739219"></p>]]></content>
      
      
      <categories>
          
          <category> Web develop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Login page (ex1)</title>
      <link href="/liangjunyi.github.io/2022/06/05/web-learning-login-page/"/>
      <url>/liangjunyi.github.io/2022/06/05/web-learning-login-page/</url>
      
        <content type="html"><![CDATA[<h1 id="Login-page-Form-Wave"><a href="#Login-page-Form-Wave" class="headerlink" title="Login page (Form Wave)"></a>Login page (Form Wave)</h1><h2 id="1-Video"><a href="#1-Video" class="headerlink" title="1. Video"></a>1. Video</h2><p><a href="https://drive.google.com/file/d/1pNgJOeD_Qrjh6UCKGMM6Go3iPvI1ThI9/view?usp=sharing">https://drive.google.com/file/d/1pNgJOeD_Qrjh6UCKGMM6Go3iPvI1ThI9/view?usp=sharing</a></p><p><img src="https://s2.loli.net/2022/06/05/aJWr3PObi9Zoctw.gif" alt="ezgif.com-gif-maker"></p><h2 id="2-HTML"><a href="#2-HTML" class="headerlink" title="2. HTML"></a>2. HTML</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>Please Login<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>Don't have an account? <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"script.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="3-CSS"><a href="#3-CSS" class="headerlink" title="3. CSS"></a>3. CSS</h2><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">'https://fonts.googleapis.com/css?family=Muli&amp;display=swap'</span>);</span><br><span class="line"></span><br><span class="line">* {</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> {</span><br><span class="line">    <span class="comment">/* background-color: steelblue; */</span></span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"src/hotels.jpg"</span>);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="comment">/* color: #fff; */</span></span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Muli'</span>, sans-serif;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">background-position</span>: bottom center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> {</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.4</span>);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">h1</span> {</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">a</span> {</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: lightblue;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span> {</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: lightblue;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: inherit;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:focus</span> {</span><br><span class="line">    <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:active</span> {</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.98</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text</span> {</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-control</span> {</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span> <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-control</span> <span class="selector-tag">input</span> {</span><br><span class="line"></span><br><span class="line">    <span class="attribute">background-color</span>: transparent;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">2px</span> <span class="number">#fff</span> solid;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-control</span> <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>,</span><br><span class="line"><span class="selector-class">.form-control</span> <span class="selector-tag">input</span><span class="selector-pseudo">:valid</span> {</span><br><span class="line">    <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-bottom-color</span>: lightblue;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-control</span> <span class="selector-tag">label</span> {</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">pointer-events</span>: none;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-control</span> <span class="selector-tag">label</span> <span class="selector-tag">span</span> {</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0.3s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.68</span>, -<span class="number">0.55</span>, <span class="number">0.265</span>, <span class="number">1.55</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-control</span> <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>+<span class="selector-tag">label</span> <span class="selector-tag">span</span>,</span><br><span class="line"><span class="selector-class">.form-control</span> <span class="selector-tag">input</span><span class="selector-pseudo">:valid</span>+<span class="selector-tag">label</span> <span class="selector-tag">span</span> {</span><br><span class="line">    <span class="attribute">color</span>: lightblue;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">30px</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="4-JavaScript"><a href="#4-JavaScript" class="headerlink" title="4. JavaScript"></a>4. JavaScript</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> labels = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">'.form-control label'</span>)</span><br><span class="line"></span><br><span class="line">labels.<span class="title function_">forEach</span>(<span class="function"><span class="params">label</span> =&gt;</span> {</span><br><span class="line">    label.<span class="property">innerHTML</span> = label.<span class="property">innerText</span></span><br><span class="line">        .<span class="title function_">split</span>(<span class="string">''</span>)</span><br><span class="line">        .<span class="title function_">map</span>(<span class="function">(<span class="params">letter, idx</span>) =&gt;</span> <span class="string">`&lt;span style="transition-delay:<span class="subst">${idx * <span class="number">50</span>}</span>ms"&gt;<span class="subst">${letter}</span>&lt;/span&gt;`</span>)</span><br><span class="line">        .<span class="title function_">join</span>(<span class="string">''</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="5-src"><a href="#5-src" class="headerlink" title="5.src"></a>5.src</h2><p><img src="https://s2.loli.net/2022/06/05/QilRXKj8NgeuSLE.png" alt="image-20220605183939453"></p>]]></content>
      
      
      <categories>
          
          <category> Web develop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Implement msg</title>
      <link href="/liangjunyi.github.io/2022/05/31/ros-learning-implement-msg/"/>
      <url>/liangjunyi.github.io/2022/05/31/ros-learning-implement-msg/</url>
      
        <content type="html"><![CDATA[<h1 id="Implement-Publisher"><a href="#Implement-Publisher" class="headerlink" title="Implement Publisher"></a>Implement Publisher</h1><h2 id="1-code-part"><a href="#1-code-part" class="headerlink" title="1. code part"></a>1. code part</h2><h3 id="1-msg"><a href="#1-msg" class="headerlink" title="(1) msg"></a>(1) msg</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">string name</span><br><span class="line">uint8  sex</span><br><span class="line">uint8  age</span><br><span class="line"></span><br><span class="line">uint8 unknown = 0</span><br><span class="line">uint8 male    = 1</span><br><span class="line">uint8 female  = 2 </span><br></pre></td></tr></tbody></table></figure><h3 id="2-python"><a href="#2-python" class="headerlink" title="(2) python"></a>(2) python</h3><p>person_publisher.py</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"><span class="comment">####          Copyright 2020 GuYueHome (www.guyuehome.com).          ###</span></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 该例程将发布/person_info话题，自定义消息类型learning_topic::Person</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> learning_topic.msg <span class="keyword">import</span> Person</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">velocity_publisher</span>():</span><br><span class="line"><span class="comment"># ROS节点初始化</span></span><br><span class="line">rospy.init_node(<span class="string">'person_publisher'</span>, anonymous=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 创建一个Publisher，发布名为/person_info的topic，消息类型为learning_topic::Person，队列长度10</span></span><br><span class="line">person_info_pub = rospy.Publisher(<span class="string">'/person_info'</span>, Person, queue_size=<span class="number">10</span>)</span><br><span class="line"><span class="comment">#设置循环的频率</span></span><br><span class="line">rate = rospy.Rate(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line"><span class="comment"># 初始化learning_topic::Person类型的消息</span></span><br><span class="line">person_msg = Person()</span><br><span class="line">person_msg.name = <span class="string">"Tom"</span></span><br><span class="line">person_msg.age  = <span class="number">18</span></span><br><span class="line">person_msg.sex  = Person.male</span><br><span class="line">    <span class="comment"># 发布消息</span></span><br><span class="line">person_info_pub.publish(person_msg)</span><br><span class="line">rospy.loginfo(<span class="string">"Publsh person message[%s, %d, %d]"</span>, </span><br><span class="line">person_msg.name, person_msg.age, person_msg.sex)</span><br><span class="line"><span class="comment"># 按照循环频率延时</span></span><br><span class="line">rate.sleep()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        velocity_publisher()</span><br><span class="line">    <span class="keyword">except</span> rospy.ROSInterruptException:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>person_subscriber.py</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"><span class="comment">####          Copyright 2020 GuYueHome (www.guyuehome.com).          ###</span></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 该例程将订阅/person_info话题，自定义消息类型learning_topic::Person</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> learning_topic.msg <span class="keyword">import</span> Person</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">personInfoCallback</span>(<span class="params">msg</span>):</span><br><span class="line">    rospy.loginfo(<span class="string">"Subcribe Person Info: name:%s  age:%d  sex:%d"</span>, </span><br><span class="line"> msg.name, msg.age, msg.sex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">person_subscriber</span>():</span><br><span class="line"><span class="comment"># ROS节点初始化</span></span><br><span class="line">    rospy.init_node(<span class="string">'person_subscriber'</span>, anonymous=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个Subscriber，订阅名为/person_info的topic，注册回调函数personInfoCallback</span></span><br><span class="line">    rospy.Subscriber(<span class="string">"/person_info"</span>, Person, personInfoCallback)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环等待回调函数</span></span><br><span class="line">    rospy.spin()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    person_subscriber()</span><br></pre></td></tr></tbody></table></figure><h3 id="3-C"><a href="#3-C" class="headerlink" title="(3) C++"></a>(3) C++</h3><p>person_publisher.cpp</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment">Copyright 2020 GuYueHome (www.guyuehome.com).</span></span><br><span class="line"><span class="comment">***********************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该例程将发布/person_info话题，自定义消息类型learning_topic::Person</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"learning_topic/Person.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">// ROS节点初始化</span></span><br><span class="line">    ros::<span class="built_in">init</span>(argc, argv, <span class="string">"person_publisher"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建节点句柄</span></span><br><span class="line">    ros::NodeHandle n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个Publisher，发布名为/person_info的topic，消息类型为learning_topic::Person，队列长度10</span></span><br><span class="line">    ros::Publisher person_info_pub = n.<span class="built_in">advertise</span>&lt;learning_topic::Person&gt;(<span class="string">"/person_info"</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置循环的频率</span></span><br><span class="line">    <span class="function">ros::Rate <span class="title">loop_rate</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ros::<span class="built_in">ok</span>())</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// 初始化learning_topic::Person类型的消息</span></span><br><span class="line">    learning_topic::Person person_msg;</span><br><span class="line">person_msg.name = <span class="string">"Tom"</span>;</span><br><span class="line">person_msg.age  = <span class="number">18</span>;</span><br><span class="line">person_msg.sex  = learning_topic::Person::male;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发布消息</span></span><br><span class="line">person_info_pub.<span class="built_in">publish</span>(person_msg);</span><br><span class="line"></span><br><span class="line">       <span class="built_in">ROS_INFO</span>(<span class="string">"Publish Person Info: name:%s  age:%d  sex:%d"</span>, </span><br><span class="line">  person_msg.name.<span class="built_in">c_str</span>(), person_msg.age, person_msg.sex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按照循环频率延时</span></span><br><span class="line">        loop_rate.<span class="built_in">sleep</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>person_subscriber.cpp</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment">Copyright 2020 GuYueHome (www.guyuehome.com).</span></span><br><span class="line"><span class="comment">***********************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该例程将订阅/person_info话题，自定义消息类型learning_topic::Person</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"learning_topic/Person.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收到订阅的消息后，会进入消息回调函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">personInfoCallback</span><span class="params">(<span class="type">const</span> learning_topic::Person::ConstPtr&amp; msg)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">// 将接收到的消息打印出来</span></span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">"Subcribe Person Info: name:%s  age:%d  sex:%d"</span>, </span><br><span class="line"> msg-&gt;name.<span class="built_in">c_str</span>(), msg-&gt;age, msg-&gt;sex);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">// 初始化ROS节点</span></span><br><span class="line">    ros::<span class="built_in">init</span>(argc, argv, <span class="string">"person_subscriber"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建节点句柄</span></span><br><span class="line">    ros::NodeHandle n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个Subscriber，订阅名为/person_info的topic，注册回调函数personInfoCallback</span></span><br><span class="line">    ros::Subscriber person_info_sub = n.<span class="built_in">subscribe</span>(<span class="string">"/person_info"</span>, <span class="number">10</span>, personInfoCallback);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环等待回调函数</span></span><br><span class="line">    ros::<span class="built_in">spin</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="2-set-up-env"><a href="#2-set-up-env" class="headerlink" title="2. set up env"></a>2. set up env</h2><h3 id="1-msg-part"><a href="#1-msg-part" class="headerlink" title="(1) msg part"></a>(1) msg part</h3><ol><li><p>go to <code>package.xml</code> , add following </p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>message_generation<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>message_runtime<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>go to CMakeLists.txt, add following</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">find_package( …… message_generation)</span><br><span class="line"></span><br><span class="line">add_message_files(FILES Person.msg)</span><br><span class="line">generate_messages(DEPENDENCIES std_msgs)</span><br><span class="line"></span><br><span class="line">catkin_package(…… message_runtime)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/05/31/zNT21PX5VOJmw3S.png" alt="image-20220531151255415"></p></li></ol><p><img src="https://s2.loli.net/2022/05/31/nctWR6GZ73iFePv.png" alt="image-20220531151334444"></p><p><img src="https://s2.loli.net/2022/05/31/RTEngH5Ya3dx84c.png" alt="image-20220531151401674"></p><h3 id="2-C"><a href="#2-C" class="headerlink" title="(2) C++"></a>(2) C++</h3><p>go to the <code>CMakeLists.txt</code> file, add these two command here</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">add_executable(person_publisher src/person_publisher.cpp)</span><br><span class="line">target_link_libraries(person_publisher ${catkin_LIBRARIES})</span><br><span class="line">add_dependencies(person_publisher ${PROJECT_NAME}_generate_messages_cpp)</span><br><span class="line"></span><br><span class="line">add_executable(person_subscriber src/person_subscriber.cpp)</span><br><span class="line">target_link_libraries(person_subscriber ${catkin_LIBRARIES})</span><br><span class="line">add_dependencies(person_subscriber ${PROJECT_NAME}_generate_messages_cpp)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/05/31/4jZDsHt1p2nmTMY.png" alt="image-20220531151555739"></p>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
            <tag> ROS </tag>
            
            <tag> python </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Implement Publisher</title>
      <link href="/liangjunyi.github.io/2022/05/30/ros-learning-implement-publisher/"/>
      <url>/liangjunyi.github.io/2022/05/30/ros-learning-implement-publisher/</url>
      
        <content type="html"><![CDATA[<h1 id="Implement-Publisher"><a href="#Implement-Publisher" class="headerlink" title="Implement Publisher"></a>Implement Publisher</h1><h2 id="1-code-part"><a href="#1-code-part" class="headerlink" title="1. code part"></a>1. code part</h2><h3 id="1-python"><a href="#1-python" class="headerlink" title="(1) python"></a>(1) python</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"><span class="comment">####          Copyright 2020 GuYueHome (www.guyuehome.com).          ###</span></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 该例程将发布turtle1/cmd_vel话题，消息类型geometry_msgs::Twist</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> geometry_msgs.msg <span class="keyword">import</span> Twist</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">velocity_publisher</span>():</span><br><span class="line"><span class="comment"># ROS节点初始化</span></span><br><span class="line">    rospy.init_node(<span class="string">'velocity_publisher'</span>, anonymous=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个Publisher，发布名为/turtle1/cmd_vel的topic，消息类型为geometry_msgs::Twist，队列长度10</span></span><br><span class="line">    turtle_vel_pub = rospy.Publisher(<span class="string">'/turtle1/cmd_vel'</span>, Twist, queue_size=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置循环的频率</span></span><br><span class="line">    rate = rospy.Rate(<span class="number">10</span>) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line"><span class="comment"># 初始化geometry_msgs::Twist类型的消息</span></span><br><span class="line">        vel_msg = Twist()</span><br><span class="line">        vel_msg.linear.x = <span class="number">0.5</span></span><br><span class="line">        vel_msg.angular.z = <span class="number">0.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布消息</span></span><br><span class="line">        turtle_vel_pub.publish(vel_msg)</span><br><span class="line">        rospy.loginfo(<span class="string">"Publsh turtle velocity command[%0.2f m/s, %0.2f rad/s]"</span>, </span><br><span class="line">vel_msg.linear.x, vel_msg.angular.z)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照循环频率延时</span></span><br><span class="line">        rate.sleep()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        velocity_publisher()</span><br><span class="line">    <span class="keyword">except</span> rospy.ROSInterruptException:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="2-C"><a href="#2-C" class="headerlink" title="(2) C++"></a>(2) C++</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment">Copyright 2020 GuYueHome (www.guyuehome.com).</span></span><br><span class="line"><span class="comment">***********************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该例程将发布turtle1/cmd_vel话题，消息类型geometry_msgs::Twist</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;geometry_msgs/Twist.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">// ROS节点初始化</span></span><br><span class="line">ros::<span class="built_in">init</span>(argc, argv, <span class="string">"velocity_publisher"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建节点句柄</span></span><br><span class="line">ros::NodeHandle n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个Publisher，发布名为/turtle1/cmd_vel的topic，消息类型为geometry_msgs::Twist，队列长度10</span></span><br><span class="line">ros::Publisher turtle_vel_pub = n.<span class="built_in">advertise</span>&lt;geometry_msgs::Twist&gt;(<span class="string">"/turtle1/cmd_vel"</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置循环的频率</span></span><br><span class="line"><span class="function">ros::Rate <span class="title">loop_rate</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ros::<span class="built_in">ok</span>())</span><br><span class="line">{</span><br><span class="line">    <span class="comment">// 初始化geometry_msgs::Twist类型的消息</span></span><br><span class="line">geometry_msgs::Twist vel_msg;</span><br><span class="line">vel_msg.linear.x = <span class="number">0.5</span>;</span><br><span class="line">vel_msg.angular.z = <span class="number">0.2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发布消息</span></span><br><span class="line">turtle_vel_pub.<span class="built_in">publish</span>(vel_msg);</span><br><span class="line"><span class="built_in">ROS_INFO</span>(<span class="string">"Publsh turtle velocity command[%0.2f m/s, %0.2f rad/s]"</span>, </span><br><span class="line">vel_msg.linear.x, vel_msg.angular.z);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按照循环频率延时</span></span><br><span class="line">    loop_rate.<span class="built_in">sleep</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2-set-up-env"><a href="#2-set-up-env" class="headerlink" title="2. set up env"></a>2. set up env</h2><h3 id="1-python-1"><a href="#1-python-1" class="headerlink" title="(1) python"></a>(1) python</h3><ol><li>create a folder under your <code>&lt;package&gt;</code> named scripts, it is because distinguish between python and c++</li><li>go to the terminal</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun turtlesim turtlesim_node <span class="comment"># another terminal</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun learning_topic velocity_publisher.py</span><br></pre></td></tr></tbody></table></figure><p>we can see the turtle move</p><h3 id="2-C-1"><a href="#2-C-1" class="headerlink" title="(2) C++"></a>(2) C++</h3><ol><li><p>put the c code in the <code>&lt;package&gt;/src</code> folder </p></li><li><p>go to the <code>CMakeLists.txt</code> file, add these two command here</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add_executable(velocity_publisher src/velocity_publisher.cpp)</span><br><span class="line">target_link_libraries(velocity_publisher ${catkin_LIBRARIES})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/05/30/zuVSMOZvqUNdGeQ.png" alt="image-20220530154424496"></p></li><li><p>go to the workspace root folder and open terminal here</p></li><li><p>compile the c++ file</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catkin_make</span><br></pre></td></tr></tbody></table></figure><p>if can see <code>0%</code> to <code>100%</code> means success</p></li><li><p>then go to the terminal </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun turtlesim turtlesim_node <span class="comment"># another terminal</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun learning_topic velocity_publisher</span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
            <tag> ROS </tag>
            
            <tag> python </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Implement Subscriber</title>
      <link href="/liangjunyi.github.io/2022/05/30/ros-learning-implement-subscriber/"/>
      <url>/liangjunyi.github.io/2022/05/30/ros-learning-implement-subscriber/</url>
      
        <content type="html"><![CDATA[<h1 id="Implement-Subscriber"><a href="#Implement-Subscriber" class="headerlink" title="Implement Subscriber"></a>Implement Subscriber</h1><h2 id="1-code-part"><a href="#1-code-part" class="headerlink" title="1. code part"></a>1. code part</h2><h3 id="1-python"><a href="#1-python" class="headerlink" title="(1) python"></a>(1) python</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"><span class="comment">####          Copyright 2020 GuYueHome (www.guyuehome.com).          ###</span></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 该例程将订阅/turtle1/pose话题，消息类型turtlesim::Pose</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> turtlesim.msg <span class="keyword">import</span> Pose</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poseCallback</span>(<span class="params">msg</span>):</span><br><span class="line">    rospy.loginfo(<span class="string">"Turtle pose: x:%0.6f, y:%0.6f"</span>, msg.x, msg.y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pose_subscriber</span>():</span><br><span class="line"><span class="comment"># ROS节点初始化</span></span><br><span class="line">    rospy.init_node(<span class="string">'pose_subscriber'</span>, anonymous=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个Subscriber，订阅名为/turtle1/pose的topic，注册回调函数poseCallback</span></span><br><span class="line">    rospy.Subscriber(<span class="string">"/turtle1/pose"</span>, Pose, poseCallback)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环等待回调函数</span></span><br><span class="line">    rospy.spin()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pose_subscriber()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="2-C"><a href="#2-C" class="headerlink" title="(2)C++"></a>(2)C++</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment">Copyright 2020 GuYueHome (www.guyuehome.com).</span></span><br><span class="line"><span class="comment">***********************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该例程将订阅/turtle1/pose话题，消息类型turtlesim::Pose</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"turtlesim/Pose.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收到订阅的消息后，会进入消息回调函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">poseCallback</span><span class="params">(<span class="type">const</span> turtlesim::Pose::ConstPtr&amp; msg)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">// 将接收到的消息打印出来</span></span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">"Turtle pose: x:%0.6f, y:%0.6f"</span>, msg-&gt;x, msg-&gt;y);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">// 初始化ROS节点</span></span><br><span class="line">    ros::<span class="built_in">init</span>(argc, argv, <span class="string">"pose_subscriber"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建节点句柄</span></span><br><span class="line">    ros::NodeHandle n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个Subscriber，订阅名为/turtle1/pose的topic，注册回调函数poseCallback</span></span><br><span class="line">    ros::Subscriber pose_sub = n.<span class="built_in">subscribe</span>(<span class="string">"/turtle1/pose"</span>, <span class="number">10</span>, poseCallback);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环等待回调函数</span></span><br><span class="line">    ros::<span class="built_in">spin</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="2-set-up-env"><a href="#2-set-up-env" class="headerlink" title="2. set up env"></a>2. set up env</h2><h3 id="1-C"><a href="#1-C" class="headerlink" title="(1) C++"></a>(1) C++</h3><p>go to the <code>CMakeLists.txt</code> file, add these two command here</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add_executable(pose_subscriber src/pose_subscriber.cpp)</span><br><span class="line">target_link_libraries(pose_subscriber ${catkin_LIBRARIES})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/05/31/k8KtvOd9Mnwuxj5.png" alt="image-20220531114832930"></p>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
            <tag> ROS </tag>
            
            <tag> python </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux &amp; environment variables</title>
      <link href="/liangjunyi.github.io/2022/05/30/linux-linux-environment-variable/"/>
      <url>/liangjunyi.github.io/2022/05/30/linux-linux-environment-variable/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-environment-variables"><a href="#Linux-environment-variables" class="headerlink" title="Linux &amp; environment variables"></a>Linux &amp; environment variables</h1><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h2><ol><li><p>Linux’s environment variables stored in variable PATH, so can use <code>echo $PATH</code> to check</p></li><li><p>Linux’s environment variables separate by <code>:</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATH=<span class="variable">$PATH</span>:&lt;PATH 1&gt;:&lt;PATH 2&gt;:&lt;PATH 3&gt;:------:&lt;PATH N&gt;</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="2-searching"><a href="#2-searching" class="headerlink" title="2. searching"></a>2. searching</h2><ol><li><p>search all PATH value</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>check PATH environment variable</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>listing all set environemnt variables</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>in the home folder</p><p><code>ctrl h</code> find all Hidden files (name begin with .)</p><p>open <code>.bashrc</code> and edit</p></li><li><p>open <code>.bashrc</code> by command</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="3-adding"><a href="#3-adding" class="headerlink" title="3. adding"></a>3. adding</h2><ol><li><p><strong>temporarily adding</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NAME=VALUE</span><br></pre></td></tr></tbody></table></figure><p><strong>examples:</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/openjdk11</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/local/nginx/sbin/:<span class="variable">$PATH</span></span><br></pre></td></tr></tbody></table></figure><p><strong>adding /usr/local/nginx/sbin/ index adding to the  environment temporarily</strong></p></li><li><p>current user adding permanent</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></tbody></table></figure><p><strong>add <code>export PATH="/usr/local/nginx/sbin/:$PATH"</code> at the end of the file</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></tbody></table></figure></li><li><p>all users adding permanent</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></tbody></table></figure><p><strong>add <code>export PATH="/usr/local/nginx/sbin/:$PATH"</code> at the end of the file</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source  /etc/profile</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="4-deleting"><a href="#4-deleting" class="headerlink" title="4. deleting"></a>4. deleting</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unset</span> VARIABLE_NAME</span><br></pre></td></tr></tbody></table></figure><p><strong>examples:</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unset</span> JAVA_HOME</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS create workspace and package</title>
      <link href="/liangjunyi.github.io/2022/05/29/ros-learning-ros-create-workspace-and-package/"/>
      <url>/liangjunyi.github.io/2022/05/29/ros-learning-ros-create-workspace-and-package/</url>
      
        <content type="html"><![CDATA[<h1 id="ROS-create-workspace-and-package"><a href="#ROS-create-workspace-and-package" class="headerlink" title="ROS create workspace and package"></a>ROS create workspace and package</h1><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h2><p>workspace is a folder, containing relative files and folder</p><ul><li>src: Source Space</li><li>build: Build Space</li><li>devel: Development Space</li><li>install: Install Space</li></ul><p><strong>example</strong></p><p><img src="https://s2.loli.net/2022/05/29/JnCedVgN71iQmYS.png" alt="image-20220529201346535"></p><h2 id="2-create-workspace"><a href="#2-create-workspace" class="headerlink" title="2. create workspace"></a>2. create workspace</h2><p><strong>create workspace</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/catkin_ws/src</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catkin_init_workspace</span><br></pre></td></tr></tbody></table></figure><p><strong>compile the workspace</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/ <span class="comment"># go back to the workspace root</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catkin_make</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catkin_make install</span><br></pre></td></tr></tbody></table></figure><p><strong>setup the environment variable</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> devel/setup.bash</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$ROS_PACKAGE_PATH</span> <span class="comment"># check environemnt variable</span></span><br></pre></td></tr></tbody></table></figure><h2 id="3-create-package"><a href="#3-create-package" class="headerlink" title="3. create package"></a>3. create package</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src <span class="comment"># go to src folder under your root folder</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catkin_create_pkg &lt;package_name&gt; [depend1] [depend2] [depend3]</span><br></pre></td></tr></tbody></table></figure><p><strong>example</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catkin_create_pkg test_pkg roscpp rospy std_msgs</span><br></pre></td></tr></tbody></table></figure><p><strong>compile the package</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws <span class="comment"># go back to root folder again</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/catkin_ws/devel/sessssstup.bash</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS tools in Linux by command line</title>
      <link href="/liangjunyi.github.io/2022/05/29/ros-learning-the-usage-of-ros-tools/"/>
      <url>/liangjunyi.github.io/2022/05/29/ros-learning-the-usage-of-ros-tools/</url>
      
        <content type="html"><![CDATA[<h1 id="ROS-tools-in-Linux"><a href="#ROS-tools-in-Linux" class="headerlink" title="ROS tools in Linux"></a>ROS tools in Linux</h1><h2 id="1-open-Turtlesim"><a href="#1-open-Turtlesim" class="headerlink" title="1. open Turtlesim"></a>1. open Turtlesim</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roscore <span class="comment"># start the ROS Master</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun turtlesim turtlesim_node <span class="comment"># start the turtlesim</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun turtlesim turtle_teleop_key <span class="comment"># start turtle control node</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/05/29/gokcpLmyPZBVDqR.png" alt="image-20220529151250691"></p><h2 id="2-rqt-graph"><a href="#2-rqt-graph" class="headerlink" title="2. rqt_graph"></a>2. rqt_graph</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rqt_graph</span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/05/29/wrOlhL1vedbkBGs.png" alt="image-20220529151602659"></p><ul><li><code>/turtlesim</code> node is  a simple simulator for teaching ROS concepts.</li><li><code>teleop_turtle</code> node </li><li><code>/turtle1/cmd_vel</code> topic</li></ul><h2 id="3-rosnode-list"><a href="#3-rosnode-list" class="headerlink" title="3. rosnode list"></a>3. rosnode list</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosnode list <span class="comment"># show the current nodes</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/05/29/FphekDm5ydRcTz3.png" alt="image-20220529173940604"></p><h2 id="3-rosnode-info"><a href="#3-rosnode-info" class="headerlink" title="3. rosnode info"></a>3. rosnode info</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosnode info somenode <span class="comment"># check somenode's information</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/05/29/IB8NcqrQJwsAl3i.png" alt="image-20220529181619612"></p><h2 id="4-rostopic-list"><a href="#4-rostopic-list" class="headerlink" title="4. rostopic list"></a>4. rostopic list</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rostopic list <span class="comment"># show the current topic</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/05/29/5jNCniHyRQD2mwM.png" alt="image-20220529182106662"></p><h2 id="5-rostopic-pub"><a href="#5-rostopic-pub" class="headerlink" title="5. rostopic pub"></a>5. rostopic pub</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rostopic pub /turtle1/cmd_vel <span class="comment"># </span></span><br></pre></td></tr></tbody></table></figure><p>click <code>tab</code> button twice </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rostopic pub /turtle1/cmd_vel geometry_msgs/Twist <span class="string">"linear: </span></span><br><span class="line"><span class="string">  x: 0.0</span></span><br><span class="line"><span class="string">  y: 0.0</span></span><br><span class="line"><span class="string">  z: 0.0</span></span><br><span class="line"><span class="string">angular:</span></span><br><span class="line"><span class="string">  x: 0.0</span></span><br><span class="line"><span class="string">  y: 0.0</span></span><br><span class="line"><span class="string">  z: 0.0"</span> </span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/05/29/8xYF34qBuzleHOP.png" alt="image-20220529182504985"></p><ul><li>we can find turtle move</li><li>but only move once</li><li>it is because pub instruction only publish one time</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rostopic pub -r 10 /turtle1/cmd_vel geometry_msgs/Twist <span class="string">"linear:</span></span><br><span class="line"><span class="string">  x: 1.0</span></span><br><span class="line"><span class="string">  y: 0.0</span></span><br><span class="line"><span class="string">  z: 0.0</span></span><br><span class="line"><span class="string">angular:</span></span><br><span class="line"><span class="string">  x: 0.0</span></span><br><span class="line"><span class="string">  y: 0.0</span></span><br><span class="line"><span class="string">  z: 0.0"</span></span><br></pre></td></tr></tbody></table></figure><p>add <code>-r 10</code> after pub, </p><ul><li><code>-r</code> means rate,</li><li><code>10</code> means 10 times per second</li></ul><p><img src="https://s2.loli.net/2022/05/29/9qzsmeJSZ1G2Y3R.png" alt="image-20220529182826228"></p><h2 id="6-rosmsg-show"><a href="#6-rosmsg-show" class="headerlink" title="6. rosmsg show"></a>6. rosmsg show</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosmsg show geometry_msgs/Twist</span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/05/29/Qhyv4ZiUC1jN7lE.png" alt="image-20220529184730763"></p><h2 id="7-rosservice-list"><a href="#7-rosservice-list" class="headerlink" title="7. rosservice list"></a>7. rosservice list</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosservice list <span class="comment"># show all service</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/05/29/CPW5BKr3aOGspST.png" alt="image-20220529185604586"></p><h2 id="8-rosservice-call"><a href="#8-rosservice-call" class="headerlink" title="8. rosservice call"></a>8. rosservice call</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosservice call /spawn </span><br></pre></td></tr></tbody></table></figure><p>click tab for 2 times</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rosservice call /spawn <span class="string">"x: 2.0</span></span><br><span class="line"><span class="string">y: 2.0</span></span><br><span class="line"><span class="string">theta: 0.0</span></span><br><span class="line"><span class="string">name: 'turtle2'"</span> </span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/05/29/EG48CFokNjaAKTc.png" alt="image-20220529190116119"></p><p>we create another turtle</p><p>now we call <code>rostopic list</code> again, we can find we have turtle2 here</p><p><img src="https://s2.loli.net/2022/05/29/yrf4zPleNpY5Sxj.png" alt="image-20220529190225390"></p><h2 id="9-rosbag-record"><a href="#9-rosbag-record" class="headerlink" title="9. rosbag record"></a>9. rosbag record</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosbag record -a -O cmd_record <span class="comment"># record the data into cmd_record file</span></span><br></pre></td></tr></tbody></table></figure><ul><li>we can find a new file under current folder has been created</li><li>named cmd_record.bag</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosbag play cmd_record.bag <span class="comment"># play the data(the cmd_record file)</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS download</title>
      <link href="/liangjunyi.github.io/2022/05/29/ros-learning-ros-download/"/>
      <url>/liangjunyi.github.io/2022/05/29/ros-learning-ros-download/</url>
      
        <content type="html"><![CDATA[<h3 id="1、添加ROS软件源"><a href="#1、添加ROS软件源" class="headerlink" title="1、添加ROS软件源"></a>1、添加ROS软件源</h3><p><strong>将以下命令复制到ubuntu的终端执行</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> sh -c <span class="string">'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" &gt; /etc/apt/sources.list.d/ros-latest.list'</span></span><br></pre></td></tr></tbody></table></figure><p><strong>或者用下面这条命令（据说这条命令可以提高下载速度）</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> sh -c <span class="string">'. /etc/lsb-release &amp;&amp; echo "deb http://mirrors.ustc.edu.cn/ros/ubuntu/ $DISTRIB_CODENAME main" &gt; /etc/apt/sources.list.d/ros-latest.list'</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2、添加密钥"><a href="#2、添加密钥" class="headerlink" title="2、添加密钥"></a>2、添加密钥</h3><p><strong>将以下命令复制到ubuntu的终端执行</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-key adv --keyserver <span class="string">'hkp://keyserver.ubuntu.com:80'</span> --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654</span><br></pre></td></tr></tbody></table></figure><p><strong>成功后会显示如下界面：</strong></p><p><strong><a href="https://img-blog.csdnimg.cn/20201004161015910.png#pic_center"><img src="https://img-blog.csdnimg.cn/20201004161015910.png#pic_center" alt="img"></a></strong></p><h3 id="3、更新软件源"><a href="#3、更新软件源" class="headerlink" title="3、更新软件源"></a>3、更新软件源</h3><p><strong>将以下命令复制到ubuntu的终端执行（在这里顺便说一下，如果用wifi更新慢或者失败的话，切换至手机热点，再执行下面的命令试一下）</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br></pre></td></tr></tbody></table></figure><p><strong>成功后会显示如下界面：</strong></p><p><a href="https://img-blog.csdnimg.cn/20201004161503897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20201004161503897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center" alt="img"></a></p><h3 id="4、做完上面的三步就可以开始安装ROS了"><a href="#4、做完上面的三步就可以开始安装ROS了" class="headerlink" title="4、做完上面的三步就可以开始安装ROS了"></a>4、做完上面的三步就可以开始安装ROS了</h3><p><strong>将以下命令复制到ubuntu的终端执行（安装ROS的指令）</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install ros-melodic-desktop-full</span><br></pre></td></tr></tbody></table></figure><p><strong>因ubuntu版本的不同其安装指令也有可能不同，我的是ubuntu20.04 执行上面的代码时显示：无法定位软件包 ros-melodic-desktop-full ，然后改为执行下面的命令来安装：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install ros-noetic-desktop-full</span><br></pre></td></tr></tbody></table></figure><p><strong>会显示如下界面：</strong><br><a href="https://img-blog.csdnimg.cn/20201004162836852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20201004162836852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center" alt="img"></a></p><p><strong>输入Y继续（保证有网络），就这568MB我下了整整一天。。。。。前80%挺快的用了1分钟左右吧，从81%到100%那速度是真慢啊，当然你可以尝试换一下软件源试一试，换源方法见文章<a href="https://blog.csdn.net/qq_44339029/article/details/108916820">Ubuntu如何通过简单的几步操作来配置系统的软件源、找不到软件和更新怎么办？（带动态图文介绍）</a></strong></p><p><strong>如果在安装过程中你有事需要关闭电脑，可以输入ctrl+c暂停安装，然后正常关闭就可以了，下一次有时间继续安装的时候，按ctrl+alt+t打开终端后，按↑就可以调出之前输入过的安装命令sudo apt install ros-noetic-desktop-full，然后回车输入密码后，就可以继续安装了，我就是分3次下完的。。。</strong><br><strong>安装完后的界面如下（我又重新输入了一遍安装命令，确认已经是最新版了）：</strong></p><p><strong><a href="https://img-blog.csdnimg.cn/20201006191050146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20201006191050146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center" alt="img"></a></strong></p><h3 id="5、初始化rosdep"><a href="#5、初始化rosdep" class="headerlink" title="5、初始化rosdep"></a>5、初始化rosdep</h3><p><strong>输入以下的命令，先对其初始化一下</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> rosdep init </span><br></pre></td></tr></tbody></table></figure><p><strong>如果出现以下界面，那么恭喜你，你可以省下一些麻烦了，直接跳到第6步就行了：</strong></p><p><a href="https://img-blog.csdnimg.cn/20201006200812951.png#pic_center"><img src="https://img-blog.csdnimg.cn/20201006200812951.png#pic_center" alt="img"></a></p><p><strong>如果出现了以下几种错误，也不要担心，下面几种错误我都经历过 ，当然也就为大家整理好了解决方法</strong><br><strong>（1）错误1：找不到命令</strong><br> <strong>尝试着输入以下命令</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install python-rosdep2</span><br></pre></td></tr></tbody></table></figure><p><strong>或者：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install python3-rosdep2</span><br></pre></td></tr></tbody></table></figure><p><strong>这时候它会出现以下的界面，输入Y继续</strong></p><p><strong><a href="https://img-blog.csdnimg.cn/20201006201904124.png#pic_center"><img src="https://img-blog.csdnimg.cn/20201006201904124.png#pic_center" alt="img"></a></strong></p><p><strong><a href="https://img-blog.csdnimg.cn/20201006202015671.png#pic_center"><img src="https://img-blog.csdnimg.cn/20201006202015671.png#pic_center" alt="img"></a></strong></p><p><strong>到这里如果再输入sudo rosdep init命令试试，如果出现了之前介绍的，我们想要的界面，请跳到第6步，若出现了新的错误，请继续看本步（第5步）的内容</strong></p><p><strong>（2）错误2：ERROR: cannot download default sources list from:https : //raw.githubusercontent.com/ros/rosdistro/master/rosdep/sources.list.d/20-default.listWebsite may be down.<br>输入以下命令：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> gedit /etc/hosts</span><br></pre></td></tr></tbody></table></figure><p><strong>然后在打开的hosts文件中添加如下的内容，然后保存退出</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">199.232.28.133 raw.githubusercontent.com</span><br></pre></td></tr></tbody></table></figure><p><strong>到这里如果再输入sudo rosdep init命令试试，如果出现了之前介绍的，我们想要的界面，请跳到第6步，若出现了新的错误，请继续看本步（第5步）的内容</strong></p><p><strong>（3）错误3：ERROR: default sources list file already exists: /etc/ros /rosdep/sources.list.d/20-default.listPlease delete if you wish to re-initialize</strong><br><strong>输入以下命令：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> /etc/ros/rosdep/sources.list.d/20-default.list</span><br></pre></td></tr></tbody></table></figure><p><strong>到这里如果再输入sudo rosdep init命令试试，应该就会出现了之前介绍的我们想要的界面了</strong></p><h3 id="6、更新rosdep"><a href="#6、更新rosdep" class="headerlink" title="6、更新rosdep"></a>6、更新rosdep</h3><p><strong>输入以下命令：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosdep update </span><br></pre></td></tr></tbody></table></figure><p><strong>怎么说呢，这一步真的很令人难受，很容易出现没有找到资源或者链接超时之类的错误，比如：unable to process source或error loading sources list: The read operation timed out</strong><br><strong>我在网上查阅了很多的资料，但是针对每个人的网络不同这些效果也不同，以上的错误多半是网络原因导致的，可以切换成手机热点试一下，每个人的状况可能不太一样，反正我试了一下毫无作用，然后当天试了20遍左右（也就是只要出错了，就再输入rosdep update重新试一下），一直出错，然后我有点事就出去了，等到第二天下午再试的时候一遍就成功了（所以说，不急着用的同学，在试了几遍后如果一直错误，可以换不同的时间段再试（说白了，这个跟你的网络波动有关，玄学。。。）），成功后的界面如下所示：</strong><br><a href="https://img-blog.csdnimg.cn/20201007163757827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20201007163757827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center" alt="img"></a></p><p><strong>急着用的小伙伴只能不断的重复试了，下面介绍一种我在网上查到的一种用vim提高成功几率的方法（我没试过哈）</strong><br><strong>（1）需要先安装vim</strong><br><strong>输入以下指令，首先切换到root用户</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> su root</span><br></pre></td></tr></tbody></table></figure><p><strong>输入以下指令，下载安装vim，然后输入y，确定下载安装</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install vim</span><br></pre></td></tr></tbody></table></figure><p><strong>最后输入vim，确认一下有没有安装成功</strong><br><strong>（2）利用vim调大DOWNLOAD_TIMEOUT的值</strong><br><strong>更改 /usr/lib/python2.7/dist-packages/rosdep2/下的三个文件sources_ list.py、gbpdistro_support.py、rep3.py中的DOWNLOAD_TIMEOUT = 15.0值，改大一点，可以改成60试一下</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /usr/lib/python2.7/dist-packages/rosdep2/gbpdistro_support.py</span><br><span class="line"><span class="built_in">sudo</span> vim /usr/lib/python2.7/dist-packages/rosdep2/sources_list.py</span><br><span class="line"><span class="built_in">sudo</span> vim /usr/lib/python2.7/dist-packages/rosdep2/rep3.py</span><br></pre></td></tr></tbody></table></figure><p><strong>打开文件，在命令行模式输入“:/DOWNLOAD_TIMEOUT”搜索到参数设置的地方，修改过后输入:wq保存退出就行了。这个修改过后只是成功的几率会高很多，后面执行命令的时候发现卡住了就Ctrl + C重来多执行几次试一下</strong></p><h3 id="7、设置环境变量"><a href="#7、设置环境变量" class="headerlink" title="7、设置环境变量"></a>7、设置环境变量</h3><p><strong>输入以下命令：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"source /opt/ros/melodic/setup.bash"</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></tbody></table></figure><p><strong>或者下面的这行代码，注意到底是melodic还是noetic或者是kinetic是由你的ubuntu的版本决定的，比如我的ubuntu是20.04版本的，对应的是noetic，也就是应该下面的这行代码，而不是上面那行</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"source /opt/ros/noetic/setup.bash"</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></tbody></table></figure><p><strong>输入以下命令，运行该脚本让环境变量生效</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></tbody></table></figure><h3 id="8、-安装rosinstall"><a href="#8、-安装rosinstall" class="headerlink" title="8、 安装rosinstall"></a>8、 安装rosinstall</h3><p><strong>输入以下命令：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install python-rosinstall python-rosinstall-generator python-wstool build-essential</span><br></pre></td></tr></tbody></table></figure><p><strong>如果提示没有可安装候选，如下所示：</strong></p><p><a href="https://img-blog.csdnimg.cn/20201007185653900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20201007185653900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center" alt="img"></a></p><p><strong>按照提示更换软件包就行了，按照提示更改为以下命令：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install python3-rosinstall python3-rosinstall-generator python3-wstool</span><br></pre></td></tr></tbody></table></figure><h3 id="9、-验证ROS是否安装成功"><a href="#9、-验证ROS是否安装成功" class="headerlink" title="9、 验证ROS是否安装成功"></a>9、 验证ROS是否安装成功</h3><p><strong>按正常来说ROS到这里就安装完成了，现在我们来验证一下，输入以下命令：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></tbody></table></figure><p><strong>如果出现了以下的问题说明，之前的安装没有安装全</strong></p><p><a href="https://img-blog.csdnimg.cn/20201007193119544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20201007193119544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center" alt="img"></a></p><p><strong>输入以下命令，把没安装的安装一下就好了（如果显示有几个安装包无法下载，是因为网络的原因重新输入以下命令就行了）</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-noetic-desktop-full</span><br></pre></td></tr></tbody></table></figure><p><strong>到这里再输入roscore看一下，若安装成功会显示如下界面：</strong></p><p><a href="https://img-blog.csdnimg.cn/20201007193747683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20201007193747683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center" alt="img"></a></p><p><strong>然后我们启动一下小海龟的仿真器试一试，按ctrl+alt+t打开一个新的终端，输入以下命令</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun turtlesim turtlesim_node</span><br></pre></td></tr></tbody></table></figure><p><strong>按ctrl+alt+t再打开一个新的终端，输入以下命令</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun turtlesim turtle_teleop_key</span><br></pre></td></tr></tbody></table></figure><p><strong>这时候你按键盘上的↑↓←→键就可以控制小海龟移动了！！！</strong><br><strong>那么恭喜你的ROS已经成功安装完了！！！</strong></p><p><a href="https://img-blog.csdnimg.cn/20201007194425419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20201007194425419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzM5MDI5,size_16,color_FFFFFF,t_70#pic_center" alt="img"></a></p>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>File/Directory instruction</title>
      <link href="/liangjunyi.github.io/2022/05/26/linux-file-directory-instruction/"/>
      <url>/liangjunyi.github.io/2022/05/26/linux-file-directory-instruction/</url>
      
        <content type="html"><![CDATA[<h1 id="File-Directory-instruction"><a href="#File-Directory-instruction" class="headerlink" title="File/Directory instruction"></a>File/Directory instruction</h1><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span> <span class="comment"># 展示当前路径</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> <span class="comment"># 显示当前文件夹下的东西</span></span><br></pre></td></tr></tbody></table></figure><ul><li>-a 显示当前目录所有的文件和目录，包括隐藏的</li><li>-l 以列表的方式显示信息</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="comment"># 切换目录</span></span><br></pre></td></tr></tbody></table></figure><ul><li>cd ~  回到自己的家目录</li><li>cd .. 回到当前目录的上一级目录</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">makdir <span class="comment"># 创建目录</span></span><br></pre></td></tr></tbody></table></figure><ul><li>-p :创建多级目录</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> <span class="comment"># 删除空目录</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf <span class="comment"># 删除非空目录</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Find root Password</title>
      <link href="/liangjunyi.github.io/2022/05/26/linux-find-root-password/"/>
      <url>/liangjunyi.github.io/2022/05/26/linux-find-root-password/</url>
      
        <content type="html"><![CDATA[<h1 id="Find-root-Password"><a href="#Find-root-Password" class="headerlink" title="Find root Password"></a>Find root Password</h1><ol><li><p>重启系统，并按住 <code>Shift</code> 键，直到出现如下界面</p><p><img src="https://s2.loli.net/2022/05/26/2Ta93kg1c76mCLz.png" alt="image-20220526110604328"></p><p>选择 <code>Advanced options for Ubuntu</code></p></li><li><p>进入下图界面后，选择 <code>recovery mode</code>，并根据下面提示在键盘上键入 <code>e</code> 进入编辑模式</p><p><img src="https://s2.loli.net/2022/05/26/KuYDG3LsNMyOpJq.png" alt="image-20220526110620633"></p></li><li><p>在编辑模式中找到如下图所示位置</p><p><img src="https://s2.loli.net/2022/05/26/WjzVL1yAwRicFbU.png" alt="image-20220526110633506"></p><p><img src="https://s2.loli.net/2022/05/26/zPmBDdcOMi4NuQ6.png" alt="image-20220526110700757"></p><p>修改 <code>ro recovery nomodeset</code> 为 <code>quiet splash rw init=/bin/bash</code>，并通过 <code>Ctrl + x</code> 或 <code>F10</code> 启动</p></li><li><p>等到启动完成后，通过 <code>passwd</code> 命令修改密码即可。修改完成后重启服务器即可使用新密码登录</p><p><img src="https://s2.loli.net/2022/05/26/rj76sfgQpDAuN9F.png" alt="image-20220526110715860"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Run level</title>
      <link href="/liangjunyi.github.io/2022/05/24/linux-run-level/"/>
      <url>/liangjunyi.github.io/2022/05/24/linux-run-level/</url>
      
        <content type="html"><![CDATA[<h1 id="Run-level"><a href="#Run-level" class="headerlink" title="Run level"></a>Run level</h1><h2 id="Meaning-of-each-run-level"><a href="#Meaning-of-each-run-level" class="headerlink" title="Meaning of each run level"></a>Meaning of each run level</h2><p>0：关机</p><p>1：单用户【找回丢失密码】 </p><p>2： 多用户状态没有网络服务 （不常用）</p><p>3：多用户状态有网络服务 （常用）</p><p>4：系统未使用保留给用户</p><p>5：图形界面 （常用）</p><p>6：系统重启</p><h2 id="switch-run-level"><a href="#switch-run-level" class="headerlink" title="switch run level"></a>switch run level</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init [0123456] </span><br></pre></td></tr></tbody></table></figure><h2 id="set-default-run-level"><a href="#set-default-run-level" class="headerlink" title="set default run level"></a>set default run level</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl get-default <span class="comment"># 查看当前默认runlevel</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl set-default Target.target # 设置默认runlevel</span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/05/24/xcbsGz2vnrJLECV.png" alt="image-20220524153902289"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The remote root login</title>
      <link href="/liangjunyi.github.io/2022/05/23/linux-the-remote-root-login/"/>
      <url>/liangjunyi.github.io/2022/05/23/linux-the-remote-root-login/</url>
      
        <content type="html"><![CDATA[<ol><li><p>install ssh service</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install ssh</span><br></pre></td></tr></tbody></table></figure></li><li><p>edit config file</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/ssh/sshd_config</span><br></pre></td></tr></tbody></table></figure><p>change PermitRootLogin ‘s value into yes</p><p><img src="https://s2.loli.net/2022/05/23/YunjedXmhZWDtgQ.png" alt="image-20220523200715794"></p></li><li><p>restart ssh service</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/ssh restart</span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Set password for root</title>
      <link href="/liangjunyi.github.io/2022/05/22/linux-set-password-for-root/"/>
      <url>/liangjunyi.github.io/2022/05/22/linux-set-password-for-root/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-set-root-password"><a href="#Linux-set-root-password" class="headerlink" title="Linux set root password"></a>Linux set root password</h1><ol><li><p>command line </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> passwd root</span><br></pre></td></tr></tbody></table></figure></li><li><p>enter user’s password</p></li><li><p>enter the root password that you want set</p></li><li><p>reenter root password</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shutdown Restart and Logout</title>
      <link href="/liangjunyi.github.io/2022/05/22/linux-shutdown-restart-and-logout/"/>
      <url>/liangjunyi.github.io/2022/05/22/linux-shutdown-restart-and-logout/</url>
      
        <content type="html"><![CDATA[<h1 id="Shutdown-Restart-and-Logout"><a href="#Shutdown-Restart-and-Logout" class="headerlink" title="Shutdown Restart and Logout"></a>Shutdown Restart and Logout</h1><h2 id="Shutdown-Restart"><a href="#Shutdown-Restart" class="headerlink" title="Shutdown &amp; Restart"></a>Shutdown &amp; Restart</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shutdown -h now <span class="comment"># 立即进行关机</span></span><br><span class="line">shutdown -h 1 <span class="comment"># 1分钟后关机</span></span><br><span class="line">shutdown -r now <span class="comment"># 立刻重启计算机</span></span><br><span class="line">halt <span class="comment"># 关机，同上</span></span><br><span class="line">reboot <span class="comment"># 重启，同上</span></span><br><span class="line"><span class="built_in">sync</span> <span class="comment"># 吧内存数据同步到磁盘</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>recommend type sync every time before shutdown</p><p>if it need permission, add sudo beforesu </p></blockquote><h2 id="Login-and-Logout"><a href="#Login-and-Logout" class="headerlink" title="Login and Logout"></a>Login and Logout</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su - root <span class="comment"># 切换成管理员</span></span><br><span class="line">su - username <span class="comment"># 切换用户</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">logout</span> <span class="comment"># 注销用户</span></span><br></pre></td></tr></tbody></table></figure><h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><p>current user is Tom, go to root.</p><p>Then logout at root, it will go back to Tom.</p><p>Then logout again, it will shutdown.</p><h3 id="Notice"><a href="#Notice" class="headerlink" title="Notice"></a>Notice</h3><p>It will different when you operate this in Linux and in xshell.</p><p>In Linux, there is no logout for Tom.</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>User &amp; User Group management</title>
      <link href="/liangjunyi.github.io/2022/05/22/linux-user-user-group-management/"/>
      <url>/liangjunyi.github.io/2022/05/22/linux-user-user-group-management/</url>
      
        <content type="html"><![CDATA[<h1 id="User-management"><a href="#User-management" class="headerlink" title="User management"></a>User management</h1><h2 id="User-part"><a href="#User-part" class="headerlink" title="User part"></a>User part</h2><h3 id="Add-new-user"><a href="#Add-new-user" class="headerlink" title="Add new user"></a>Add new user</h3><ul><li><p>Basic command line</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd username</span><br></pre></td></tr></tbody></table></figure></li></ul><blockquote><p>此方法虽然添加了用户，但是有可能没有默认创建文件夹，如果没有创建</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -m username</span><br></pre></td></tr></tbody></table></figure><p>可以解决这个问题</p><p>注意如果刚刚执行完上面的语句，需要先删除刚刚的user才能再次创建他，没有办法有两个同名的user</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser username</span><br></pre></td></tr></tbody></table></figure><p>这个也可以，创建完user后也会生成文件夹，更加推荐</p></blockquote><h4 id="example"><a href="#example" class="headerlink" title="example :"></a>example :</h4><p><img src="https://s2.loli.net/2022/05/22/oFr1ltYL2G8jvOe.png" alt="image-20220522213056132"></p><ul><li><p>Example</p><ul><li>add a user <code>milan</code>, default user directory is /home/milan</li></ul></li><li><p>detail</p><ul><li><p>when create user successful, auto create directory for user at same time</p></li><li><p>if we use </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -d The specified directory username <span class="comment"># useradd -d 指定目录 新加用户名</span></span><br></pre></td></tr></tbody></table></figure><p>also create a user but this user will use the specified directory instead of generating a new directory</p><blockquote><p>此方法同上</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -m -d The specified directory username# useradd -m -d 指定目录 新加用户名</span><br></pre></td></tr></tbody></table></figure><p>可以解决这个问题</p></blockquote><p><img src="https://s2.loli.net/2022/05/22/18SibYR4H2WteVI.png" alt="image-20220522213953461"></p><blockquote><p>给创建的用户指定了家目录</p></blockquote></li></ul></li></ul><h3 id="Set-password-for-new-user"><a href="#Set-password-for-new-user" class="headerlink" title="Set password for new user"></a>Set password for new user</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd username </span><br></pre></td></tr></tbody></table></figure><blockquote><p>This operation also need under root </p></blockquote><h3 id="Delete-user"><a href="#Delete-user" class="headerlink" title="Delete user"></a>Delete user</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel username</span><br></pre></td></tr></tbody></table></figure><p>only delete this user</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel -r username</span><br></pre></td></tr></tbody></table></figure><p>Not only delete the user, but also delete the directory</p><h3 id="Querying-User-Information"><a href="#Querying-User-Information" class="headerlink" title="Querying User Information"></a>Querying User Information</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">id</span> username</span><br></pre></td></tr></tbody></table></figure><h4 id="examples"><a href="#examples" class="headerlink" title="examples :"></a>examples :</h4><p><img src="https://s2.loli.net/2022/05/23/8P9HBovYZbRr6es.png" alt="image-20220523174054780"></p><p><img src="https://s2.loli.net/2022/05/23/QPJmgTs2dlwRVaC.png" alt="image-20220523174403469"></p><h3 id="Switch-users"><a href="#Switch-users" class="headerlink" title="Switch users"></a>Switch users</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - username</span><br></pre></td></tr></tbody></table></figure><ul><li><p>In Linux, if the current user has insufficient rights, you can switch to a user with higher right</p></li><li><p>A password is not required to change from a high-privilege user to a low-privilege user</p></li><li><p>Otherwise you need a password</p></li><li><p>To return to the original user, use the exit/logout command</p></li></ul><blockquote><p>在操作linux中，如果当前权限不够，可以切换至更高权限的用户</p><p>从高权限用户到低权限用户不需要密码</p><p>反之需要密码</p><p>如果想回到原来用户使用exit/logout指令</p></blockquote><h4 id="examples-1"><a href="#examples-1" class="headerlink" title="examples :"></a>examples :</h4><p><img src="https://s2.loli.net/2022/05/23/6EjAWvnoJelfF9Z.png" alt="image-20220523175242905"></p><h3 id="Who-am-i"><a href="#Who-am-i" class="headerlink" title="Who am i"></a>Who am i</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">who</span> am i</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">whoami</span></span><br></pre></td></tr></tbody></table></figure><p>it will show the initial login user’s information</p><h4 id="examples-2"><a href="#examples-2" class="headerlink" title="examples :"></a>examples :</h4><p>i am at root currently, but it will show the init login user – liangjunyi</p><p><img src="https://s2.loli.net/2022/05/23/uinKFQ4VG9EyYLS.png" alt="image-20220523180109271"></p><p><img src="https://s2.loli.net/2022/05/23/bIhWSCz5QD3FrqP.png" alt="image-20220523180147131"></p><h2 id="User-Group-part"><a href="#User-Group-part" class="headerlink" title="User Group part"></a>User Group part</h2><p>Unified management of users with common/permission in the system</p><blockquote><p>系统对有 共性/权限 的用户进行统一管理</p></blockquote><h3 id="Add-new-group"><a href="#Add-new-group" class="headerlink" title="Add new group"></a>Add new group</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd groupname</span><br></pre></td></tr></tbody></table></figure><h3 id="Delete-a-group"><a href="#Delete-a-group" class="headerlink" title="Delete a group"></a>Delete a group</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel groupname</span><br></pre></td></tr></tbody></table></figure><h3 id="Add-group-when-add-user"><a href="#Add-group-when-add-user" class="headerlink" title="Add group when add user"></a>Add group when add user</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -g groupname username</span><br></pre></td></tr></tbody></table></figure><h3 id="Change-user’s-group"><a href="#Change-user’s-group" class="headerlink" title="Change user’s group"></a>Change user’s group</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -g groupname username</span><br></pre></td></tr></tbody></table></figure><h2 id="File-for-user-and-group"><a href="#File-for-user-and-group" class="headerlink" title="File for user and group"></a>File for user and group</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/passwd 文件</span><br></pre></td></tr></tbody></table></figure><p>user的配置文件，记录用户的各种信息</p><p>每行的含义：</p><ul><li>用户名：口令：用户标识号：组标识号：注释性描述：主目录：登陆shell</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/shadow 文件</span><br></pre></td></tr></tbody></table></figure><p>口令的配置文件</p><p>每行的含义：</p><ul><li>登录名：加密口令：最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：不活动时间：失效时间：标志<ul><li>加密口令：设置了密码的用户会有很长一段的密码，没设置的是叹号</li></ul></li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/group 文件</span><br></pre></td></tr></tbody></table></figure><p>group的配置文件，记录linux包含组的信息</p><p>每行含义：</p><ul><li>组名：口令：组标识号：组内用户列表</li></ul><h2 id="Find-all-users-groups"><a href="#Find-all-users-groups" class="headerlink" title="Find all users, groups"></a>Find all users, groups</h2><h3 id="find-all-users"><a href="#find-all-users" class="headerlink" title="find all users"></a>find all users</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/passwd</span><br></pre></td></tr></tbody></table></figure><p>or</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cut</span> -d : -f 1 /etc/passwd</span><br></pre></td></tr></tbody></table></figure><p>or</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/passwd |awk -F \: <span class="string">'{print $1}'</span></span><br></pre></td></tr></tbody></table></figure><p>or</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/passwd|grep -v nologin|grep -v halt|grep -v shutdown|awk -F<span class="string">":"</span> <span class="string">'{print $1"|"$3"|"$4}'</span>|more</span><br></pre></td></tr></tbody></table></figure><h3 id="find-all-groups"><a href="#find-all-groups" class="headerlink" title="find all groups"></a>find all groups</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/group</span><br></pre></td></tr></tbody></table></figure><p>or</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getent group</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vi &amp; Vim in Linux</title>
      <link href="/liangjunyi.github.io/2022/05/22/linux-vi-vim-in-linux/"/>
      <url>/liangjunyi.github.io/2022/05/22/linux-vi-vim-in-linux/</url>
      
        <content type="html"><![CDATA[<h1 id="Vi-Vim-in-Linux"><a href="#Vi-Vim-in-Linux" class="headerlink" title="Vi &amp; Vim in Linux"></a>Vi &amp; Vim in Linux</h1><h2 id="basic-description-about-vi-vim"><a href="#basic-description-about-vi-vim" class="headerlink" title="basic description about vi &amp; vim"></a>basic description about vi &amp; vim</h2><p>vi is Linux built in text editor</p><p>vim is the enhanced version to vi, can do program</p><h2 id="three-patterns-by-vi-vim"><a href="#three-patterns-by-vi-vim" class="headerlink" title="three patterns by vi &amp; vim"></a>three patterns by vi &amp; vim</h2><ul><li>normal pattern 正常模式<ul><li>can not edit in this pattern</li></ul></li><li>edit pattern 编辑模式</li><li>cmd line pattern 命令行模式</li></ul><h2 id="operating-process"><a href="#operating-process" class="headerlink" title="operating process"></a>operating process</h2><h4 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim Hello.java</span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/05/22/OVQKMnNU3glEbr4.png" alt="image-20220522170231266"></p><p>by this command, we go to normal pattern, from our command line</p><p><img src="https://s2.loli.net/2022/05/22/uq4t2XNYa8Gw5Eg.png" alt="image-20220522170425702"></p><h4 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> i <span class="comment"># 摁下i</span></span><br></pre></td></tr></tbody></table></figure><p>now we are in edit pattern</p><p><img src="https://s2.loli.net/2022/05/22/mxjYWdJ3VzeSR5T.png" alt="image-20220522170558960"></p><p>we can write our file here</p><h4 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h4><p>After editing</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">we <span class="built_in">type</span> esc first  <span class="comment"># 摁下esc</span></span><br></pre></td></tr></tbody></table></figure><p>now we leave the edit pattern and go to normal pattern now</p><p><img src="https://s2.loli.net/2022/05/22/KIrTDZzySEfCpxU.png" alt="image-20220522171432159"></p><p>then type</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:wq <span class="comment"># write(save) and quit</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/05/22/oNIKehzbUL4MClr.png" alt="image-20220522172138024"></p><p><img src="https://s2.loli.net/2022/05/22/Is7E4atN6PTzmR8.png" alt="image-20220522171815264"></p><h4 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h4><p>if you want edit this file again</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim Hello.java</span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/05/22/JHtj6Lavx9fTqWB.png" alt="image-20220522172027683"></p><h2 id="how-to-change-vi-vim"><a href="#how-to-change-vi-vim" class="headerlink" title="how to change vi &amp; vim"></a>how to change vi &amp; vim</h2><p><img src="https://s2.loli.net/2022/05/22/5TQscPwDxLqnR3I.png" alt="image-20220522165131419"></p><h2 id="shortcut-key-words-快捷键"><a href="#shortcut-key-words-快捷键" class="headerlink" title="shortcut key words 快捷键"></a>shortcut key words 快捷键</h2><h4 id="under-normal-pattern-copy-and-paste"><a href="#under-normal-pattern-copy-and-paste" class="headerlink" title="under normal pattern : copy and paste"></a>under normal pattern : copy and paste</h4><ul><li>copy current line : yy</li><li>paste : p<ul><li>copy 5 line below current line : 5yy 包括复制当前行</li></ul></li><li>delete current line : dd<ul><li>delete 5 line below current line : 5dd 包括删除当前行</li></ul></li></ul><blockquote><p>these are under normal pattern, if you are in edit pattern, it will just type yy in the file</p></blockquote><h4 id="search-a-word-in-the-file"><a href="#search-a-word-in-the-file" class="headerlink" title="search a word in the file"></a>search a word in the file</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/hello</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> enter <span class="comment"># 摁下回车开始查找</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> n <span class="comment"># 下一个，查到最后一个单词则回到开头</span></span><br></pre></td></tr></tbody></table></figure><h4 id="set-number-for-line"><a href="#set-number-for-line" class="headerlink" title="set number for line"></a>set number for line</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">: <span class="built_in">set</span> nu <span class="comment"># 设置行号</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/05/22/bqmNxlnLCo5ZEhB.png" alt="image-20220522173207087"></p><p><img src="https://s2.loli.net/2022/05/22/9tnNXgimkxzyuTY.png" alt="image-20220522173412258"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">: <span class="built_in">set</span> nonu <span class="comment"># 取消行号</span></span><br></pre></td></tr></tbody></table></figure><h4 id="go-to-the-last-line-and-first-line"><a href="#go-to-the-last-line-and-first-line" class="headerlink" title="go to the last line and first line"></a>go to the last line and first line</h4><blockquote><p>under normal pattern</p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">G <span class="comment"># go to last line</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gg <span class="comment"># go to first line</span></span><br></pre></td></tr></tbody></table></figure><h4 id="undo"><a href="#undo" class="headerlink" title="undo"></a>undo</h4><p>at the normal pattern </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u <span class="comment"># undo</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>if do some editions in edit pattern, can type esc go to normal pattern, then type u to undo all the editions you did just now</p></blockquote><h4 id="move-the-cursor"><a href="#move-the-cursor" class="headerlink" title="move the cursor"></a>move the cursor</h4><p>at the normal pattern</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20 <span class="built_in">shift</span> g <span class="comment"># move to the 20th line</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>有可能键盘因为摁完shift后变成中文输入法，可以采取的措施是打开大写输入</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Open an app in Linux</title>
      <link href="/liangjunyi.github.io/2022/05/19/linux-open-an-app-in-linux/"/>
      <url>/liangjunyi.github.io/2022/05/19/linux-open-an-app-in-linux/</url>
      
        <content type="html"><![CDATA[<h1 id="Open-an-app-in-Linux"><a href="#Open-an-app-in-Linux" class="headerlink" title="Open an app in Linux"></a>Open an app in Linux</h1><h2 id="Open-app"><a href="#Open-app" class="headerlink" title="Open app"></a>Open app</h2><p>For example open firefox, we can type in terminal </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firefox $</span><br></pre></td></tr></tbody></table></figure><blockquote><ul><li>no need go to specific folder, can directly type this command in the terminal</li><li>The reason add <code>$</code> at end is aim to run firefox at backend, so that the terminal will not be occupied by Firefox</li><li>if you forget type <code>$</code>, you can type <code>Ctrl+Z</code> and then type <code>bg</code> and return.</li></ul></blockquote><h2 id="Close-app"><a href="#Close-app" class="headerlink" title="Close app"></a>Close app</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps</span><br></pre></td></tr></tbody></table></figure><ul><li>show the currently running process</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux</span><br></pre></td></tr></tbody></table></figure><ul><li>is to show all the currently running process and their state</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep</span><br></pre></td></tr></tbody></table></figure><ul><li>it means search</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep evince</span><br></pre></td></tr></tbody></table></figure><ul><li>search for evince process</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ps aux | grep evince     <span class="comment">#查到evince的进程</span></span><br></pre></td></tr></tbody></table></figure><ul><li>|:管道符号,command1 |command2,将command1输出结果通过管道作为command2命令的输入参数.</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">kill</span> -s 9 pid   <span class="comment">#杀死进程号为PID的进程，例如：kill -9 6705</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Some-commands"><a href="#Some-commands" class="headerlink" title="Some commands"></a>Some commands</h2><h3 id="ps命令-Process-Status"><a href="#ps命令-Process-Status" class="headerlink" title="ps命令 (Process Status)"></a>ps命令 (Process Status)</h3><p><code>ps aux</code>‘output format</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND</span><br></pre></td></tr></tbody></table></figure><p>格式说明：</p><ul><li><p>USER: 行程拥有者</p></li><li><p>PID: pid 就是这个程序的 ID </p></li><li><p>%CPU: 占用的 CPU 使用率</p></li><li><p>%MEM: 占用的记忆体使用率</p></li><li><p>VSZ: 占用的虚拟记忆体大小</p></li><li><p>RSS: 占用的记忆体大小</p></li><li><p>TTY: 终端的次要装置号码 (minor device number of tty)</p></li><li><p>STAT: 该行程的状态，linux的进程有5种状态：</p><ul><li><p>D 不可中断 uninterruptible sleep (usually IO)  (收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)</p></li><li><p>R 运行 runnable (on run queue)      (正在运行或在运行队列中等待)</p></li><li><p>S 中断 sleeping     (休眠中, 受阻, 在等待某个条件的形成或接受到信号)</p></li><li><p>T 停止 traced or stopped    (进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行)</p></li><li><p>Z 僵死 a defunct (”zombie”) process   (进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)</p></li><li><p>注: 其它状态还包括W(无驻留页), &lt;(高优先级进程), N(低优先级进程), L(内存锁页).</p></li></ul></li><li><p>START: 进程开始时间</p></li><li><p>TIME: 执行的时间</p></li><li><p>COMMAND:所执行的指令</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FPGA Game Machine Project</title>
      <link href="/liangjunyi.github.io/2022/05/18/project-fpga-game-machine-project/"/>
      <url>/liangjunyi.github.io/2022/05/18/project-fpga-game-machine-project/</url>
      
        <content type="html"><![CDATA[<h1 id="Prezzer"><a href="#Prezzer" class="headerlink" title="Prezzer"></a>Prezzer</h1><h3 id="Acknowledgement"><a href="#Acknowledgement" class="headerlink" title="Acknowledgement"></a>Acknowledgement</h3><ul><li>Tran Nguyen Bao Long</li><li>Kat Yong Jie</li><li>Liang Junyi</li><li>Wang Zhuoran</li><li>Lu Mingrui</li><li>Han Jin</li><li>Sun Zhengnan</li><li>Yang Haocheng</li></ul><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>For our 50.002 project, we have created a single-player game called Prezzer. The objective of the game is to score the highest amount of points possible before the 30 seconds count down and avoid pressing the wrong button.</p><p>This is a game whereby the player must observe a matrix of LED lights, this LED matrix consists of three columns and four rows and there are 3 different coloured lights: red, green and blue player need to press different times to clear different color LED: red 3 times, green 2 times and red 1 times, and each row only lights one LED, Player need to press the right buttons based on the LED light at the lowest level with the corresponding colors and position.</p><p>The coloured LED will move down after we press the button correctly from the top to the bottom. If the player presses the wrong button. The game ends if the player presses the wrong button or runs out of time, and the final score will be displayed on the 7 seg on the top left of the game and time left will be displayed on the 7 seg on the top right of the game.</p><h3 id="How-to-play"><a href="#How-to-play" class="headerlink" title="How to play"></a>How to play</h3><ol><li>Press RESET button to start</li><li>Colored tiles will be randomly generated on the three columns</li><li>Press button below corresponding column</li><li>Clear as many tiles as you can within 30 seconds and get the max score</li><li>Pressing a button for the wrong column will mean game over.</li></ol><h3 id="Tiles-scores"><a href="#Tiles-scores" class="headerlink" title="Tiles scores"></a>Tiles scores</h3><ul><li>Red: 3 presses = 3 points</li><li>Green: 2 presses = 2 points</li><li>Blue: 1 press = 1 point</li></ul><p>Red turns to Green turns to Blue CLEAR for each correct press</p><h3 id="ALU-Function"><a href="#ALU-Function" class="headerlink" title="ALU Function"></a>ALU Function</h3><table><thead><tr><th>Operation</th><th>ALUFN</th><th>Decimal</th></tr></thead><tbody><tr><td>ADD</td><td>0000</td><td>0</td></tr><tr><td>SUB</td><td>0001</td><td>1</td></tr><tr><td>MUL (extra)</td><td>0010</td><td>2</td></tr><tr><td>CMPEQ</td><td>0011</td><td>3</td></tr><tr><td>CMPLT</td><td>0100</td><td>4</td></tr><tr><td>CMPLE</td><td>0101</td><td>5</td></tr><tr><td>AND</td><td>0110</td><td>6</td></tr><tr><td>OR</td><td>0111</td><td>7</td></tr><tr><td>XOR</td><td>1000</td><td>8</td></tr><tr><td>A</td><td>1001</td><td>9</td></tr><tr><td>SHL</td><td>1010</td><td>10</td></tr><tr><td>SHR</td><td>1011</td><td>11</td></tr><tr><td>SRA</td><td>1100</td><td>12</td></tr><tr><td>SHD(extra)</td><td>1101</td><td>13</td></tr><tr><td>B(extra)</td><td>1110</td><td>14</td></tr><tr><td>ENQ(extra)</td><td>1111</td><td>15</td></tr></tbody></table><h3 id="Finite-State-Machine"><a href="#Finite-State-Machine" class="headerlink" title="Finite State Machine"></a>Finite State Machine</h3><p><img src="https://s2.loli.net/2022/05/18/9SUiIrtzADcaMw3.png" alt="image-20220518162522273"></p><h3 id="Datapath"><a href="#Datapath" class="headerlink" title="Datapath"></a>Datapath</h3><p><img src="https://s2.loli.net/2022/05/18/WgMfF9HcGOLhiDV.png" alt="image-20220518162707353"></p><h3 id="Game-Video"><a href="#Game-Video" class="headerlink" title="Game Video"></a>Game Video</h3><p><a href="https://drive.google.com/file/d/1AakxMa9XYiGlq1NfNdacxOq8Fx1BowqT/view?usp=sharing">https://drive.google.com/file/d/1AakxMa9XYiGlq1NfNdacxOq8Fx1BowqT/view?usp=sharing</a></p>]]></content>
      
      
      <categories>
          
          <category> FPGA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FPGA </tag>
            
            <tag> Finite State Machine </tag>
            
            <tag> Datapath </tag>
            
            <tag> Arithmetic Logic Unit (ALU) </tag>
            
            <tag> IO control </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android App</title>
      <link href="/liangjunyi.github.io/2022/05/18/project-android-app-project/"/>
      <url>/liangjunyi.github.io/2022/05/18/project-android-app-project/</url>
      
        <content type="html"><![CDATA[<h1 id="Touchless-Chef"><a href="#Touchless-Chef" class="headerlink" title="Touchless Chef"></a>Touchless Chef</h1><blockquote><p><a href="https://istd.sutd.edu.sg/undergraduate/courses/50001-information-systems-programming">50.001</a> 1D Project</p><p>A POC Recipe Android Application using Google Mediapipe Hands Tracking model for smart touchless scrolling.</p><p>Deliverables:</p><ul><li>Download and install our <code>.apk</code> <a href="https://drive.google.com/file/d/13otJ7cr-M_WNgoN18USStgj5GLp90yvS/view?usp=sharing"><em><strong>HERE</strong></em></a> to try it out</li><li><a href="https://drive.google.com/file/d/1CY5GiMf-hH6lPLB7P39XUdJx_tyvs2Lg/view">Slides</a></li><li><a href="https://drive.google.com/file/d/1Y4r8ZRK22YiWPUSEJxjkPF3D8pMjsIxF/view?usp=sharing">Poster</a></li><li><a href="https://drive.google.com/file/d/1eMMJQq2ctQO_Nt-fLtD9gfOnbFEruVBF/view?usp=sharing">Video</a></li></ul></blockquote><h2 id="A-Acknowledgement"><a href="#A-Acknowledgement" class="headerlink" title="A. Acknowledgement:"></a>A. Acknowledgement:</h2><ul><li><p>Tran Nguyen Bao Long</p><p>@TNBL</p><p>: Project Lead</p><ul><li>define software architecture</li><li>documentation</li></ul></li><li><p>Li Xueqing</p><p>@cnmnrll</p><p>: Project Design</p><ul><li>set basic <code>Recipe</code>, <code>Ingredients</code> and <code>Instructions</code> models <a href="https://github.com/TNBL265/TouchlessChef/tree/main/hands/src/main/java/app/touchlessChef/model"><code>model</code></a></li><li>documentation</li></ul></li><li><p>Melodie Chew En Qi</p><p>@melmelchew</p><p>: Marketing + Frontend</p><ul><li><code>RecyclerView</code> and <code>NavigationView</code></li><li><a href="https://github.com/TNBL265/TouchlessChef/tree/main/hands/src/main/java/app/touchlessChef/adapter/recipe"><code>adapter</code></a> for <code>RecyclerView</code></li></ul></li><li><p>Melvin Lim Boon Han</p><p>@melvinlimbh</p><p>: Marketing + Frontend</p><ul><li>Fragments for different cuisines <a href="https://github.com/TNBL265/TouchlessChef/tree/main/hands/src/main/java/app/touchlessChef/fragment/home"><code>home</code></a></li><li>Fragments for creating recipes <a href="https://github.com/TNBL265/TouchlessChef/tree/main/hands/src/main/java/app/touchlessChef/fragment/recipe">RecipeCreate</a></li><li>all resources and layouts <a href="https://github.com/TNBL265/TouchlessChef/tree/main/hands/src/main/res"><code>res</code></a></li></ul></li><li><p>Han Jin</p><p>@dlmszhhh</p><p>: Backend Acitivity</p><ul><li>basic recipe activities <a href="https://github.com/TNBL265/TouchlessChef/tree/main/hands/src/main/java/app/touchlessChef/activity"><code>acitivity</code></a></li></ul></li><li><p>Wang Zhouran</p><p>@wzrwzr23</p><p>: Backend Database</p><ul><li>setup <code>SQLite</code> database and corresponding Data Access Objects <a href="https://github.com/TNBL265/TouchlessChef/tree/main/hands/src/main/java/app/touchlessChef/dao"><code>dao</code></a> and <a href="https://github.com/TNBL265/TouchlessChef/blob/main/hands/src/main/java/app/touchlessChef/adapter/DatabaseAdapter.java"><code>adapter</code></a></li></ul></li><li><p>Liang Junyi</p><p>@LiangJunyi-010</p><p>Backend HandTracking</p><ul><li>implement HandTracking using Google Mediapipe <a href="https://google.github.io/mediapipe/solutions/hands.html"><strong>Hands model</strong></a> for touchless scrolling in <a href="https://github.com/TNBL265/TouchlessChef/blob/main/hands/src/main/java/app/touchlessChef/activity/recipe/ViewRecipeActivity.java"><code>ViewRecipeActivity</code></a></li></ul></li></ul><h2 id="B-Description"><a href="#B-Description" class="headerlink" title="B. Description"></a>B. Description</h2><blockquote><p>Overview of Design Pattern used:</p><ul><li><strong>Adapter Design Pattern</strong> (for SQLite database and RecyclerView)</li><li><strong>Singleton Design Pattern</strong> (for SQLite database)</li><li><strong>Observer Design Pattern</strong> (for <code>CreateRecipeActivity</code>)</li><li><strong>Factory Design Pattern</strong> (for Cuisine Fragment)</li><li><strong>Template Method Design Pattern</strong> (for Create Recipe Fragment)</li></ul></blockquote><h3 id="0-Model"><a href="#0-Model" class="headerlink" title="0. Model"></a>0. <a href="https://github.com/TNBL265/TouchlessChef/tree/main/hands/src/main/java/app/touchlessChef/model">Model</a></h3><ul><li>Utilize<code>Parcelable</code>interface:<ul><li>speed up data transfer using Java Serializable</li><li>easily pass data as <code>Bundle</code> object through Activity</li></ul></li><li>Recipe :<ul><li><code>id</code>: primary key for SQLite</li><li><code>name</code>: name of recipe</li><li><code>description</code>: short description of recipe</li><li><code>category</code>: category/cuisine (Vietnamese/Chinese)</li><li><code>mealType</code>: type of meals (Breakfast, Dinner,…)</li><li><code>time</code>: estimated to prepare the dish</li><li><code>imagePath</code>: local URI path to Recipe image</li><li><code>ingredients</code>: list of ingredients</li><li><code>instructions</code>: list of instructions</li></ul></li><li>Instruction :<ul><li><code>id</code>: primary key for SQLite</li><li><code>recipeID</code>: foreign key</li><li><code>content</code>: instruction body</li></ul></li><li>Ingredient :<ul><li><code>id</code>: primary key for SQLite</li><li><code>recipeID</code>: foreign key</li><li><code>name</code>: ingredient name <a href="https://camo.githubusercontent.com/797e593a78147ad691b2d046e1b76426c063283092763db6a8c7566d7b6ffb21/68747470733a2f2f692e696d6775722e636f6d2f594f4c374f756a2e706e67"><img src="https://camo.githubusercontent.com/797e593a78147ad691b2d046e1b76426c063283092763db6a8c7566d7b6ffb21/68747470733a2f2f692e696d6775722e636f6d2f594f4c374f756a2e706e67" alt="img"></a></li></ul></li></ul><h3 id="1-Database"><a href="#1-Database" class="headerlink" title="1. Database"></a>1. Database</h3><ul><li>We use local database SQLite and utilize abstract class <a href="https://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper"><code>SQLiteOpenHelper</code></a> to create and manage our database in <a href="https://github.com/TNBL265/TouchlessChef/blob/main/hands/src/main/java/app/touchlessChef/dao/SQLiteDbCRUD.java"><code>SQLiteDbCRUD</code></a></li></ul><p><a href="https://camo.githubusercontent.com/ec41a0a744d6385ec99e31a07a1a7cc3827b08f0b9e949432a1bbf382ef8a91f/68747470733a2f2f692e696d6775722e636f6d2f556f32645169462e706e67"><img src="https://camo.githubusercontent.com/ec41a0a744d6385ec99e31a07a1a7cc3827b08f0b9e949432a1bbf382ef8a91f/68747470733a2f2f692e696d6775722e636f6d2f556f32645169462e706e67" alt="drawing"></a> <a href="https://camo.githubusercontent.com/f27bd91ecfc2407df21da9b5390865f920f4e98539ab1a61372f8d34d731decc/68747470733a2f2f692e696d6775722e636f6d2f757667593236592e706e67"><img src="https://camo.githubusercontent.com/f27bd91ecfc2407df21da9b5390865f920f4e98539ab1a61372f8d34d731decc/68747470733a2f2f692e696d6775722e636f6d2f757667593236592e706e67" alt="drawing"></a></p><ul><li>Adapter in<code>DatabaseAdapter</code><ul><li>using <strong>Adapter Design Pattern</strong> as main API for Recipe CRUD operations</li><li>using <strong>Singleton Design Pattern</strong> to create a single instance of our database to be shared within all activities</li></ul></li><li>Data Access Objects (DAO):<ul><li>provide an API for our app to set/get data from SQLite database</li><li>map SQLite <code>Config</code> with corresponding model attributes</li><li><code>Config</code> is a nested class improving encapsulation since it is only used within <code>dao</code> package for CRUD operations <a href="https://camo.githubusercontent.com/ab0bbbe982ee75e8c1a4846edd3da3d0cc71cba3a496bd7478ff29912983e93d/68747470733a2f2f692e696d6775722e636f6d2f4d4c77735766532e706e67"><img src="https://camo.githubusercontent.com/ab0bbbe982ee75e8c1a4846edd3da3d0cc71cba3a496bd7478ff29912983e93d/68747470733a2f2f692e696d6775722e636f6d2f4d4c77735766532e706e67" alt="img"></a></li></ul></li></ul><h3 id="2-Activity"><a href="#2-Activity" class="headerlink" title="2. Activity"></a>2. Activity</h3><ul><li>Both <code>MainActivity</code> and <code>ViewRecipeActivity</code> inherits a <code>Toolbar</code> (explain in section B5a) from abstract class <a href="https://github.com/TNBL265/TouchlessChef/blob/main/hands/src/main/java/app/touchlessChef/activity/MenuActivity.java"><code>MenuActivity</code></a></li><li><code>MainActivity</code><ul><li>implements interface <code>BaseFragment.FragmentListener</code> that define blueprint for methods to:<ul><li>display recipe: <code>onShowRecipe</code> which navigates to <code>ViewRecipeActivity</code> (an <strong>Explicit Intent</strong>)</li><li>delete recipe: <code>onDeleteRecipe</code></li></ul></li><li>consists of 3 main views:<ul><li><code>ImageView</code> show background image for selected Cuisines</li><li><code>DrawerLayout</code> for <code>NavigationView</code> (explain in section B5b)</li><li><code>NestedScrollView</code> for displaying of recipes for different Cuisine Fragments (explain in section B4a) <a href="https://camo.githubusercontent.com/3abad28c86c495ef66c203e3b8e0b85d790231e75214bf6babedea7ff11329cd/68747470733a2f2f692e696d6775722e636f6d2f676e74644736622e706e67"><img src="https://camo.githubusercontent.com/3abad28c86c495ef66c203e3b8e0b85d790231e75214bf6babedea7ff11329cd/68747470733a2f2f692e696d6775722e636f6d2f676e74644736622e706e67" alt="img"></a></li></ul></li></ul></li><li><code>ViewRecipeActivity</code>:<ul><li>display chosen recipe from the data passed as parcel from <code>MainActivity</code></li><li>where <strong>HandsTracking</strong> feature (explain in section B3) is located</li></ul></li><li><code>CreateRecipeActivity</code><ul><li>implements 3 Recipe Create Fragment listener, each corresponding to 1 step in creating the recipe (explain in section B4b)</li><li>using <strong>Observer Design Pattern</strong>, changing Fragment when reaching subsequent step in creating Recipe <a href="https://camo.githubusercontent.com/ba495d01eb3fd14c04ab9a7e634b42ce99ada5309ade64d16e240094772d2f58/68747470733a2f2f692e696d6775722e636f6d2f4a51514d4672662e706e67"><img src="https://camo.githubusercontent.com/ba495d01eb3fd14c04ab9a7e634b42ce99ada5309ade64d16e240094772d2f58/68747470733a2f2f692e696d6775722e636f6d2f4a51514d4672662e706e67" alt="img"></a></li></ul></li></ul><h3 id="3-Hand-Tracking"><a href="#3-Hand-Tracking" class="headerlink" title="3. Hand Tracking"></a>3. Hand Tracking</h3><ul><li>This feature is implemented in <code>ViewRecipeActivity</code><ul><li>2 main Buttons <code>Start Tracking</code> and <code>Stop Tracking</code> to enable/disable the feature, which open up a <code>glSurfaceView</code> in the <code>RelativeLayout at the bottom of the page</code></li><li><code>glSurfaceView</code> is an instance of <code>SolutionGlSurfaceView&lt;HandsResult&gt;</code> provided by Mediapipe Library, similar to <a href="https://en.wikipedia.org/wiki/Java_OpenGL">OpenGL</a> that allows writing words and drawing on webcam output.</li><li>we detect whether the index finger is pointing up or down and from there, post a <code>Runnable</code> to our <code>ScrollView</code> (that is displaying the Ingredients and Instructions) to perform a smooth scroll correspoding to the gesture. <a href="https://camo.githubusercontent.com/495aca4b8f5d6950563130c404646125d54242b2e3bab8d9e08951f5a16c1040/68747470733a2f2f692e696d6775722e636f6d2f514871456c696b2e706e67"><img src="https://camo.githubusercontent.com/495aca4b8f5d6950563130c404646125d54242b2e3bab8d9e08951f5a16c1040/68747470733a2f2f692e696d6775722e636f6d2f514871456c696b2e706e67" alt="drawing"></a></li></ul></li></ul><h3 id="4-Fragment"><a href="#4-Fragment" class="headerlink" title="4. Fragment"></a>4. Fragment</h3><h4 id="a-Cuisine-Fragment-under-fragment-home"><a href="#a-Cuisine-Fragment-under-fragment-home" class="headerlink" title="a. Cuisine Fragment under fragment/home"></a>a. Cuisine Fragment under <a href="https://github.com/TNBL265/TouchlessChef/tree/main/hands/src/main/java/app/touchlessChef/fragment/home"><code>fragment/home</code></a></h4><p><a href="https://camo.githubusercontent.com/f8363e12a5a22f5626044f9fbc61243e3f8a2cade25498748f7e3149e943fedb/68747470733a2f2f692e696d6775722e636f6d2f6766364759397a2e706e67"><img src="https://camo.githubusercontent.com/f8363e12a5a22f5626044f9fbc61243e3f8a2cade25498748f7e3149e943fedb/68747470733a2f2f692e696d6775722e636f6d2f6766364759397a2e706e67" alt="img"></a></p><ul><li>Both <code>ChineseFragment</code> and <code>VietnameseFragment</code> extends from abstract class <code>BaseFragment</code><ul><li>using <strong>Factory Design Pattern</strong> (<code>BaseFragment</code> is the factory, <code>ChineseFragment</code> and <code>VietnameseFragment</code> are the products) allow us to easily scale to multiple cuisines in the future</li><li>the only abstract method is <code>getFragmentLayout</code> that each product should define to generate its own correct fragment</li><li>both using <code>RecyclerView</code> to display its recipes (explain in section B5c)</li></ul></li></ul><h4 id="b-Recipe-Create-Fragment-under-fragment-recipe"><a href="#b-Recipe-Create-Fragment-under-fragment-recipe" class="headerlink" title="b. Recipe Create Fragment under fragment/recipe"></a>b. Recipe Create Fragment under <a href="https://github.com/TNBL265/TouchlessChef/tree/main/hands/src/main/java/app/touchlessChef/fragment/recipe"><code>fragment/recipe</code></a></h4><p><a href="https://camo.githubusercontent.com/c160347f4977d083446d9522068f8d09376b75a9c1e0225e13902aaf15a1d72d/68747470733a2f2f692e696d6775722e636f6d2f66303735666d6b2e706e67"><img src="https://camo.githubusercontent.com/c160347f4977d083446d9522068f8d09376b75a9c1e0225e13902aaf15a1d72d/68747470733a2f2f692e696d6775722e636f6d2f66303735666d6b2e706e67" alt="img"></a></p><ul><li>3 fragments correspond to 3 steps in creating a new Recipe:<ul><li><code>RecipeCreateImageFragment</code>: (1st step) to add image, description, choose meal type and time</li><li><code>RecipeCreateIngredientFragment</code>: (2nd step) to add ingredients</li><li><code>RecipeCreateInstructionFragment</code>: (3rd step) to add instructions</li></ul></li></ul><p><a href="https://camo.githubusercontent.com/e3feefa7060906cf963bb8a05d143af7ebb119e99f0af0a4ffae68e54e253f07/68747470733a2f2f692e696d6775722e636f6d2f304b724c5370642e706e67"><img src="https://camo.githubusercontent.com/e3feefa7060906cf963bb8a05d143af7ebb119e99f0af0a4ffae68e54e253f07/68747470733a2f2f692e696d6775722e636f6d2f304b724c5370642e706e67" alt="drawing"></a> <a href="https://camo.githubusercontent.com/d12d6d998b831b091f57ae4eab7f55f429cdce7aae50960c4dc4aa5a1ad7e064/68747470733a2f2f692e696d6775722e636f6d2f6c4d4a6b7275732e706e67"><img src="https://camo.githubusercontent.com/d12d6d998b831b091f57ae4eab7f55f429cdce7aae50960c4dc4aa5a1ad7e064/68747470733a2f2f692e696d6775722e636f6d2f6c4d4a6b7275732e706e67" alt="drawing"></a> <a href="https://camo.githubusercontent.com/7dcb09ad3fc3825cccbca6b8c65c3e7fe3b0c057a100eb6be54ff1938d3a4a11/68747470733a2f2f692e696d6775722e636f6d2f437a736e43704d2e706e67"><img src="https://camo.githubusercontent.com/7dcb09ad3fc3825cccbca6b8c65c3e7fe3b0c057a100eb6be54ff1938d3a4a11/68747470733a2f2f692e696d6775722e636f6d2f437a736e43704d2e706e67" alt="drawing"></a></p><ul><li>All 3 Create Recipe Fragments extends the abstract class <code>NavigableFragment</code> :<ul><li>blueprint for method <code>onNext</code> that define which fragment to navigate to after completing each creating new recipe step</li><li>using <strong>Template Method Design Pattern</strong> with <code>NavigableFragment</code> as the template</li></ul></li><li><code>RecipeCreateImageFragment</code> can access the local storage to upload new image for recipe (an <strong>Implicit Intent</strong>)</li></ul><h3 id="5-View-and-Layout"><a href="#5-View-and-Layout" class="headerlink" title="5. View and Layout"></a>5. View and Layout</h3><h4 id="a-Toolbar"><a href="#a-Toolbar" class="headerlink" title="a. Toolbar"></a>a. Toolbar</h4><ul><li>Both <code>MainActivity</code> and <code>ViewRecipeActivity</code> needs to define its own Toolbar according to the blueprint defined in the abstract class <code>MenuActivity</code></li><li><code>MainActivity</code> Toolbar:<ul><li>includes <code>NavigationView</code> (explain in section B5b below)</li><li>includes menu to add a “New recipe”</li></ul></li><li><code>ViewRecipeActivity</code>Toolbar:<ul><li>support <strong>Edit</strong> and <strong>Delete</strong> recipe functionalities</li></ul></li></ul><p><a href="https://camo.githubusercontent.com/4909fb08e3c5f8b9d5ca4c34fb4be64f94ffe25480df2ba895db9b6984f6117b/68747470733a2f2f692e696d6775722e636f6d2f3738664e304a4b2e706e67"><img src="https://camo.githubusercontent.com/4909fb08e3c5f8b9d5ca4c34fb4be64f94ffe25480df2ba895db9b6984f6117b/68747470733a2f2f692e696d6775722e636f6d2f3738664e304a4b2e706e67" alt="drawing"></a> <a href="https://camo.githubusercontent.com/bfc21f32b917be2d07c33f063a8a2f60a6b9353ce0201cd849bb0647f07aa343/68747470733a2f2f692e696d6775722e636f6d2f584358474e51532e706e67"><img src="https://camo.githubusercontent.com/bfc21f32b917be2d07c33f063a8a2f60a6b9353ce0201cd849bb0647f07aa343/68747470733a2f2f692e696d6775722e636f6d2f584358474e51532e706e67" alt="drawing"></a></p><h4 id="b-Navigation-View-and-DrawerLayout"><a href="#b-Navigation-View-and-DrawerLayout" class="headerlink" title="b. Navigation View and DrawerLayout"></a>b. Navigation View and DrawerLayout</h4><ul><li>make use of a <code>switch</code> case to switch to a different cuisine inside <code>MainActivity</code></li><li>once a new cuisine is selected, the corresponding Fragment (<code>ChineseFragment</code> or <code>VietnameseFragment</code>) will be added into <code>NestedScrollView</code> to show recipe <code>CardView</code></li></ul><p><a href="https://camo.githubusercontent.com/5999c15ea935afb0f770e613c479ec2efc7851c36c9310828c52d7c2ed1f4662/68747470733a2f2f692e696d6775722e636f6d2f483975595858572e706e67"><img src="https://camo.githubusercontent.com/5999c15ea935afb0f770e613c479ec2efc7851c36c9310828c52d7c2ed1f4662/68747470733a2f2f692e696d6775722e636f6d2f483975595858572e706e67" alt="drawing"></a> <a href="https://camo.githubusercontent.com/5c900aad16fe7c056c2d56c739c40655c21a3f26fabeb640f7660474366d78f4/68747470733a2f2f692e696d6775722e636f6d2f3378546a5734342e706e67"><img src="https://camo.githubusercontent.com/5c900aad16fe7c056c2d56c739c40655c21a3f26fabeb640f7660474366d78f4/68747470733a2f2f692e696d6775722e636f6d2f3378546a5734342e706e67" alt="drawing"></a></p><h4 id="c-RecyclerView"><a href="#c-RecyclerView" class="headerlink" title="c. RecyclerView"></a>c. RecyclerView</h4><ul><li>We user <code>RecyclerView</code> at 2 places:<ul><li>to display recipes in the Cuisine Fragment (<code>BaseFragment</code>)</li><li>to display the added ingredients and instructions when creating new recipe in Recipe Create Fragment</li></ul></li><li>To implement <code>RecyclerView</code> we need to implement the corresponding adapter as shown in <code>adapter/recipe</code> (Adapter Design Pattern)<ul><li>the 3 main functions in each adapter to override are:<ul><li><code>onCreateViewHolder</code> that inflate a new view in the parent layout to allow for display of listed items</li><li><code>onBindViewHolder</code> that binds the data to be displayed in as listed items</li><li><code>getItemCount</code> that return the size of all the items to be displayed</li></ul></li><li>in the corresponding Fragment, before we set the above adapter, we also need to set a <code>LinearLayoutManager</code> for the <code>RecyclerView</code> to reside in</li><li>code examples:</li></ul></li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private RecyclerView instructionRecyclerView;</span><br><span class="line">instructionRecyclerView.setHasFixedSize(true);</span><br><span class="line">instructionRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));</span><br><span class="line">instructionRecyclerView.setAdapter(instructionAdapter);</span><br></pre></td></tr></tbody></table></figure><h2 id="C-Appendix"><a href="#C-Appendix" class="headerlink" title="C. Appendix"></a>C. Appendix</h2><h3 id="0-Reference"><a href="#0-Reference" class="headerlink" title="0. Reference:"></a>0. Reference:</h3><ul><li>We made use of a some very useful Youtube tutorials + Github repos to build a normal Cooking Recipe app before adding modifications and our hand tracking feature:<ul><li><a href="https://www.youtube.com/watch?v=6-891CSz6v0">Coding with Evan</a></li><li><a href="https://www.youtube.com/watch?v=Pe5dlibIMG8&amp;list=PLPIUB9tHYMdvnKejGY-ggulrkgj6cBb4S">Muhammad Shahid Niazi</a></li><li><a href="https://github.com/aza0092/Cooking-Recipe-Android-App">aza0092/Cooking-Recipe-Android-App</a></li></ul></li></ul><h3 id="1-User-Story-Development"><a href="#1-User-Story-Development" class="headerlink" title="1. User Story Development"></a>1. User Story Development</h3><ul><li>BDD: Behaviour-Driven Design <a href="https://camo.githubusercontent.com/ace900256618d376a289d94c52b4ee129856488dc95b1532b5445bdd9a5fe8e9/68747470733a2f2f692e696d6775722e636f6d2f4c585a315a4c622e706e67"><img src="https://camo.githubusercontent.com/ace900256618d376a289d94c52b4ee129856488dc95b1532b5445bdd9a5fe8e9/68747470733a2f2f692e696d6775722e636f6d2f4c585a315a4c622e706e67" alt="img"></a> <a href="https://camo.githubusercontent.com/8e77afe7761d1c752b456b8dd6b02a9287eeeb2556bf67eebfd75cb8eab532b4/68747470733a2f2f692e696d6775722e636f6d2f4c61555135785a2e706e67"><img src="https://camo.githubusercontent.com/8e77afe7761d1c752b456b8dd6b02a9287eeeb2556bf67eebfd75cb8eab532b4/68747470733a2f2f692e696d6775722e636f6d2f4c61555135785a2e706e67" alt="img"></a></li><li>SMART User Stories: <strong>Specific, Measurable, Achievable, Relevant, and Time- boxed</strong> <a href="https://camo.githubusercontent.com/e088ec71ba5eeaf04f2ea9aa4eb5d1c7b17eb3474b5babff5543d718e0336b3b/68747470733a2f2f692e696d6775722e636f6d2f4644374d7373662e6a7067"><img src="https://camo.githubusercontent.com/e088ec71ba5eeaf04f2ea9aa4eb5d1c7b17eb3474b5babff5543d718e0336b3b/68747470733a2f2f692e696d6775722e636f6d2f4644374d7373662e6a7067" alt="img"></a> <a href="https://camo.githubusercontent.com/75a1f3cc1e754104f589d7546daf2581f7189189971428a45e12c60d68d09980/68747470733a2f2f692e696d6775722e636f6d2f396679714946662e6a7067"><img src="https://camo.githubusercontent.com/75a1f3cc1e754104f589d7546daf2581f7189189971428a45e12c60d68d09980/68747470733a2f2f692e696d6775722e636f6d2f396679714946662e6a7067" alt="img"></a> <a href="https://camo.githubusercontent.com/cd8254e3430cf6a97691ea6f8c46fbd5b8b0d74298715181072135a7b52ee840/68747470733a2f2f692e696d6775722e636f6d2f6d6f64657671642e706e67"><img src="https://camo.githubusercontent.com/cd8254e3430cf6a97691ea6f8c46fbd5b8b0d74298715181072135a7b52ee840/68747470733a2f2f692e696d6775722e636f6d2f6d6f64657671642e706e67" alt="img"></a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android app development </tag>
            
            <tag> Design patterns </tag>
            
            <tag> Data Base </tag>
            
            <tag> Hand Detection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux folder</title>
      <link href="/liangjunyi.github.io/2022/05/18/linux-linux-folder/"/>
      <url>/liangjunyi.github.io/2022/05/18/linux-linux-folder/</url>
      
        <content type="html"><![CDATA[<h2 id="—-The-Root-Directory"><a href="#—-The-Root-Directory" class="headerlink" title="/ — The Root Directory"></a>/ — The Root Directory</h2><p>Everything on your Linux system is located under the / directory, known as the root directory. You can think of the / directory as being similar to the C:\ directory on Windows — but this isn’t strictly true, as Linux doesn’t have drive letters. While another partition would be located at D:\ on Windows, this other partition would appear in another folder under / on Linux.</p><p><img src="https://www.howtogeek.com/wp-content/uploads/2012/06/image352.png?trim=1,1&amp;bg-color=000&amp;pad=1,1" alt="img"></p><h2 id="bin-—-Essential-User-Binaries"><a href="#bin-—-Essential-User-Binaries" class="headerlink" title="/bin — Essential User Binaries"></a>/bin — Essential User Binaries</h2><p>The /bin directory contains the essential user binaries (programs) that must be present when the system is mounted in single-user mode. Applications such as Firefox are stored in /usr/bin, while important system programs and utilities such as the bash shell are located in /bin. The /usr directory may be stored on another partition — placing these files in the /bin directory ensures the system will have these important utilities even if no other file systems are mounted. The /sbin directory is similar — it contains essential system administration binaries.</p><p>是Binary的缩写，这个目录存放着最经常使用的命令</p><ul><li>比如 <code>cal</code></li><li>比如 <code>cd</code></li></ul><p>在它下面还有 <code>/user/bin</code> 和 <code>/user/local/bin</code></p><p><img src="https://www.howtogeek.com/wp-content/uploads/2012/06/image353.png?trim=1,1&amp;bg-color=000&amp;pad=1,1" alt="img"></p><h2 id="boot-—-Static-Boot-Files"><a href="#boot-—-Static-Boot-Files" class="headerlink" title="/boot — Static Boot Files"></a>/boot — Static Boot Files</h2><p>The /boot directory contains the files needed to boot the system — for example, the GRUB boot loader’s files and your Linux kernels are stored here. The boot loader’s configuration files aren’t located here, though — they’re in /etc with the other configuration files.</p><p>存放的是启动Linux的时候使用的一些核心文件，包括一些连接文件以及镜像文件</p><h2 id="cdrom-—-Historical-Mount-Point-for-CD-ROMs"><a href="#cdrom-—-Historical-Mount-Point-for-CD-ROMs" class="headerlink" title="/cdrom — Historical Mount Point for CD-ROMs"></a>/cdrom — Historical Mount Point for CD-ROMs</h2><p>The /cdrom directory isn’t part of the FHS standard, but you’ll still find it on Ubuntu and other operating systems. It’s a temporary location for CD-ROMs inserted in the system. However, the standard location for temporary media is inside the /media directory.</p><h2 id="dev-—-Device-Files"><a href="#dev-—-Device-Files" class="headerlink" title="/dev — Device Files"></a>/dev — Device Files</h2><p>Linux exposes devices as files, and the /dev directory contains a number of special files that represent devices. These are not actual files as we know them, but they appear as files — for example, /dev/sda represents the first SATA drive in the system. If you wanted to partition it, you could start a partition editor and tell it to edit /dev/sda.</p><p>This directory also contains pseudo-devices, which are virtual devices that don’t actually correspond to hardware. For example, /dev/random produces random numbers. /dev/null is a special device that produces no output and automatically discards all input — when you pipe the output of a command to /dev/null, you discard it.</p><p>类似于windows设备管理器，把所有的硬件以文件的形式存储</p><p><img src="https://www.howtogeek.com/wp-content/uploads/2012/06/image354.png?trim=1,1&amp;bg-color=000&amp;pad=1,1" alt="img"></p><h2 id="etc-—-Configuration-Files"><a href="#etc-—-Configuration-Files" class="headerlink" title="/etc — Configuration Files"></a>/etc — Configuration Files</h2><p>The /etc directory contains configuration files, which can generally be edited by hand in a text editor. Note that the /etc/ directory contains system-wide configuration files — user-specific configuration files are located in each user’s home directory.</p><p>所有的系统管理所需要的配置文件和子目录，比如安装mysql数据库，安装完成后，这个mysql的配置文件 <code>mysql.conf</code> 会放入这个目录下</p><h2 id="home-—-Home-Folders"><a href="#home-—-Home-Folders" class="headerlink" title="/home — Home Folders"></a>/home — Home Folders</h2><p>The /home directory contains a home folder for each user. For example, if your user name is bob, you have a home folder located at /home/bob. This home folder contains the user’s data files and user-specific configuration files. Each user only has write access to their own home folder and must obtain elevated permissions (become the root user) to modify other files on the system.</p><p>存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名</p><p><img src="https://www.howtogeek.com/wp-content/uploads/2012/06/image355.png?trim=1,1&amp;bg-color=000&amp;pad=1,1" alt="img"></p><h2 id="lib-—-Essential-Shared-Libraries"><a href="#lib-—-Essential-Shared-Libraries" class="headerlink" title="/lib — Essential Shared Libraries"></a>/lib — Essential Shared Libraries</h2><p>The /lib directory contains libraries needed by the essential binaries in the /bin and /sbin folder. Libraries needed by the binaries in the /usr/bin folder are located in /usr/lib.</p><p>系统开机所需要的最基本的动态链接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</p><h2 id="lost-found-—-Recovered-Files"><a href="#lost-found-—-Recovered-Files" class="headerlink" title="/lost+found — Recovered Files"></a>/lost+found — Recovered Files</h2><p>Each Linux file system has a lost+found directory. If the file system crashes, a file system check will be performed at next boot. Any corrupted files found will be placed in the lost+found directory, so you can attempt to recover as much data as possible.</p><p>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件</p><p>这个目录直接看找不到，在cmd中根目录下能看到指令为</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> / <span class="comment"># 到根目录下</span></span><br><span class="line"><span class="built_in">ls</span> <span class="comment"># 展示当前目录的东西</span></span><br></pre></td></tr></tbody></table></figure><h2 id="media-—-Removable-Media"><a href="#media-—-Removable-Media" class="headerlink" title="/media — Removable Media"></a>/media — Removable Media</h2><p>The /media directory contains subdirectories where removable media devices inserted into the computer are mounted. For example, when you insert a CD into your Linux system, a directory will automatically be created inside the /media directory. You can access the contents of the CD inside this directory.</p><p>linux系统会自动识别一些设备，例如U盘，光驱等等，当识别后，linux会把识别的设备挂载到这个目录下</p><h2 id="mnt-—-Temporary-Mount-Points"><a href="#mnt-—-Temporary-Mount-Points" class="headerlink" title="/mnt — Temporary Mount Points"></a>/mnt — Temporary Mount Points</h2><p>Historically speaking, the /mnt directory is where system administrators mounted temporary file systems while using them. For example, if you’re mounting a Windows partition to perform some file recovery operations, you might mount it at /mnt/windows. However, you can mount other file systems anywhere on the system.</p><p>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载到 <code>/mnt/</code> 上，然后进入该目录就可以查看里面的内容了   </p><p><code>d:/myshare</code> 就用到了这个目录，使我们虚拟机linux和windows共享了这个文件夹</p><h2 id="opt-—-Optional-Packages"><a href="#opt-—-Optional-Packages" class="headerlink" title="/opt — Optional Packages"></a>/opt — Optional Packages</h2><p>The /opt directory contains subdirectories for optional software packages. It’s commonly used by proprietary software that doesn’t obey the standard file system hierarchy — for example, a proprietary program might dump its files in /opt/application when you install it.</p><p>这是给主机额外安装软件所存放的目录。如安装ORACLE数据库就可以放到该目录下。默认为空。</p><p>一般我们先把安装文件拷贝到opt目录下面来，便于管理，约定俗成</p><h2 id="proc-—-Kernel-Process-Files"><a href="#proc-—-Kernel-Process-Files" class="headerlink" title="/proc — Kernel &amp; Process Files"></a>/proc — Kernel &amp; Process Files</h2><p>The /proc directory similar to the /dev directory because it doesn’t contain standard files. It contains special files that represent system and process information.</p><p>这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息，一般不能动这个文件</p><p><img src="https://www.howtogeek.com/wp-content/uploads/2012/06/image356.png?trim=1,1&amp;bg-color=000&amp;pad=1,1" alt="img"></p><h2 id="root-—-Root-Home-Directory"><a href="#root-—-Root-Home-Directory" class="headerlink" title="/root — Root Home Directory"></a>/root — Root Home Directory</h2><p>The /root directory is the home directory of the root user. Instead of being located at /home/root, it’s located at /root. This is distinct from /, which is the system root directory.</p><p>该目录为系统管理员，也称作超级权限者的用户主目录</p><h2 id="run-—-Application-State-Files"><a href="#run-—-Application-State-Files" class="headerlink" title="/run — Application State Files"></a>/run — Application State Files</h2><p>The /run directory is fairly new, and gives applications a standard place to store transient files they require like sockets and process IDs. These files can’t be stored in /tmp because files in /tmp may be deleted.</p><h2 id="sbin-—-System-Administration-Binaries"><a href="#sbin-—-System-Administration-Binaries" class="headerlink" title="/sbin — System Administration Binaries"></a>/sbin — System Administration Binaries</h2><p>The /sbin directory is similar to the /bin directory. It contains essential binaries that are generally intended to be run by the root user for system administration.</p><p>s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序</p><p><img src="https://www.howtogeek.com/wp-content/uploads/2012/06/image357.png?trim=1,1&amp;bg-color=000&amp;pad=1,1" alt="img"></p><h2 id="selinux-—-SELinux-Virtual-File-System"><a href="#selinux-—-SELinux-Virtual-File-System" class="headerlink" title="/selinux — SELinux Virtual File System"></a>/selinux — SELinux Virtual File System</h2><p>If your Linux distribution uses SELinux for security (Fedora and Red Hat, for example), the /selinux directory contains special files used by SELinux. It’s similar to /proc. Ubuntu doesn’t use SELinux, so the presence of this folder on Ubuntu appears to be a bug.</p><p>security-enhanced linux SELinux是一种安全子系统，他能控制程序只能访问特定文件，有三种工作模式，可以自行设置</p><h2 id="srv-—-Service-Data"><a href="#srv-—-Service-Data" class="headerlink" title="/srv — Service Data"></a>/srv — Service Data</h2><p>The /srv directory contains “data for services provided by the system.” If you were using the Apache HTTP server to serve a website, you’d likely store your website’s files in a directory inside the /srv directory.</p><p><strong>RELATED:</strong> <a href="https://www.howtogeek.com/devops/how-to-find-your-apache-configuration-folder/">*<strong>How to Find Your Apache Configuration Folder*</strong></a></p><p>service的缩写，该目录存放一些服务启动之后需要提取的数据</p><h2 id="tmp-—-Temporary-Files"><a href="#tmp-—-Temporary-Files" class="headerlink" title="/tmp — Temporary Files"></a>/tmp — Temporary Files</h2><p>Applications store temporary files in the /tmp directory. These files are generally deleted whenever your system is restarted and may be deleted at any time by utilities such as tmpwatch.</p><p>存放一些临时文件</p><h2 id="usr-—-User-Binaries-Read-Only-Data"><a href="#usr-—-User-Binaries-Read-Only-Data" class="headerlink" title="/usr — User Binaries &amp; Read-Only Data"></a>/usr — User Binaries &amp; Read-Only Data</h2><p>The /usr directory contains applications and files used by users, as opposed to applications and files used by the system. For example, non-essential applications are located inside the /usr/bin directory instead of the /bin directory and non-essential system administration binaries are located in the /usr/sbin directory instead of the /sbin directory. Libraries for each are located inside the /usr/lib directory. The /usr directory also contains other directories — for example, architecture-independent files like graphics are located in /usr/share.</p><p>The /usr/local directory is where locally compiled applications install to by default — this prevents them from mucking up the rest of the system.</p><p>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录</p><p><code>/usr/local</code> 是另一个给主机额外安装软件的目录。一般是通过编译源码方式安装的程序。</p><p><img src="https://www.howtogeek.com/wp-content/uploads/2012/06/image358.png?trim=1,1&amp;bg-color=000&amp;pad=1,1" alt="img"></p><h2 id="var-—-Variable-Data-Files"><a href="#var-—-Variable-Data-Files" class="headerlink" title="/var — Variable Data Files"></a>/var — Variable Data Files</h2><p>The /var directory is the writable counterpart to the /usr directory, which must be read-only in normal operation. Log files and everything else that would normally be written to /usr during normal operation are written to the /var directory. For example, you’ll find log files in /var/log.</p><p>这个目录中存放着在不断扩充的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/liangjunyi.github.io/2022/05/18/hello-world/"/>
      <url>/liangjunyi.github.io/2022/05/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
